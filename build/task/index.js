(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.getQueryData = factory());
})(this, (function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var _typeof$2 = {exports: {}};

	(function (module) {
	  function _typeof(o) {
	    "@babel/helpers - typeof";

	    return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
	      return typeof o;
	    } : function (o) {
	      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
	    }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(o);
	  }
	  module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
	})(_typeof$2);
	var _typeofExports = _typeof$2.exports;
	var _typeof$1 = getDefaultExportFromCjs(_typeofExports);

	var _assign = function __assign() {
	  _assign = Object.assign || function __assign(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	      s = arguments[i];
	      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	    }
	    return t;
	  };
	  return _assign.apply(this, arguments);
	};
	function __read(o, n) {
	  var m = typeof Symbol === "function" && o[Symbol.iterator];
	  if (!m) return o;
	  var i = m.call(o),
	    r,
	    ar = [],
	    e;
	  try {
	    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	  } catch (error) {
	    e = {
	      error: error
	    };
	  } finally {
	    try {
	      if (r && !r.done && (m = i["return"])) m.call(i);
	    } finally {
	      if (e) throw e.error;
	    }
	  }
	  return ar;
	}
	function __spreadArray(to, from, pack) {
	  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	    if (ar || !(i in from)) {
	      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	      ar[i] = from[i];
	    }
	  }
	  return to.concat(ar || Array.prototype.slice.call(from));
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global$1F =
	  // eslint-disable-next-line es/no-global-this -- safe
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  // eslint-disable-next-line no-restricted-globals -- safe
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func -- fallback
	  (function () { return this; })() || Function('return this')();

	var objectGetOwnPropertyDescriptor = {};

	var fails$1f = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	var fails$1e = fails$1f;

	// Detect IE8's incomplete defineProperty implementation
	var descriptors = !fails$1e(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
	  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
	});

	var fails$1d = fails$1f;

	var functionBindNative = !fails$1d(function () {
	  var test = (function () { /* empty */ }).bind();
	  // eslint-disable-next-line no-prototype-builtins -- safe
	  return typeof test != 'function' || test.hasOwnProperty('prototype');
	});

	var NATIVE_BIND$4 = functionBindNative;

	var call$w = Function.prototype.call;

	var functionCall = NATIVE_BIND$4 ? call$w.bind(call$w) : function () {
	  return call$w.apply(call$w, arguments);
	};

	var objectPropertyIsEnumerable = {};

	var $propertyIsEnumerable$2 = {}.propertyIsEnumerable;
	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var getOwnPropertyDescriptor$8 = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor$8 && !$propertyIsEnumerable$2.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
	objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor$8(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : $propertyIsEnumerable$2;

	var createPropertyDescriptor$c = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var NATIVE_BIND$3 = functionBindNative;

	var FunctionPrototype$4 = Function.prototype;
	var bind$e = FunctionPrototype$4.bind;
	var call$v = FunctionPrototype$4.call;
	var uncurryThis$1f = NATIVE_BIND$3 && bind$e.bind(call$v, call$v);

	var functionUncurryThis = NATIVE_BIND$3 ? function (fn) {
	  return fn && uncurryThis$1f(fn);
	} : function (fn) {
	  return fn && function () {
	    return call$v.apply(fn, arguments);
	  };
	};

	var uncurryThis$1e = functionUncurryThis;

	var toString$E = uncurryThis$1e({}.toString);
	var stringSlice$g = uncurryThis$1e(''.slice);

	var classofRaw$1 = function (it) {
	  return stringSlice$g(toString$E(it), 8, -1);
	};

	var global$1E = global$1F;
	var uncurryThis$1d = functionUncurryThis;
	var fails$1c = fails$1f;
	var classof$k = classofRaw$1;

	var Object$6 = global$1E.Object;
	var split$3 = uncurryThis$1d(''.split);

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails$1c(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins -- safe
	  return !Object$6('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classof$k(it) == 'String' ? split$3(it, '') : Object$6(it);
	} : Object$6;

	var global$1D = global$1F;

	var TypeError$v = global$1D.TypeError;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.es/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible$i = function (it) {
	  if (it == undefined) throw TypeError$v("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings
	var IndexedObject$4 = indexedObject;
	var requireObjectCoercible$h = requireObjectCoercible$i;

	var toIndexedObject$f = function (it) {
	  return IndexedObject$4(requireObjectCoercible$h(it));
	};

	// `IsCallable` abstract operation
	// https://tc39.es/ecma262/#sec-iscallable
	var isCallable$v = function (argument) {
	  return typeof argument == 'function';
	};

	var isCallable$u = isCallable$v;

	var isObject$I = function (it) {
	  return typeof it == 'object' ? it !== null : isCallable$u(it);
	};

	var global$1C = global$1F;
	var isCallable$t = isCallable$v;

	var aFunction = function (argument) {
	  return isCallable$t(argument) ? argument : undefined;
	};

	var getBuiltIn$l = function (namespace, method) {
	  return arguments.length < 2 ? aFunction(global$1C[namespace]) : global$1C[namespace] && global$1C[namespace][method];
	};

	var uncurryThis$1c = functionUncurryThis;

	var objectIsPrototypeOf = uncurryThis$1c({}.isPrototypeOf);

	var getBuiltIn$k = getBuiltIn$l;

	var engineUserAgent = getBuiltIn$k('navigator', 'userAgent') || '';

	var global$1B = global$1F;
	var userAgent$7 = engineUserAgent;

	var process$4 = global$1B.process;
	var Deno = global$1B.Deno;
	var versions = process$4 && process$4.versions || Deno && Deno.version;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.');
	  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
	  // but their correct versions are not interesting for us
	  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
	}

	// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
	// so check `userAgent` even if `.v8` exists, but 0
	if (!version && userAgent$7) {
	  match = userAgent$7.match(/Edge\/(\d+)/);
	  if (!match || match[1] >= 74) {
	    match = userAgent$7.match(/Chrome\/(\d+)/);
	    if (match) version = +match[1];
	  }
	}

	var engineV8Version = version;

	/* eslint-disable es/no-symbol -- required for testing */

	var V8_VERSION$3 = engineV8Version;
	var fails$1b = fails$1f;

	// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails$1b(function () {
	  var symbol = Symbol();
	  // Chrome 38 Symbol has incorrect toString conversion
	  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
	  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
	    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
	    !Symbol.sham && V8_VERSION$3 && V8_VERSION$3 < 41;
	});

	/* eslint-disable es/no-symbol -- required for testing */

	var NATIVE_SYMBOL$3 = nativeSymbol;

	var useSymbolAsUid = NATIVE_SYMBOL$3
	  && !Symbol.sham
	  && typeof Symbol.iterator == 'symbol';

	var global$1A = global$1F;
	var getBuiltIn$j = getBuiltIn$l;
	var isCallable$s = isCallable$v;
	var isPrototypeOf$c = objectIsPrototypeOf;
	var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;

	var Object$5 = global$1A.Object;

	var isSymbol$b = USE_SYMBOL_AS_UID$1 ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  var $Symbol = getBuiltIn$j('Symbol');
	  return isCallable$s($Symbol) && isPrototypeOf$c($Symbol.prototype, Object$5(it));
	};

	var global$1z = global$1F;

	var String$7 = global$1z.String;

	var tryToString$5 = function (argument) {
	  try {
	    return String$7(argument);
	  } catch (error) {
	    return 'Object';
	  }
	};

	var global$1y = global$1F;
	var isCallable$r = isCallable$v;
	var tryToString$4 = tryToString$5;

	var TypeError$u = global$1y.TypeError;

	// `Assert: IsCallable(argument) is true`
	var aCallable$g = function (argument) {
	  if (isCallable$r(argument)) return argument;
	  throw TypeError$u(tryToString$4(argument) + ' is not a function');
	};

	var aCallable$f = aCallable$g;

	// `GetMethod` abstract operation
	// https://tc39.es/ecma262/#sec-getmethod
	var getMethod$9 = function (V, P) {
	  var func = V[P];
	  return func == null ? undefined : aCallable$f(func);
	};

	var global$1x = global$1F;
	var call$u = functionCall;
	var isCallable$q = isCallable$v;
	var isObject$H = isObject$I;

	var TypeError$t = global$1x.TypeError;

	// `OrdinaryToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-ordinarytoprimitive
	var ordinaryToPrimitive$2 = function (input, pref) {
	  var fn, val;
	  if (pref === 'string' && isCallable$q(fn = input.toString) && !isObject$H(val = call$u(fn, input))) return val;
	  if (isCallable$q(fn = input.valueOf) && !isObject$H(val = call$u(fn, input))) return val;
	  if (pref !== 'string' && isCallable$q(fn = input.toString) && !isObject$H(val = call$u(fn, input))) return val;
	  throw TypeError$t("Can't convert object to primitive value");
	};

	var shared$5 = {exports: {}};

	var isPure = false;

	var global$1w = global$1F;

	// eslint-disable-next-line es/no-object-defineproperty -- safe
	var defineProperty$k = Object.defineProperty;

	var setGlobal$3 = function (key, value) {
	  try {
	    defineProperty$k(global$1w, key, { value: value, configurable: true, writable: true });
	  } catch (error) {
	    global$1w[key] = value;
	  } return value;
	};

	var global$1v = global$1F;
	var setGlobal$2 = setGlobal$3;

	var SHARED = '__core-js_shared__';
	var store$3 = global$1v[SHARED] || setGlobal$2(SHARED, {});

	var sharedStore = store$3;

	var store$2 = sharedStore;

	(shared$5.exports = function (key, value) {
	  return store$2[key] || (store$2[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.21.1',
	  mode: 'global',
	  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
	  license: 'https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE',
	  source: 'https://github.com/zloirock/core-js'
	});

	var sharedExports = shared$5.exports;

	var global$1u = global$1F;
	var requireObjectCoercible$g = requireObjectCoercible$i;

	var Object$4 = global$1u.Object;

	// `ToObject` abstract operation
	// https://tc39.es/ecma262/#sec-toobject
	var toObject$q = function (argument) {
	  return Object$4(requireObjectCoercible$g(argument));
	};

	var uncurryThis$1b = functionUncurryThis;
	var toObject$p = toObject$q;

	var hasOwnProperty$e = uncurryThis$1b({}.hasOwnProperty);

	// `HasOwnProperty` abstract operation
	// https://tc39.es/ecma262/#sec-hasownproperty
	var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
	  return hasOwnProperty$e(toObject$p(it), key);
	};

	var uncurryThis$1a = functionUncurryThis;

	var id$2 = 0;
	var postfix = Math.random();
	var toString$D = uncurryThis$1a(1.0.toString);

	var uid$6 = function (key) {
	  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$D(++id$2 + postfix, 36);
	};

	var global$1t = global$1F;
	var shared$4 = sharedExports;
	var hasOwn$t = hasOwnProperty_1;
	var uid$5 = uid$6;
	var NATIVE_SYMBOL$2 = nativeSymbol;
	var USE_SYMBOL_AS_UID = useSymbolAsUid;

	var WellKnownSymbolsStore$1 = shared$4('wks');
	var Symbol$3 = global$1t.Symbol;
	var symbolFor = Symbol$3 && Symbol$3['for'];
	var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$3 : Symbol$3 && Symbol$3.withoutSetter || uid$5;

	var wellKnownSymbol$y = function (name) {
	  if (!hasOwn$t(WellKnownSymbolsStore$1, name) || !(NATIVE_SYMBOL$2 || typeof WellKnownSymbolsStore$1[name] == 'string')) {
	    var description = 'Symbol.' + name;
	    if (NATIVE_SYMBOL$2 && hasOwn$t(Symbol$3, name)) {
	      WellKnownSymbolsStore$1[name] = Symbol$3[name];
	    } else if (USE_SYMBOL_AS_UID && symbolFor) {
	      WellKnownSymbolsStore$1[name] = symbolFor(description);
	    } else {
	      WellKnownSymbolsStore$1[name] = createWellKnownSymbol(description);
	    }
	  } return WellKnownSymbolsStore$1[name];
	};

	var global$1s = global$1F;
	var call$t = functionCall;
	var isObject$G = isObject$I;
	var isSymbol$a = isSymbol$b;
	var getMethod$8 = getMethod$9;
	var ordinaryToPrimitive$1 = ordinaryToPrimitive$2;
	var wellKnownSymbol$x = wellKnownSymbol$y;

	var TypeError$s = global$1s.TypeError;
	var TO_PRIMITIVE$2 = wellKnownSymbol$x('toPrimitive');

	// `ToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-toprimitive
	var toPrimitive$3 = function (input, pref) {
	  if (!isObject$G(input) || isSymbol$a(input)) return input;
	  var exoticToPrim = getMethod$8(input, TO_PRIMITIVE$2);
	  var result;
	  if (exoticToPrim) {
	    if (pref === undefined) pref = 'default';
	    result = call$t(exoticToPrim, input, pref);
	    if (!isObject$G(result) || isSymbol$a(result)) return result;
	    throw TypeError$s("Can't convert object to primitive value");
	  }
	  if (pref === undefined) pref = 'number';
	  return ordinaryToPrimitive$1(input, pref);
	};

	var toPrimitive$2 = toPrimitive$3;
	var isSymbol$9 = isSymbol$b;

	// `ToPropertyKey` abstract operation
	// https://tc39.es/ecma262/#sec-topropertykey
	var toPropertyKey$8 = function (argument) {
	  var key = toPrimitive$2(argument, 'string');
	  return isSymbol$9(key) ? key : key + '';
	};

	var global$1r = global$1F;
	var isObject$F = isObject$I;

	var document$3 = global$1r.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS$1 = isObject$F(document$3) && isObject$F(document$3.createElement);

	var documentCreateElement$2 = function (it) {
	  return EXISTS$1 ? document$3.createElement(it) : {};
	};

	var DESCRIPTORS$A = descriptors;
	var fails$1a = fails$1f;
	var createElement$1 = documentCreateElement$2;

	// Thanks to IE8 for its funny defineProperty
	var ie8DomDefine = !DESCRIPTORS$A && !fails$1a(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
	  return Object.defineProperty(createElement$1('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	var DESCRIPTORS$z = descriptors;
	var call$s = functionCall;
	var propertyIsEnumerableModule$2 = objectPropertyIsEnumerable;
	var createPropertyDescriptor$b = createPropertyDescriptor$c;
	var toIndexedObject$e = toIndexedObject$f;
	var toPropertyKey$7 = toPropertyKey$8;
	var hasOwn$s = hasOwnProperty_1;
	var IE8_DOM_DEFINE$1 = ie8DomDefine;

	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var $getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
	objectGetOwnPropertyDescriptor.f = DESCRIPTORS$z ? $getOwnPropertyDescriptor$2 : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject$e(O);
	  P = toPropertyKey$7(P);
	  if (IE8_DOM_DEFINE$1) try {
	    return $getOwnPropertyDescriptor$2(O, P);
	  } catch (error) { /* empty */ }
	  if (hasOwn$s(O, P)) return createPropertyDescriptor$b(!call$s(propertyIsEnumerableModule$2.f, O, P), O[P]);
	};

	var objectDefineProperty = {};

	var DESCRIPTORS$y = descriptors;
	var fails$19 = fails$1f;

	// V8 ~ Chrome 36-
	// https://bugs.chromium.org/p/v8/issues/detail?id=3334
	var v8PrototypeDefineBug = DESCRIPTORS$y && fails$19(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
	  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
	    value: 42,
	    writable: false
	  }).prototype != 42;
	});

	var global$1q = global$1F;
	var isObject$E = isObject$I;

	var String$6 = global$1q.String;
	var TypeError$r = global$1q.TypeError;

	// `Assert: Type(argument) is Object`
	var anObject$C = function (argument) {
	  if (isObject$E(argument)) return argument;
	  throw TypeError$r(String$6(argument) + ' is not an object');
	};

	var global$1p = global$1F;
	var DESCRIPTORS$x = descriptors;
	var IE8_DOM_DEFINE = ie8DomDefine;
	var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
	var anObject$B = anObject$C;
	var toPropertyKey$6 = toPropertyKey$8;

	var TypeError$q = global$1p.TypeError;
	// eslint-disable-next-line es/no-object-defineproperty -- safe
	var $defineProperty$1 = Object.defineProperty;
	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
	var ENUMERABLE = 'enumerable';
	var CONFIGURABLE$1 = 'configurable';
	var WRITABLE = 'writable';

	// `Object.defineProperty` method
	// https://tc39.es/ecma262/#sec-object.defineproperty
	objectDefineProperty.f = DESCRIPTORS$x ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {
	  anObject$B(O);
	  P = toPropertyKey$6(P);
	  anObject$B(Attributes);
	  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
	    var current = $getOwnPropertyDescriptor$1(O, P);
	    if (current && current[WRITABLE]) {
	      O[P] = Attributes.value;
	      Attributes = {
	        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
	        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
	        writable: false
	      };
	    }
	  } return $defineProperty$1(O, P, Attributes);
	} : $defineProperty$1 : function defineProperty(O, P, Attributes) {
	  anObject$B(O);
	  P = toPropertyKey$6(P);
	  anObject$B(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return $defineProperty$1(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError$q('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var DESCRIPTORS$w = descriptors;
	var definePropertyModule$c = objectDefineProperty;
	var createPropertyDescriptor$a = createPropertyDescriptor$c;

	var createNonEnumerableProperty$f = DESCRIPTORS$w ? function (object, key, value) {
	  return definePropertyModule$c.f(object, key, createPropertyDescriptor$a(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var redefine$l = {exports: {}};

	var uncurryThis$19 = functionUncurryThis;
	var isCallable$p = isCallable$v;
	var store$1 = sharedStore;

	var functionToString$1 = uncurryThis$19(Function.toString);

	// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
	if (!isCallable$p(store$1.inspectSource)) {
	  store$1.inspectSource = function (it) {
	    return functionToString$1(it);
	  };
	}

	var inspectSource$4 = store$1.inspectSource;

	var global$1o = global$1F;
	var isCallable$o = isCallable$v;
	var inspectSource$3 = inspectSource$4;

	var WeakMap$4 = global$1o.WeakMap;

	var nativeWeakMap = isCallable$o(WeakMap$4) && /native code/.test(inspectSource$3(WeakMap$4));

	var shared$3 = sharedExports;
	var uid$4 = uid$6;

	var keys$8 = shared$3('keys');

	var sharedKey$4 = function (key) {
	  return keys$8[key] || (keys$8[key] = uid$4(key));
	};

	var hiddenKeys$6 = {};

	var NATIVE_WEAK_MAP$1 = nativeWeakMap;
	var global$1n = global$1F;
	var uncurryThis$18 = functionUncurryThis;
	var isObject$D = isObject$I;
	var createNonEnumerableProperty$e = createNonEnumerableProperty$f;
	var hasOwn$r = hasOwnProperty_1;
	var shared$2 = sharedStore;
	var sharedKey$3 = sharedKey$4;
	var hiddenKeys$5 = hiddenKeys$6;

	var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
	var TypeError$p = global$1n.TypeError;
	var WeakMap$3 = global$1n.WeakMap;
	var set$5, get$6, has;

	var enforce = function (it) {
	  return has(it) ? get$6(it) : set$5(it, {});
	};

	var getterFor$1 = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject$D(it) || (state = get$6(it)).type !== TYPE) {
	      throw TypeError$p('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (NATIVE_WEAK_MAP$1 || shared$2.state) {
	  var store = shared$2.state || (shared$2.state = new WeakMap$3());
	  var wmget = uncurryThis$18(store.get);
	  var wmhas = uncurryThis$18(store.has);
	  var wmset = uncurryThis$18(store.set);
	  set$5 = function (it, metadata) {
	    if (wmhas(store, it)) throw new TypeError$p(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    wmset(store, it, metadata);
	    return metadata;
	  };
	  get$6 = function (it) {
	    return wmget(store, it) || {};
	  };
	  has = function (it) {
	    return wmhas(store, it);
	  };
	} else {
	  var STATE = sharedKey$3('state');
	  hiddenKeys$5[STATE] = true;
	  set$5 = function (it, metadata) {
	    if (hasOwn$r(it, STATE)) throw new TypeError$p(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    createNonEnumerableProperty$e(it, STATE, metadata);
	    return metadata;
	  };
	  get$6 = function (it) {
	    return hasOwn$r(it, STATE) ? it[STATE] : {};
	  };
	  has = function (it) {
	    return hasOwn$r(it, STATE);
	  };
	}

	var internalState = {
	  set: set$5,
	  get: get$6,
	  has: has,
	  enforce: enforce,
	  getterFor: getterFor$1
	};

	var DESCRIPTORS$v = descriptors;
	var hasOwn$q = hasOwnProperty_1;

	var FunctionPrototype$3 = Function.prototype;
	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var getDescriptor = DESCRIPTORS$v && Object.getOwnPropertyDescriptor;

	var EXISTS = hasOwn$q(FunctionPrototype$3, 'name');
	// additional protection from minified / mangled / dropped function names
	var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
	var CONFIGURABLE = EXISTS && (!DESCRIPTORS$v || (DESCRIPTORS$v && getDescriptor(FunctionPrototype$3, 'name').configurable));

	var functionName = {
	  EXISTS: EXISTS,
	  PROPER: PROPER,
	  CONFIGURABLE: CONFIGURABLE
	};

	var global$1m = global$1F;
	var isCallable$n = isCallable$v;
	var hasOwn$p = hasOwnProperty_1;
	var createNonEnumerableProperty$d = createNonEnumerableProperty$f;
	var setGlobal$1 = setGlobal$3;
	var inspectSource$2 = inspectSource$4;
	var InternalStateModule$c = internalState;
	var CONFIGURABLE_FUNCTION_NAME$2 = functionName.CONFIGURABLE;

	var getInternalState$b = InternalStateModule$c.get;
	var enforceInternalState$2 = InternalStateModule$c.enforce;
	var TEMPLATE = String(String).split('String');

	(redefine$l.exports = function (O, key, value, options) {
	  var unsafe = options ? !!options.unsafe : false;
	  var simple = options ? !!options.enumerable : false;
	  var noTargetGet = options ? !!options.noTargetGet : false;
	  var name = options && options.name !== undefined ? options.name : key;
	  var state;
	  if (isCallable$n(value)) {
	    if (String(name).slice(0, 7) === 'Symbol(') {
	      name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
	    }
	    if (!hasOwn$p(value, 'name') || (CONFIGURABLE_FUNCTION_NAME$2 && value.name !== name)) {
	      createNonEnumerableProperty$d(value, 'name', name);
	    }
	    state = enforceInternalState$2(value);
	    if (!state.source) {
	      state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
	    }
	  }
	  if (O === global$1m) {
	    if (simple) O[key] = value;
	    else setGlobal$1(key, value);
	    return;
	  } else if (!unsafe) {
	    delete O[key];
	  } else if (!noTargetGet && O[key]) {
	    simple = true;
	  }
	  if (simple) O[key] = value;
	  else createNonEnumerableProperty$d(O, key, value);
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, 'toString', function toString() {
	  return isCallable$n(this) && getInternalState$b(this).source || inspectSource$2(this);
	});

	var redefineExports = redefine$l.exports;

	var objectGetOwnPropertyNames = {};

	var ceil$2 = Math.ceil;
	var floor$b = Math.floor;

	// `ToIntegerOrInfinity` abstract operation
	// https://tc39.es/ecma262/#sec-tointegerorinfinity
	var toIntegerOrInfinity$i = function (argument) {
	  var number = +argument;
	  // eslint-disable-next-line no-self-compare -- safe
	  return number !== number || number === 0 ? 0 : (number > 0 ? floor$b : ceil$2)(number);
	};

	var toIntegerOrInfinity$h = toIntegerOrInfinity$i;

	var max$7 = Math.max;
	var min$a = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex$9 = function (index, length) {
	  var integer = toIntegerOrInfinity$h(index);
	  return integer < 0 ? max$7(integer + length, 0) : min$a(integer, length);
	};

	var toIntegerOrInfinity$g = toIntegerOrInfinity$i;

	var min$9 = Math.min;

	// `ToLength` abstract operation
	// https://tc39.es/ecma262/#sec-tolength
	var toLength$d = function (argument) {
	  return argument > 0 ? min$9(toIntegerOrInfinity$g(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var toLength$c = toLength$d;

	// `LengthOfArrayLike` abstract operation
	// https://tc39.es/ecma262/#sec-lengthofarraylike
	var lengthOfArrayLike$n = function (obj) {
	  return toLength$c(obj.length);
	};

	var toIndexedObject$d = toIndexedObject$f;
	var toAbsoluteIndex$8 = toAbsoluteIndex$9;
	var lengthOfArrayLike$m = lengthOfArrayLike$n;

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod$6 = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject$d($this);
	    var length = lengthOfArrayLike$m(O);
	    var index = toAbsoluteIndex$8(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare -- NaN check
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare -- NaN check
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes$2 = {
	  // `Array.prototype.includes` method
	  // https://tc39.es/ecma262/#sec-array.prototype.includes
	  includes: createMethod$6(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.es/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod$6(false)
	};

	var uncurryThis$17 = functionUncurryThis;
	var hasOwn$o = hasOwnProperty_1;
	var toIndexedObject$c = toIndexedObject$f;
	var indexOf$3 = arrayIncludes$2.indexOf;
	var hiddenKeys$4 = hiddenKeys$6;

	var push$d = uncurryThis$17([].push);

	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject$c(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !hasOwn$o(hiddenKeys$4, key) && hasOwn$o(O, key) && push$d(result, key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (hasOwn$o(O, key = names[i++])) {
	    ~indexOf$3(result, key) || push$d(result, key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys$3 = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	var internalObjectKeys$1 = objectKeysInternal;
	var enumBugKeys$2 = enumBugKeys$3;

	var hiddenKeys$3 = enumBugKeys$2.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.es/ecma262/#sec-object.getownpropertynames
	// eslint-disable-next-line es/no-object-getownpropertynames -- safe
	objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return internalObjectKeys$1(O, hiddenKeys$3);
	};

	var objectGetOwnPropertySymbols = {};

	// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
	objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;

	var getBuiltIn$i = getBuiltIn$l;
	var uncurryThis$16 = functionUncurryThis;
	var getOwnPropertyNamesModule$2 = objectGetOwnPropertyNames;
	var getOwnPropertySymbolsModule$2 = objectGetOwnPropertySymbols;
	var anObject$A = anObject$C;

	var concat$3 = uncurryThis$16([].concat);

	// all object keys, includes non-enumerable and symbols
	var ownKeys$3 = getBuiltIn$i('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = getOwnPropertyNamesModule$2.f(anObject$A(it));
	  var getOwnPropertySymbols = getOwnPropertySymbolsModule$2.f;
	  return getOwnPropertySymbols ? concat$3(keys, getOwnPropertySymbols(it)) : keys;
	};

	var hasOwn$n = hasOwnProperty_1;
	var ownKeys$2 = ownKeys$3;
	var getOwnPropertyDescriptorModule$6 = objectGetOwnPropertyDescriptor;
	var definePropertyModule$b = objectDefineProperty;

	var copyConstructorProperties$4 = function (target, source, exceptions) {
	  var keys = ownKeys$2(source);
	  var defineProperty = definePropertyModule$b.f;
	  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule$6.f;
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!hasOwn$n(target, key) && !(exceptions && hasOwn$n(exceptions, key))) {
	      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	    }
	  }
	};

	var fails$18 = fails$1f;
	var isCallable$m = isCallable$v;

	var replacement = /#|\.prototype\./;

	var isForced$5 = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : isCallable$m(detection) ? fails$18(detection)
	    : !!detection;
	};

	var normalize = isForced$5.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced$5.data = {};
	var NATIVE = isForced$5.NATIVE = 'N';
	var POLYFILL = isForced$5.POLYFILL = 'P';

	var isForced_1 = isForced$5;

	var global$1l = global$1F;
	var getOwnPropertyDescriptor$7 = objectGetOwnPropertyDescriptor.f;
	var createNonEnumerableProperty$c = createNonEnumerableProperty$f;
	var redefine$k = redefineExports;
	var setGlobal = setGlobal$3;
	var copyConstructorProperties$3 = copyConstructorProperties$4;
	var isForced$4 = isForced_1;

	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	  options.name        - the .name of the function if it does not match the key
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
	  if (GLOBAL) {
	    target = global$1l;
	  } else if (STATIC) {
	    target = global$1l[TARGET] || setGlobal(TARGET, {});
	  } else {
	    target = (global$1l[TARGET] || {}).prototype;
	  }
	  if (target) for (key in source) {
	    sourceProperty = source[key];
	    if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$7(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];
	    FORCED = isForced$4(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contained in target
	    if (!FORCED && targetProperty !== undefined) {
	      if (typeof sourceProperty == typeof targetProperty) continue;
	      copyConstructorProperties$3(sourceProperty, targetProperty);
	    }
	    // add a flag to not completely full polyfills
	    if (options.sham || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty$c(sourceProperty, 'sham', true);
	    }
	    // extend global
	    redefine$k(target, key, sourceProperty, options);
	  }
	};

	var NATIVE_BIND$2 = functionBindNative;

	var FunctionPrototype$2 = Function.prototype;
	var apply$e = FunctionPrototype$2.apply;
	var call$r = FunctionPrototype$2.call;

	// eslint-disable-next-line es/no-reflect -- safe
	var functionApply$1 = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND$2 ? call$r.bind(apply$e) : function () {
	  return call$r.apply(apply$e, arguments);
	});

	var classof$j = classofRaw$1;

	// `IsArray` abstract operation
	// https://tc39.es/ecma262/#sec-isarray
	// eslint-disable-next-line es/no-array-isarray -- safe
	var isArray$j = Array.isArray || function isArray(argument) {
	  return classof$j(argument) == 'Array';
	};

	var wellKnownSymbol$w = wellKnownSymbol$y;

	var TO_STRING_TAG$5 = wellKnownSymbol$w('toStringTag');
	var test$2 = {};

	test$2[TO_STRING_TAG$5] = 'z';

	var toStringTagSupport = String(test$2) === '[object z]';

	var global$1k = global$1F;
	var TO_STRING_TAG_SUPPORT$2 = toStringTagSupport;
	var isCallable$l = isCallable$v;
	var classofRaw = classofRaw$1;
	var wellKnownSymbol$v = wellKnownSymbol$y;

	var TO_STRING_TAG$4 = wellKnownSymbol$v('toStringTag');
	var Object$3 = global$1k.Object;

	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof$i = TO_STRING_TAG_SUPPORT$2 ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = Object$3(it), TO_STRING_TAG$4)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) == 'Object' && isCallable$l(O.callee) ? 'Arguments' : result;
	};

	var global$1j = global$1F;
	var classof$h = classof$i;

	var String$5 = global$1j.String;

	var toString$C = function (argument) {
	  if (classof$h(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
	  return String$5(argument);
	};

	var objectDefineProperties = {};

	var internalObjectKeys = objectKeysInternal;
	var enumBugKeys$1 = enumBugKeys$3;

	// `Object.keys` method
	// https://tc39.es/ecma262/#sec-object.keys
	// eslint-disable-next-line es/no-object-keys -- safe
	var objectKeys$5 = Object.keys || function keys(O) {
	  return internalObjectKeys(O, enumBugKeys$1);
	};

	var DESCRIPTORS$u = descriptors;
	var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
	var definePropertyModule$a = objectDefineProperty;
	var anObject$z = anObject$C;
	var toIndexedObject$b = toIndexedObject$f;
	var objectKeys$4 = objectKeys$5;

	// `Object.defineProperties` method
	// https://tc39.es/ecma262/#sec-object.defineproperties
	// eslint-disable-next-line es/no-object-defineproperties -- safe
	objectDefineProperties.f = DESCRIPTORS$u && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject$z(O);
	  var props = toIndexedObject$b(Properties);
	  var keys = objectKeys$4(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) definePropertyModule$a.f(O, key = keys[index++], props[key]);
	  return O;
	};

	var getBuiltIn$h = getBuiltIn$l;

	var html$2 = getBuiltIn$h('document', 'documentElement');

	/* global ActiveXObject -- old IE, WSH */

	var anObject$y = anObject$C;
	var definePropertiesModule$1 = objectDefineProperties;
	var enumBugKeys = enumBugKeys$3;
	var hiddenKeys$2 = hiddenKeys$6;
	var html$1 = html$2;
	var documentCreateElement$1 = documentCreateElement$2;
	var sharedKey$2 = sharedKey$4;

	var GT = '>';
	var LT = '<';
	var PROTOTYPE$2 = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO$1 = sharedKey$2('IE_PROTO');

	var EmptyConstructor = function () { /* empty */ };

	var scriptTag = function (content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX = function (activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak
	  return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement$1('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html$1.appendChild(iframe);
	  // https://github.com/zloirock/core-js/issues/475
	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument;
	var NullProtoObject = function () {
	  try {
	    activeXDocument = new ActiveXObject('htmlfile');
	  } catch (error) { /* ignore */ }
	  NullProtoObject = typeof document != 'undefined'
	    ? document.domain && activeXDocument
	      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
	      : NullProtoObjectViaIFrame()
	    : NullProtoObjectViaActiveX(activeXDocument); // WSH
	  var length = enumBugKeys.length;
	  while (length--) delete NullProtoObject[PROTOTYPE$2][enumBugKeys[length]];
	  return NullProtoObject();
	};

	hiddenKeys$2[IE_PROTO$1] = true;

	// `Object.create` method
	// https://tc39.es/ecma262/#sec-object.create
	var objectCreate$1 = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE$2] = anObject$y(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE$2] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$1] = O;
	  } else result = NullProtoObject();
	  return Properties === undefined ? result : definePropertiesModule$1.f(result, Properties);
	};

	var objectGetOwnPropertyNamesExternal = {};

	var toPropertyKey$5 = toPropertyKey$8;
	var definePropertyModule$9 = objectDefineProperty;
	var createPropertyDescriptor$9 = createPropertyDescriptor$c;

	var createProperty$9 = function (object, key, value) {
	  var propertyKey = toPropertyKey$5(key);
	  if (propertyKey in object) definePropertyModule$9.f(object, propertyKey, createPropertyDescriptor$9(0, value));
	  else object[propertyKey] = value;
	};

	var global$1i = global$1F;
	var toAbsoluteIndex$7 = toAbsoluteIndex$9;
	var lengthOfArrayLike$l = lengthOfArrayLike$n;
	var createProperty$8 = createProperty$9;

	var Array$9 = global$1i.Array;
	var max$6 = Math.max;

	var arraySliceSimple = function (O, start, end) {
	  var length = lengthOfArrayLike$l(O);
	  var k = toAbsoluteIndex$7(start, length);
	  var fin = toAbsoluteIndex$7(end === undefined ? length : end, length);
	  var result = Array$9(max$6(fin - k, 0));
	  for (var n = 0; k < fin; k++, n++) createProperty$8(result, n, O[k]);
	  result.length = n;
	  return result;
	};

	/* eslint-disable es/no-object-getownpropertynames -- safe */

	var classof$g = classofRaw$1;
	var toIndexedObject$a = toIndexedObject$f;
	var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
	var arraySlice$c = arraySliceSimple;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return $getOwnPropertyNames$1(it);
	  } catch (error) {
	    return arraySlice$c(windowNames);
	  }
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	objectGetOwnPropertyNamesExternal.f = function getOwnPropertyNames(it) {
	  return windowNames && classof$g(it) == 'Window'
	    ? getWindowNames(it)
	    : $getOwnPropertyNames$1(toIndexedObject$a(it));
	};

	var uncurryThis$15 = functionUncurryThis;

	var arraySlice$b = uncurryThis$15([].slice);

	var wellKnownSymbolWrapped = {};

	var wellKnownSymbol$u = wellKnownSymbol$y;

	wellKnownSymbolWrapped.f = wellKnownSymbol$u;

	var global$1h = global$1F;

	var path$1 = global$1h;

	var path = path$1;
	var hasOwn$m = hasOwnProperty_1;
	var wrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
	var defineProperty$j = objectDefineProperty.f;

	var defineWellKnownSymbol$e = function (NAME) {
	  var Symbol = path.Symbol || (path.Symbol = {});
	  if (!hasOwn$m(Symbol, NAME)) defineProperty$j(Symbol, NAME, {
	    value: wrappedWellKnownSymbolModule$1.f(NAME)
	  });
	};

	var defineProperty$i = objectDefineProperty.f;
	var hasOwn$l = hasOwnProperty_1;
	var wellKnownSymbol$t = wellKnownSymbol$y;

	var TO_STRING_TAG$3 = wellKnownSymbol$t('toStringTag');

	var setToStringTag$c = function (target, TAG, STATIC) {
	  if (target && !STATIC) target = target.prototype;
	  if (target && !hasOwn$l(target, TO_STRING_TAG$3)) {
	    defineProperty$i(target, TO_STRING_TAG$3, { configurable: true, value: TAG });
	  }
	};

	var uncurryThis$14 = functionUncurryThis;
	var aCallable$e = aCallable$g;
	var NATIVE_BIND$1 = functionBindNative;

	var bind$d = uncurryThis$14(uncurryThis$14.bind);

	// optional / simple context binding
	var functionBindContext = function (fn, that) {
	  aCallable$e(fn);
	  return that === undefined ? fn : NATIVE_BIND$1 ? bind$d(fn, that) : function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var uncurryThis$13 = functionUncurryThis;
	var fails$17 = fails$1f;
	var isCallable$k = isCallable$v;
	var classof$f = classof$i;
	var getBuiltIn$g = getBuiltIn$l;
	var inspectSource$1 = inspectSource$4;

	var noop$3 = function () { /* empty */ };
	var empty = [];
	var construct$1 = getBuiltIn$g('Reflect', 'construct');
	var constructorRegExp = /^\s*(?:class|function)\b/;
	var exec$a = uncurryThis$13(constructorRegExp.exec);
	var INCORRECT_TO_STRING$2 = !constructorRegExp.exec(noop$3);

	var isConstructorModern = function isConstructor(argument) {
	  if (!isCallable$k(argument)) return false;
	  try {
	    construct$1(noop$3, empty, argument);
	    return true;
	  } catch (error) {
	    return false;
	  }
	};

	var isConstructorLegacy = function isConstructor(argument) {
	  if (!isCallable$k(argument)) return false;
	  switch (classof$f(argument)) {
	    case 'AsyncFunction':
	    case 'GeneratorFunction':
	    case 'AsyncGeneratorFunction': return false;
	  }
	  try {
	    // we can't check .prototype since constructors produced by .bind haven't it
	    // `Function#toString` throws on some built-it function in some legacy engines
	    // (for example, `DOMQuad` and similar in FF41-)
	    return INCORRECT_TO_STRING$2 || !!exec$a(constructorRegExp, inspectSource$1(argument));
	  } catch (error) {
	    return true;
	  }
	};

	isConstructorLegacy.sham = true;

	// `IsConstructor` abstract operation
	// https://tc39.es/ecma262/#sec-isconstructor
	var isConstructor$6 = !construct$1 || fails$17(function () {
	  var called;
	  return isConstructorModern(isConstructorModern.call)
	    || !isConstructorModern(Object)
	    || !isConstructorModern(function () { called = true; })
	    || called;
	}) ? isConstructorLegacy : isConstructorModern;

	var global$1g = global$1F;
	var isArray$i = isArray$j;
	var isConstructor$5 = isConstructor$6;
	var isObject$C = isObject$I;
	var wellKnownSymbol$s = wellKnownSymbol$y;

	var SPECIES$6 = wellKnownSymbol$s('species');
	var Array$8 = global$1g.Array;

	// a part of `ArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#sec-arrayspeciescreate
	var arraySpeciesConstructor$1 = function (originalArray) {
	  var C;
	  if (isArray$i(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (isConstructor$5(C) && (C === Array$8 || isArray$i(C.prototype))) C = undefined;
	    else if (isObject$C(C)) {
	      C = C[SPECIES$6];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array$8 : C;
	};

	var arraySpeciesConstructor = arraySpeciesConstructor$1;

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate$5 = function (originalArray, length) {
	  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
	};

	var bind$c = functionBindContext;
	var uncurryThis$12 = functionUncurryThis;
	var IndexedObject$3 = indexedObject;
	var toObject$o = toObject$q;
	var lengthOfArrayLike$k = lengthOfArrayLike$n;
	var arraySpeciesCreate$4 = arraySpeciesCreate$5;

	var push$c = uncurryThis$12([].push);

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
	var createMethod$5 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var IS_FILTER_REJECT = TYPE == 7;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject$o($this);
	    var self = IndexedObject$3(O);
	    var boundFunction = bind$c(callbackfn, that);
	    var length = lengthOfArrayLike$k(self);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate$4;
	    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push$c(target, value);      // filter
	        } else switch (TYPE) {
	          case 4: return false;             // every
	          case 7: push$c(target, value);      // filterReject
	        }
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.es/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$5(0),
	  // `Array.prototype.map` method
	  // https://tc39.es/ecma262/#sec-array.prototype.map
	  map: createMethod$5(1),
	  // `Array.prototype.filter` method
	  // https://tc39.es/ecma262/#sec-array.prototype.filter
	  filter: createMethod$5(2),
	  // `Array.prototype.some` method
	  // https://tc39.es/ecma262/#sec-array.prototype.some
	  some: createMethod$5(3),
	  // `Array.prototype.every` method
	  // https://tc39.es/ecma262/#sec-array.prototype.every
	  every: createMethod$5(4),
	  // `Array.prototype.find` method
	  // https://tc39.es/ecma262/#sec-array.prototype.find
	  find: createMethod$5(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$5(6),
	  // `Array.prototype.filterReject` method
	  // https://github.com/tc39/proposal-array-filtering
	  filterReject: createMethod$5(7)
	};

	var $$2B = _export;
	var global$1f = global$1F;
	var getBuiltIn$f = getBuiltIn$l;
	var apply$d = functionApply$1;
	var call$q = functionCall;
	var uncurryThis$11 = functionUncurryThis;
	var DESCRIPTORS$t = descriptors;
	var NATIVE_SYMBOL$1 = nativeSymbol;
	var fails$16 = fails$1f;
	var hasOwn$k = hasOwnProperty_1;
	var isArray$h = isArray$j;
	var isCallable$j = isCallable$v;
	var isObject$B = isObject$I;
	var isPrototypeOf$b = objectIsPrototypeOf;
	var isSymbol$8 = isSymbol$b;
	var anObject$x = anObject$C;
	var toObject$n = toObject$q;
	var toIndexedObject$9 = toIndexedObject$f;
	var toPropertyKey$4 = toPropertyKey$8;
	var $toString$3 = toString$C;
	var createPropertyDescriptor$8 = createPropertyDescriptor$c;
	var nativeObjectCreate = objectCreate$1;
	var objectKeys$3 = objectKeys$5;
	var getOwnPropertyNamesModule$1 = objectGetOwnPropertyNames;
	var getOwnPropertyNamesExternal = objectGetOwnPropertyNamesExternal;
	var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
	var getOwnPropertyDescriptorModule$5 = objectGetOwnPropertyDescriptor;
	var definePropertyModule$8 = objectDefineProperty;
	var definePropertiesModule = objectDefineProperties;
	var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
	var arraySlice$a = arraySlice$b;
	var redefine$j = redefineExports;
	var shared$1 = sharedExports;
	var sharedKey$1 = sharedKey$4;
	var hiddenKeys$1 = hiddenKeys$6;
	var uid$3 = uid$6;
	var wellKnownSymbol$r = wellKnownSymbol$y;
	var wrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
	var defineWellKnownSymbol$d = defineWellKnownSymbol$e;
	var setToStringTag$b = setToStringTag$c;
	var InternalStateModule$b = internalState;
	var $forEach$2 = arrayIteration.forEach;

	var HIDDEN = sharedKey$1('hidden');
	var SYMBOL = 'Symbol';
	var PROTOTYPE$1 = 'prototype';
	var TO_PRIMITIVE$1 = wellKnownSymbol$r('toPrimitive');

	var setInternalState$b = InternalStateModule$b.set;
	var getInternalState$a = InternalStateModule$b.getterFor(SYMBOL);

	var ObjectPrototype$4 = Object[PROTOTYPE$1];
	var $Symbol = global$1f.Symbol;
	var SymbolPrototype$1 = $Symbol && $Symbol[PROTOTYPE$1];
	var TypeError$o = global$1f.TypeError;
	var QObject = global$1f.QObject;
	var $stringify$1 = getBuiltIn$f('JSON', 'stringify');
	var nativeGetOwnPropertyDescriptor$2 = getOwnPropertyDescriptorModule$5.f;
	var nativeDefineProperty$1 = definePropertyModule$8.f;
	var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
	var nativePropertyIsEnumerable = propertyIsEnumerableModule$1.f;
	var push$b = uncurryThis$11([].push);

	var AllSymbols = shared$1('symbols');
	var ObjectPrototypeSymbols = shared$1('op-symbols');
	var StringToSymbolRegistry = shared$1('string-to-symbol-registry');
	var SymbolToStringRegistry = shared$1('symbol-to-string-registry');
	var WellKnownSymbolsStore = shared$1('wks');

	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDescriptor = DESCRIPTORS$t && fails$16(function () {
	  return nativeObjectCreate(nativeDefineProperty$1({}, 'a', {
	    get: function () { return nativeDefineProperty$1(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (O, P, Attributes) {
	  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$2(ObjectPrototype$4, P);
	  if (ObjectPrototypeDescriptor) delete ObjectPrototype$4[P];
	  nativeDefineProperty$1(O, P, Attributes);
	  if (ObjectPrototypeDescriptor && O !== ObjectPrototype$4) {
	    nativeDefineProperty$1(ObjectPrototype$4, P, ObjectPrototypeDescriptor);
	  }
	} : nativeDefineProperty$1;

	var wrap$1 = function (tag, description) {
	  var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype$1);
	  setInternalState$b(symbol, {
	    type: SYMBOL,
	    tag: tag,
	    description: description
	  });
	  if (!DESCRIPTORS$t) symbol.description = description;
	  return symbol;
	};

	var $defineProperty = function defineProperty(O, P, Attributes) {
	  if (O === ObjectPrototype$4) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
	  anObject$x(O);
	  var key = toPropertyKey$4(P);
	  anObject$x(Attributes);
	  if (hasOwn$k(AllSymbols, key)) {
	    if (!Attributes.enumerable) {
	      if (!hasOwn$k(O, HIDDEN)) nativeDefineProperty$1(O, HIDDEN, createPropertyDescriptor$8(1, {}));
	      O[HIDDEN][key] = true;
	    } else {
	      if (hasOwn$k(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
	      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor$8(0, false) });
	    } return setSymbolDescriptor(O, key, Attributes);
	  } return nativeDefineProperty$1(O, key, Attributes);
	};

	var $defineProperties = function defineProperties(O, Properties) {
	  anObject$x(O);
	  var properties = toIndexedObject$9(Properties);
	  var keys = objectKeys$3(properties).concat($getOwnPropertySymbols(properties));
	  $forEach$2(keys, function (key) {
	    if (!DESCRIPTORS$t || call$q($propertyIsEnumerable$1, properties, key)) $defineProperty(O, key, properties[key]);
	  });
	  return O;
	};

	var $create = function create(O, Properties) {
	  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
	};

	var $propertyIsEnumerable$1 = function propertyIsEnumerable(V) {
	  var P = toPropertyKey$4(V);
	  var enumerable = call$q(nativePropertyIsEnumerable, this, P);
	  if (this === ObjectPrototype$4 && hasOwn$k(AllSymbols, P) && !hasOwn$k(ObjectPrototypeSymbols, P)) return false;
	  return enumerable || !hasOwn$k(this, P) || !hasOwn$k(AllSymbols, P) || hasOwn$k(this, HIDDEN) && this[HIDDEN][P]
	    ? enumerable : true;
	};

	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
	  var it = toIndexedObject$9(O);
	  var key = toPropertyKey$4(P);
	  if (it === ObjectPrototype$4 && hasOwn$k(AllSymbols, key) && !hasOwn$k(ObjectPrototypeSymbols, key)) return;
	  var descriptor = nativeGetOwnPropertyDescriptor$2(it, key);
	  if (descriptor && hasOwn$k(AllSymbols, key) && !(hasOwn$k(it, HIDDEN) && it[HIDDEN][key])) {
	    descriptor.enumerable = true;
	  }
	  return descriptor;
	};

	var $getOwnPropertyNames = function getOwnPropertyNames(O) {
	  var names = nativeGetOwnPropertyNames(toIndexedObject$9(O));
	  var result = [];
	  $forEach$2(names, function (key) {
	    if (!hasOwn$k(AllSymbols, key) && !hasOwn$k(hiddenKeys$1, key)) push$b(result, key);
	  });
	  return result;
	};

	var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
	  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$4;
	  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject$9(O));
	  var result = [];
	  $forEach$2(names, function (key) {
	    if (hasOwn$k(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn$k(ObjectPrototype$4, key))) {
	      push$b(result, AllSymbols[key]);
	    }
	  });
	  return result;
	};

	// `Symbol` constructor
	// https://tc39.es/ecma262/#sec-symbol-constructor
	if (!NATIVE_SYMBOL$1) {
	  $Symbol = function Symbol() {
	    if (isPrototypeOf$b(SymbolPrototype$1, this)) throw TypeError$o('Symbol is not a constructor');
	    var description = !arguments.length || arguments[0] === undefined ? undefined : $toString$3(arguments[0]);
	    var tag = uid$3(description);
	    var setter = function (value) {
	      if (this === ObjectPrototype$4) call$q(setter, ObjectPrototypeSymbols, value);
	      if (hasOwn$k(this, HIDDEN) && hasOwn$k(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDescriptor(this, tag, createPropertyDescriptor$8(1, value));
	    };
	    if (DESCRIPTORS$t && USE_SETTER) setSymbolDescriptor(ObjectPrototype$4, tag, { configurable: true, set: setter });
	    return wrap$1(tag, description);
	  };

	  SymbolPrototype$1 = $Symbol[PROTOTYPE$1];

	  redefine$j(SymbolPrototype$1, 'toString', function toString() {
	    return getInternalState$a(this).tag;
	  });

	  redefine$j($Symbol, 'withoutSetter', function (description) {
	    return wrap$1(uid$3(description), description);
	  });

	  propertyIsEnumerableModule$1.f = $propertyIsEnumerable$1;
	  definePropertyModule$8.f = $defineProperty;
	  definePropertiesModule.f = $defineProperties;
	  getOwnPropertyDescriptorModule$5.f = $getOwnPropertyDescriptor;
	  getOwnPropertyNamesModule$1.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
	  getOwnPropertySymbolsModule$1.f = $getOwnPropertySymbols;

	  wrappedWellKnownSymbolModule.f = function (name) {
	    return wrap$1(wellKnownSymbol$r(name), name);
	  };

	  if (DESCRIPTORS$t) {
	    // https://github.com/tc39/proposal-Symbol-description
	    nativeDefineProperty$1(SymbolPrototype$1, 'description', {
	      configurable: true,
	      get: function description() {
	        return getInternalState$a(this).description;
	      }
	    });
	    {
	      redefine$j(ObjectPrototype$4, 'propertyIsEnumerable', $propertyIsEnumerable$1, { unsafe: true });
	    }
	  }
	}

	$$2B({ global: true, wrap: true, forced: !NATIVE_SYMBOL$1, sham: !NATIVE_SYMBOL$1 }, {
	  Symbol: $Symbol
	});

	$forEach$2(objectKeys$3(WellKnownSymbolsStore), function (name) {
	  defineWellKnownSymbol$d(name);
	});

	$$2B({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL$1 }, {
	  // `Symbol.for` method
	  // https://tc39.es/ecma262/#sec-symbol.for
	  'for': function (key) {
	    var string = $toString$3(key);
	    if (hasOwn$k(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
	    var symbol = $Symbol(string);
	    StringToSymbolRegistry[string] = symbol;
	    SymbolToStringRegistry[symbol] = string;
	    return symbol;
	  },
	  // `Symbol.keyFor` method
	  // https://tc39.es/ecma262/#sec-symbol.keyfor
	  keyFor: function keyFor(sym) {
	    if (!isSymbol$8(sym)) throw TypeError$o(sym + ' is not a symbol');
	    if (hasOwn$k(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
	  },
	  useSetter: function () { USE_SETTER = true; },
	  useSimple: function () { USE_SETTER = false; }
	});

	$$2B({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL$1, sham: !DESCRIPTORS$t }, {
	  // `Object.create` method
	  // https://tc39.es/ecma262/#sec-object.create
	  create: $create,
	  // `Object.defineProperty` method
	  // https://tc39.es/ecma262/#sec-object.defineproperty
	  defineProperty: $defineProperty,
	  // `Object.defineProperties` method
	  // https://tc39.es/ecma262/#sec-object.defineproperties
	  defineProperties: $defineProperties,
	  // `Object.getOwnPropertyDescriptor` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
	});

	$$2B({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL$1 }, {
	  // `Object.getOwnPropertyNames` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertynames
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // `Object.getOwnPropertySymbols` method
	  // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	$$2B({ target: 'Object', stat: true, forced: fails$16(function () { getOwnPropertySymbolsModule$1.f(1); }) }, {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return getOwnPropertySymbolsModule$1.f(toObject$n(it));
	  }
	});

	// `JSON.stringify` method behavior with symbols
	// https://tc39.es/ecma262/#sec-json.stringify
	if ($stringify$1) {
	  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL$1 || fails$16(function () {
	    var symbol = $Symbol();
	    // MS Edge converts symbol values to JSON as {}
	    return $stringify$1([symbol]) != '[null]'
	      // WebKit converts symbol values to JSON as null
	      || $stringify$1({ a: symbol }) != '{}'
	      // V8 throws on boxed symbols
	      || $stringify$1(Object(symbol)) != '{}';
	  });

	  $$2B({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
	    // eslint-disable-next-line no-unused-vars -- required for `.length`
	    stringify: function stringify(it, replacer, space) {
	      var args = arraySlice$a(arguments);
	      var $replacer = replacer;
	      if (!isObject$B(replacer) && it === undefined || isSymbol$8(it)) return; // IE8 returns string on undefined
	      if (!isArray$h(replacer)) replacer = function (key, value) {
	        if (isCallable$j($replacer)) value = call$q($replacer, this, key, value);
	        if (!isSymbol$8(value)) return value;
	      };
	      args[1] = replacer;
	      return apply$d($stringify$1, null, args);
	    }
	  });
	}

	// `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
	if (!SymbolPrototype$1[TO_PRIMITIVE$1]) {
	  var valueOf$2 = SymbolPrototype$1.valueOf;
	  // eslint-disable-next-line no-unused-vars -- required for .length
	  redefine$j(SymbolPrototype$1, TO_PRIMITIVE$1, function (hint) {
	    // TODO: improve hint logic
	    return call$q(valueOf$2, this);
	  });
	}
	// `Symbol.prototype[@@toStringTag]` property
	// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
	setToStringTag$b($Symbol, SYMBOL);

	hiddenKeys$1[HIDDEN] = true;

	var $$2A = _export;
	var DESCRIPTORS$s = descriptors;
	var global$1e = global$1F;
	var uncurryThis$10 = functionUncurryThis;
	var hasOwn$j = hasOwnProperty_1;
	var isCallable$i = isCallable$v;
	var isPrototypeOf$a = objectIsPrototypeOf;
	var toString$B = toString$C;
	var defineProperty$h = objectDefineProperty.f;
	var copyConstructorProperties$2 = copyConstructorProperties$4;

	var NativeSymbol = global$1e.Symbol;
	var SymbolPrototype = NativeSymbol && NativeSymbol.prototype;

	if (DESCRIPTORS$s && isCallable$i(NativeSymbol) && (!('description' in SymbolPrototype) ||
	  // Safari 12 bug
	  NativeSymbol().description !== undefined
	)) {
	  var EmptyStringDescriptionStore = {};
	  // wrap Symbol constructor for correct work with undefined description
	  var SymbolWrapper = function Symbol() {
	    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : toString$B(arguments[0]);
	    var result = isPrototypeOf$a(SymbolPrototype, this)
	      ? new NativeSymbol(description)
	      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
	      : description === undefined ? NativeSymbol() : NativeSymbol(description);
	    if (description === '') EmptyStringDescriptionStore[result] = true;
	    return result;
	  };

	  copyConstructorProperties$2(SymbolWrapper, NativeSymbol);
	  SymbolWrapper.prototype = SymbolPrototype;
	  SymbolPrototype.constructor = SymbolWrapper;

	  var NATIVE_SYMBOL = String(NativeSymbol('test')) == 'Symbol(test)';
	  var symbolToString$1 = uncurryThis$10(SymbolPrototype.toString);
	  var symbolValueOf$2 = uncurryThis$10(SymbolPrototype.valueOf);
	  var regexp = /^Symbol\((.*)\)[^)]+$/;
	  var replace$b = uncurryThis$10(''.replace);
	  var stringSlice$f = uncurryThis$10(''.slice);

	  defineProperty$h(SymbolPrototype, 'description', {
	    configurable: true,
	    get: function description() {
	      var symbol = symbolValueOf$2(this);
	      var string = symbolToString$1(symbol);
	      if (hasOwn$j(EmptyStringDescriptionStore, symbol)) return '';
	      var desc = NATIVE_SYMBOL ? stringSlice$f(string, 7, -1) : replace$b(string, regexp, '$1');
	      return desc === '' ? undefined : desc;
	    }
	  });

	  $$2A({ global: true, forced: true }, {
	    Symbol: SymbolWrapper
	  });
	}

	var defineWellKnownSymbol$c = defineWellKnownSymbol$e;

	// `Symbol.asyncIterator` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.asynciterator
	defineWellKnownSymbol$c('asyncIterator');

	var defineWellKnownSymbol$b = defineWellKnownSymbol$e;

	// `Symbol.hasInstance` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.hasinstance
	defineWellKnownSymbol$b('hasInstance');

	var defineWellKnownSymbol$a = defineWellKnownSymbol$e;

	// `Symbol.isConcatSpreadable` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.isconcatspreadable
	defineWellKnownSymbol$a('isConcatSpreadable');

	var defineWellKnownSymbol$9 = defineWellKnownSymbol$e;

	// `Symbol.iterator` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.iterator
	defineWellKnownSymbol$9('iterator');

	var defineWellKnownSymbol$8 = defineWellKnownSymbol$e;

	// `Symbol.match` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.match
	defineWellKnownSymbol$8('match');

	var defineWellKnownSymbol$7 = defineWellKnownSymbol$e;

	// `Symbol.matchAll` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.matchall
	defineWellKnownSymbol$7('matchAll');

	var defineWellKnownSymbol$6 = defineWellKnownSymbol$e;

	// `Symbol.replace` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.replace
	defineWellKnownSymbol$6('replace');

	var defineWellKnownSymbol$5 = defineWellKnownSymbol$e;

	// `Symbol.search` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.search
	defineWellKnownSymbol$5('search');

	var defineWellKnownSymbol$4 = defineWellKnownSymbol$e;

	// `Symbol.species` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.species
	defineWellKnownSymbol$4('species');

	var defineWellKnownSymbol$3 = defineWellKnownSymbol$e;

	// `Symbol.split` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.split
	defineWellKnownSymbol$3('split');

	var defineWellKnownSymbol$2 = defineWellKnownSymbol$e;

	// `Symbol.toPrimitive` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.toprimitive
	defineWellKnownSymbol$2('toPrimitive');

	var defineWellKnownSymbol$1 = defineWellKnownSymbol$e;

	// `Symbol.toStringTag` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.tostringtag
	defineWellKnownSymbol$1('toStringTag');

	var defineWellKnownSymbol = defineWellKnownSymbol$e;

	// `Symbol.unscopables` well-known symbol
	// https://tc39.es/ecma262/#sec-symbol.unscopables
	defineWellKnownSymbol('unscopables');

	var global$1d = global$1F;
	var isCallable$h = isCallable$v;

	var String$4 = global$1d.String;
	var TypeError$n = global$1d.TypeError;

	var aPossiblePrototype$2 = function (argument) {
	  if (typeof argument == 'object' || isCallable$h(argument)) return argument;
	  throw TypeError$n("Can't set " + String$4(argument) + ' as a prototype');
	};

	/* eslint-disable no-proto -- safe */

	var uncurryThis$$ = functionUncurryThis;
	var anObject$w = anObject$C;
	var aPossiblePrototype$1 = aPossiblePrototype$2;

	// `Object.setPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	// eslint-disable-next-line es/no-object-setprototypeof -- safe
	var objectSetPrototypeOf$1 = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	    setter = uncurryThis$$(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
	    setter(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject$w(O);
	    aPossiblePrototype$1(proto);
	    if (CORRECT_SETTER) setter(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var isCallable$g = isCallable$v;
	var isObject$A = isObject$I;
	var setPrototypeOf$8 = objectSetPrototypeOf$1;

	// makes subclassing work correct for wrapped built-ins
	var inheritIfRequired$6 = function ($this, dummy, Wrapper) {
	  var NewTarget, NewTargetPrototype;
	  if (
	    // it can work only with native `setPrototypeOf`
	    setPrototypeOf$8 &&
	    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
	    isCallable$g(NewTarget = dummy.constructor) &&
	    NewTarget !== Wrapper &&
	    isObject$A(NewTargetPrototype = NewTarget.prototype) &&
	    NewTargetPrototype !== Wrapper.prototype
	  ) setPrototypeOf$8($this, NewTargetPrototype);
	  return $this;
	};

	var toString$A = toString$C;

	var normalizeStringArgument$5 = function (argument, $default) {
	  return argument === undefined ? arguments.length < 2 ? '' : $default : toString$A(argument);
	};

	var isObject$z = isObject$I;
	var createNonEnumerableProperty$b = createNonEnumerableProperty$f;

	// `InstallErrorCause` abstract operation
	// https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause
	var installErrorCause$2 = function (O, options) {
	  if (isObject$z(options) && 'cause' in options) {
	    createNonEnumerableProperty$b(O, 'cause', options.cause);
	  }
	};

	var uncurryThis$_ = functionUncurryThis;

	var replace$a = uncurryThis$_(''.replace);

	var TEST = (function (arg) { return String(Error(arg).stack); })('zxcasd');
	var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
	var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);

	var clearErrorStack$4 = function (stack, dropEntries) {
	  if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string') {
	    while (dropEntries--) stack = replace$a(stack, V8_OR_CHAKRA_STACK_ENTRY, '');
	  } return stack;
	};

	var fails$15 = fails$1f;
	var createPropertyDescriptor$7 = createPropertyDescriptor$c;

	var errorStackInstallable = !fails$15(function () {
	  var error = Error('a');
	  if (!('stack' in error)) return true;
	  // eslint-disable-next-line es/no-object-defineproperty -- safe
	  Object.defineProperty(error, 'stack', createPropertyDescriptor$7(1, 7));
	  return error.stack !== 7;
	});

	var getBuiltIn$e = getBuiltIn$l;
	var hasOwn$i = hasOwnProperty_1;
	var createNonEnumerableProperty$a = createNonEnumerableProperty$f;
	var isPrototypeOf$9 = objectIsPrototypeOf;
	var setPrototypeOf$7 = objectSetPrototypeOf$1;
	var copyConstructorProperties$1 = copyConstructorProperties$4;
	var inheritIfRequired$5 = inheritIfRequired$6;
	var normalizeStringArgument$4 = normalizeStringArgument$5;
	var installErrorCause$1 = installErrorCause$2;
	var clearErrorStack$3 = clearErrorStack$4;
	var ERROR_STACK_INSTALLABLE$2 = errorStackInstallable;

	var wrapErrorConstructorWithCause$2 = function (FULL_NAME, wrapper, FORCED, IS_AGGREGATE_ERROR) {
	  var OPTIONS_POSITION = IS_AGGREGATE_ERROR ? 2 : 1;
	  var path = FULL_NAME.split('.');
	  var ERROR_NAME = path[path.length - 1];
	  var OriginalError = getBuiltIn$e.apply(null, path);

	  if (!OriginalError) return;

	  var OriginalErrorPrototype = OriginalError.prototype;

	  // V8 9.3- bug https://bugs.chromium.org/p/v8/issues/detail?id=12006
	  if (hasOwn$i(OriginalErrorPrototype, 'cause')) delete OriginalErrorPrototype.cause;

	  if (!FORCED) return OriginalError;

	  var BaseError = getBuiltIn$e('Error');

	  var WrappedError = wrapper(function (a, b) {
	    var message = normalizeStringArgument$4(IS_AGGREGATE_ERROR ? b : a, undefined);
	    var result = IS_AGGREGATE_ERROR ? new OriginalError(a) : new OriginalError();
	    if (message !== undefined) createNonEnumerableProperty$a(result, 'message', message);
	    if (ERROR_STACK_INSTALLABLE$2) createNonEnumerableProperty$a(result, 'stack', clearErrorStack$3(result.stack, 2));
	    if (this && isPrototypeOf$9(OriginalErrorPrototype, this)) inheritIfRequired$5(result, this, WrappedError);
	    if (arguments.length > OPTIONS_POSITION) installErrorCause$1(result, arguments[OPTIONS_POSITION]);
	    return result;
	  });

	  WrappedError.prototype = OriginalErrorPrototype;

	  if (ERROR_NAME !== 'Error') {
	    if (setPrototypeOf$7) setPrototypeOf$7(WrappedError, BaseError);
	    else copyConstructorProperties$1(WrappedError, BaseError, { name: true });
	  }

	  copyConstructorProperties$1(WrappedError, OriginalError);

	  try {
	    // Safari 13- bug: WebAssembly errors does not have a proper `.name`
	    if (OriginalErrorPrototype.name !== ERROR_NAME) {
	      createNonEnumerableProperty$a(OriginalErrorPrototype, 'name', ERROR_NAME);
	    }
	    OriginalErrorPrototype.constructor = WrappedError;
	  } catch (error) { /* empty */ }

	  return WrappedError;
	};

	/* eslint-disable no-unused-vars -- required for functions `.length` */

	var $$2z = _export;
	var global$1c = global$1F;
	var apply$c = functionApply$1;
	var wrapErrorConstructorWithCause$1 = wrapErrorConstructorWithCause$2;

	var WEB_ASSEMBLY = 'WebAssembly';
	var WebAssembly$1 = global$1c[WEB_ASSEMBLY];

	var FORCED$u = Error('e', { cause: 7 }).cause !== 7;

	var exportGlobalErrorCauseWrapper = function (ERROR_NAME, wrapper) {
	  var O = {};
	  O[ERROR_NAME] = wrapErrorConstructorWithCause$1(ERROR_NAME, wrapper, FORCED$u);
	  $$2z({ global: true, forced: FORCED$u }, O);
	};

	var exportWebAssemblyErrorCauseWrapper = function (ERROR_NAME, wrapper) {
	  if (WebAssembly$1 && WebAssembly$1[ERROR_NAME]) {
	    var O = {};
	    O[ERROR_NAME] = wrapErrorConstructorWithCause$1(WEB_ASSEMBLY + '.' + ERROR_NAME, wrapper, FORCED$u);
	    $$2z({ target: WEB_ASSEMBLY, stat: true, forced: FORCED$u }, O);
	  }
	};

	// https://github.com/tc39/proposal-error-cause
	exportGlobalErrorCauseWrapper('Error', function (init) {
	  return function Error(message) { return apply$c(init, this, arguments); };
	});
	exportGlobalErrorCauseWrapper('EvalError', function (init) {
	  return function EvalError(message) { return apply$c(init, this, arguments); };
	});
	exportGlobalErrorCauseWrapper('RangeError', function (init) {
	  return function RangeError(message) { return apply$c(init, this, arguments); };
	});
	exportGlobalErrorCauseWrapper('ReferenceError', function (init) {
	  return function ReferenceError(message) { return apply$c(init, this, arguments); };
	});
	exportGlobalErrorCauseWrapper('SyntaxError', function (init) {
	  return function SyntaxError(message) { return apply$c(init, this, arguments); };
	});
	exportGlobalErrorCauseWrapper('TypeError', function (init) {
	  return function TypeError(message) { return apply$c(init, this, arguments); };
	});
	exportGlobalErrorCauseWrapper('URIError', function (init) {
	  return function URIError(message) { return apply$c(init, this, arguments); };
	});
	exportWebAssemblyErrorCauseWrapper('CompileError', function (init) {
	  return function CompileError(message) { return apply$c(init, this, arguments); };
	});
	exportWebAssemblyErrorCauseWrapper('LinkError', function (init) {
	  return function LinkError(message) { return apply$c(init, this, arguments); };
	});
	exportWebAssemblyErrorCauseWrapper('RuntimeError', function (init) {
	  return function RuntimeError(message) { return apply$c(init, this, arguments); };
	});

	var DESCRIPTORS$r = descriptors;
	var fails$14 = fails$1f;
	var anObject$v = anObject$C;
	var create$a = objectCreate$1;
	var normalizeStringArgument$3 = normalizeStringArgument$5;

	var nativeErrorToString = Error.prototype.toString;

	var INCORRECT_TO_STRING$1 = fails$14(function () {
	  if (DESCRIPTORS$r) {
	    // Chrome 32- incorrectly call accessor
	    // eslint-disable-next-line es/no-object-defineproperty -- safe
	    var object = create$a(Object.defineProperty({}, 'name', { get: function () {
	      return this === object;
	    } }));
	    if (nativeErrorToString.call(object) !== 'true') return true;
	  }
	  // FF10- does not properly handle non-strings
	  return nativeErrorToString.call({ message: 1, name: 2 }) !== '2: 1'
	    // IE8 does not properly handle defaults
	    || nativeErrorToString.call({}) !== 'Error';
	});

	var errorToString$2 = INCORRECT_TO_STRING$1 ? function toString() {
	  var O = anObject$v(this);
	  var name = normalizeStringArgument$3(O.name, 'Error');
	  var message = normalizeStringArgument$3(O.message);
	  return !name ? message : !message ? name : name + ': ' + message;
	} : nativeErrorToString;

	var redefine$i = redefineExports;
	var errorToString$1 = errorToString$2;

	var ErrorPrototype$1 = Error.prototype;

	// `Error.prototype.toString` method fix
	// https://tc39.es/ecma262/#sec-error.prototype.tostring
	if (ErrorPrototype$1.toString !== errorToString$1) {
	  redefine$i(ErrorPrototype$1, 'toString', errorToString$1);
	}

	var fails$13 = fails$1f;

	var correctPrototypeGetter = !fails$13(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var global$1b = global$1F;
	var hasOwn$h = hasOwnProperty_1;
	var isCallable$f = isCallable$v;
	var toObject$m = toObject$q;
	var sharedKey = sharedKey$4;
	var CORRECT_PROTOTYPE_GETTER$2 = correctPrototypeGetter;

	var IE_PROTO = sharedKey('IE_PROTO');
	var Object$2 = global$1b.Object;
	var ObjectPrototype$3 = Object$2.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf$1 = CORRECT_PROTOTYPE_GETTER$2 ? Object$2.getPrototypeOf : function (O) {
	  var object = toObject$m(O);
	  if (hasOwn$h(object, IE_PROTO)) return object[IE_PROTO];
	  var constructor = object.constructor;
	  if (isCallable$f(constructor) && object instanceof constructor) {
	    return constructor.prototype;
	  } return object instanceof Object$2 ? ObjectPrototype$3 : null;
	};

	var iterators = {};

	var wellKnownSymbol$q = wellKnownSymbol$y;
	var Iterators$4 = iterators;

	var ITERATOR$a = wellKnownSymbol$q('iterator');
	var ArrayPrototype$1 = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod$3 = function (it) {
	  return it !== undefined && (Iterators$4.Array === it || ArrayPrototype$1[ITERATOR$a] === it);
	};

	var classof$e = classof$i;
	var getMethod$7 = getMethod$9;
	var Iterators$3 = iterators;
	var wellKnownSymbol$p = wellKnownSymbol$y;

	var ITERATOR$9 = wellKnownSymbol$p('iterator');

	var getIteratorMethod$5 = function (it) {
	  if (it != undefined) return getMethod$7(it, ITERATOR$9)
	    || getMethod$7(it, '@@iterator')
	    || Iterators$3[classof$e(it)];
	};

	var global$1a = global$1F;
	var call$p = functionCall;
	var aCallable$d = aCallable$g;
	var anObject$u = anObject$C;
	var tryToString$3 = tryToString$5;
	var getIteratorMethod$4 = getIteratorMethod$5;

	var TypeError$m = global$1a.TypeError;

	var getIterator$4 = function (argument, usingIterator) {
	  var iteratorMethod = arguments.length < 2 ? getIteratorMethod$4(argument) : usingIterator;
	  if (aCallable$d(iteratorMethod)) return anObject$u(call$p(iteratorMethod, argument));
	  throw TypeError$m(tryToString$3(argument) + ' is not iterable');
	};

	var call$o = functionCall;
	var anObject$t = anObject$C;
	var getMethod$6 = getMethod$9;

	var iteratorClose$2 = function (iterator, kind, value) {
	  var innerResult, innerError;
	  anObject$t(iterator);
	  try {
	    innerResult = getMethod$6(iterator, 'return');
	    if (!innerResult) {
	      if (kind === 'throw') throw value;
	      return value;
	    }
	    innerResult = call$o(innerResult, iterator);
	  } catch (error) {
	    innerError = true;
	    innerResult = error;
	  }
	  if (kind === 'throw') throw value;
	  if (innerError) throw innerResult;
	  anObject$t(innerResult);
	  return value;
	};

	var global$19 = global$1F;
	var bind$b = functionBindContext;
	var call$n = functionCall;
	var anObject$s = anObject$C;
	var tryToString$2 = tryToString$5;
	var isArrayIteratorMethod$2 = isArrayIteratorMethod$3;
	var lengthOfArrayLike$j = lengthOfArrayLike$n;
	var isPrototypeOf$8 = objectIsPrototypeOf;
	var getIterator$3 = getIterator$4;
	var getIteratorMethod$3 = getIteratorMethod$5;
	var iteratorClose$1 = iteratorClose$2;

	var TypeError$l = global$19.TypeError;

	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var ResultPrototype = Result.prototype;

	var iterate$9 = function (iterable, unboundFunction, options) {
	  var that = options && options.that;
	  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
	  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
	  var INTERRUPTED = !!(options && options.INTERRUPTED);
	  var fn = bind$b(unboundFunction, that);
	  var iterator, iterFn, index, length, result, next, step;

	  var stop = function (condition) {
	    if (iterator) iteratorClose$1(iterator, 'normal', condition);
	    return new Result(true, condition);
	  };

	  var callFn = function (value) {
	    if (AS_ENTRIES) {
	      anObject$s(value);
	      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
	    } return INTERRUPTED ? fn(value, stop) : fn(value);
	  };

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod$3(iterable);
	    if (!iterFn) throw TypeError$l(tryToString$2(iterable) + ' is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod$2(iterFn)) {
	      for (index = 0, length = lengthOfArrayLike$j(iterable); length > index; index++) {
	        result = callFn(iterable[index]);
	        if (result && isPrototypeOf$8(ResultPrototype, result)) return result;
	      } return new Result(false);
	    }
	    iterator = getIterator$3(iterable, iterFn);
	  }

	  next = iterator.next;
	  while (!(step = call$n(next, iterator)).done) {
	    try {
	      result = callFn(step.value);
	    } catch (error) {
	      iteratorClose$1(iterator, 'throw', error);
	    }
	    if (typeof result == 'object' && result && isPrototypeOf$8(ResultPrototype, result)) return result;
	  } return new Result(false);
	};

	var $$2y = _export;
	var global$18 = global$1F;
	var isPrototypeOf$7 = objectIsPrototypeOf;
	var getPrototypeOf$9 = objectGetPrototypeOf$1;
	var setPrototypeOf$6 = objectSetPrototypeOf$1;
	var copyConstructorProperties = copyConstructorProperties$4;
	var create$9 = objectCreate$1;
	var createNonEnumerableProperty$9 = createNonEnumerableProperty$f;
	var createPropertyDescriptor$6 = createPropertyDescriptor$c;
	var clearErrorStack$2 = clearErrorStack$4;
	var installErrorCause = installErrorCause$2;
	var iterate$8 = iterate$9;
	var normalizeStringArgument$2 = normalizeStringArgument$5;
	var wellKnownSymbol$o = wellKnownSymbol$y;
	var ERROR_STACK_INSTALLABLE$1 = errorStackInstallable;

	var TO_STRING_TAG$2 = wellKnownSymbol$o('toStringTag');
	var Error$5 = global$18.Error;
	var push$a = [].push;

	var $AggregateError$1 = function AggregateError(errors, message /* , options */) {
	  var options = arguments.length > 2 ? arguments[2] : undefined;
	  var isInstance = isPrototypeOf$7(AggregateErrorPrototype, this);
	  var that;
	  if (setPrototypeOf$6) {
	    that = setPrototypeOf$6(new Error$5(), isInstance ? getPrototypeOf$9(this) : AggregateErrorPrototype);
	  } else {
	    that = isInstance ? this : create$9(AggregateErrorPrototype);
	    createNonEnumerableProperty$9(that, TO_STRING_TAG$2, 'Error');
	  }
	  if (message !== undefined) createNonEnumerableProperty$9(that, 'message', normalizeStringArgument$2(message));
	  if (ERROR_STACK_INSTALLABLE$1) createNonEnumerableProperty$9(that, 'stack', clearErrorStack$2(that.stack, 1));
	  installErrorCause(that, options);
	  var errorsArray = [];
	  iterate$8(errors, push$a, { that: errorsArray });
	  createNonEnumerableProperty$9(that, 'errors', errorsArray);
	  return that;
	};

	if (setPrototypeOf$6) setPrototypeOf$6($AggregateError$1, Error$5);
	else copyConstructorProperties($AggregateError$1, Error$5, { name: true });

	var AggregateErrorPrototype = $AggregateError$1.prototype = create$9(Error$5.prototype, {
	  constructor: createPropertyDescriptor$6(1, $AggregateError$1),
	  message: createPropertyDescriptor$6(1, ''),
	  name: createPropertyDescriptor$6(1, 'AggregateError')
	});

	// `AggregateError` constructor
	// https://tc39.es/ecma262/#sec-aggregate-error-constructor
	$$2y({ global: true }, {
	  AggregateError: $AggregateError$1
	});

	var $$2x = _export;
	var getBuiltIn$d = getBuiltIn$l;
	var apply$b = functionApply$1;
	var fails$12 = fails$1f;
	var wrapErrorConstructorWithCause = wrapErrorConstructorWithCause$2;

	var AGGREGATE_ERROR = 'AggregateError';
	var $AggregateError = getBuiltIn$d(AGGREGATE_ERROR);
	var FORCED$t = !fails$12(function () {
	  return $AggregateError([1]).errors[0] !== 1;
	}) && fails$12(function () {
	  return $AggregateError([1], AGGREGATE_ERROR, { cause: 7 }).cause !== 7;
	});

	// https://github.com/tc39/proposal-error-cause
	$$2x({ global: true, forced: FORCED$t }, {
	  AggregateError: wrapErrorConstructorWithCause(AGGREGATE_ERROR, function (init) {
	    // eslint-disable-next-line no-unused-vars -- required for functions `.length`
	    return function AggregateError(errors, message) { return apply$b(init, this, arguments); };
	  }, FORCED$t, true)
	});

	var wellKnownSymbol$n = wellKnownSymbol$y;
	var create$8 = objectCreate$1;
	var definePropertyModule$7 = objectDefineProperty;

	var UNSCOPABLES = wellKnownSymbol$n('unscopables');
	var ArrayPrototype = Array.prototype;

	// Array.prototype[@@unscopables]
	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	if (ArrayPrototype[UNSCOPABLES] == undefined) {
	  definePropertyModule$7.f(ArrayPrototype, UNSCOPABLES, {
	    configurable: true,
	    value: create$8(null)
	  });
	}

	// add a key to Array.prototype[@@unscopables]
	var addToUnscopables$9 = function (key) {
	  ArrayPrototype[UNSCOPABLES][key] = true;
	};

	var $$2w = _export;
	var toObject$l = toObject$q;
	var lengthOfArrayLike$i = lengthOfArrayLike$n;
	var toIntegerOrInfinity$f = toIntegerOrInfinity$i;
	var addToUnscopables$8 = addToUnscopables$9;

	// `Array.prototype.at` method
	// https://github.com/tc39/proposal-relative-indexing-method
	$$2w({ target: 'Array', proto: true }, {
	  at: function at(index) {
	    var O = toObject$l(this);
	    var len = lengthOfArrayLike$i(O);
	    var relativeIndex = toIntegerOrInfinity$f(index);
	    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
	    return (k < 0 || k >= len) ? undefined : O[k];
	  }
	});

	addToUnscopables$8('at');

	var fails$11 = fails$1f;
	var wellKnownSymbol$m = wellKnownSymbol$y;
	var V8_VERSION$2 = engineV8Version;

	var SPECIES$5 = wellKnownSymbol$m('species');

	var arrayMethodHasSpeciesSupport$5 = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return V8_VERSION$2 >= 51 || !fails$11(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$5] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var $$2v = _export;
	var global$17 = global$1F;
	var fails$10 = fails$1f;
	var isArray$g = isArray$j;
	var isObject$y = isObject$I;
	var toObject$k = toObject$q;
	var lengthOfArrayLike$h = lengthOfArrayLike$n;
	var createProperty$7 = createProperty$9;
	var arraySpeciesCreate$3 = arraySpeciesCreate$5;
	var arrayMethodHasSpeciesSupport$4 = arrayMethodHasSpeciesSupport$5;
	var wellKnownSymbol$l = wellKnownSymbol$y;
	var V8_VERSION$1 = engineV8Version;

	var IS_CONCAT_SPREADABLE = wellKnownSymbol$l('isConcatSpreadable');
	var MAX_SAFE_INTEGER$3 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';
	var TypeError$k = global$17.TypeError;

	// We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679
	var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION$1 >= 51 || !fails$10(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport$4('concat');

	var isConcatSpreadable = function (O) {
	  if (!isObject$y(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray$g(O);
	};

	var FORCED$s = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

	// `Array.prototype.concat` method
	// https://tc39.es/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	$$2v({ target: 'Array', proto: true, forced: FORCED$s }, {
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  concat: function concat(arg) {
	    var O = toObject$k(this);
	    var A = arraySpeciesCreate$3(O, 0);
	    var n = 0;
	    var i, k, length, len, E;
	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];
	      if (isConcatSpreadable(E)) {
	        len = lengthOfArrayLike$h(E);
	        if (n + len > MAX_SAFE_INTEGER$3) throw TypeError$k(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        for (k = 0; k < len; k++, n++) if (k in E) createProperty$7(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER$3) throw TypeError$k(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty$7(A, n++, E);
	      }
	    }
	    A.length = n;
	    return A;
	  }
	});

	var toObject$j = toObject$q;
	var toAbsoluteIndex$6 = toAbsoluteIndex$9;
	var lengthOfArrayLike$g = lengthOfArrayLike$n;

	var min$8 = Math.min;

	// `Array.prototype.copyWithin` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.copywithin
	// eslint-disable-next-line es/no-array-prototype-copywithin -- safe
	var arrayCopyWithin = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
	  var O = toObject$j(this);
	  var len = lengthOfArrayLike$g(O);
	  var to = toAbsoluteIndex$6(target, len);
	  var from = toAbsoluteIndex$6(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = min$8((end === undefined ? len : toAbsoluteIndex$6(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];
	    else delete O[to];
	    to += inc;
	    from += inc;
	  } return O;
	};

	var $$2u = _export;
	var copyWithin = arrayCopyWithin;
	var addToUnscopables$7 = addToUnscopables$9;

	// `Array.prototype.copyWithin` method
	// https://tc39.es/ecma262/#sec-array.prototype.copywithin
	$$2u({ target: 'Array', proto: true }, {
	  copyWithin: copyWithin
	});

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables$7('copyWithin');

	var fails$$ = fails$1f;

	var arrayMethodIsStrict$9 = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !!method && fails$$(function () {
	    // eslint-disable-next-line no-useless-call -- required for testing
	    method.call(null, argument || function () { return 1; }, 1);
	  });
	};

	var $$2t = _export;
	var $every$1 = arrayIteration.every;
	var arrayMethodIsStrict$8 = arrayMethodIsStrict$9;

	var STRICT_METHOD$8 = arrayMethodIsStrict$8('every');

	// `Array.prototype.every` method
	// https://tc39.es/ecma262/#sec-array.prototype.every
	$$2t({ target: 'Array', proto: true, forced: !STRICT_METHOD$8 }, {
	  every: function every(callbackfn /* , thisArg */) {
	    return $every$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var toObject$i = toObject$q;
	var toAbsoluteIndex$5 = toAbsoluteIndex$9;
	var lengthOfArrayLike$f = lengthOfArrayLike$n;

	// `Array.prototype.fill` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.fill
	var arrayFill$1 = function fill(value /* , start = 0, end = @length */) {
	  var O = toObject$i(this);
	  var length = lengthOfArrayLike$f(O);
	  var argumentsLength = arguments.length;
	  var index = toAbsoluteIndex$5(argumentsLength > 1 ? arguments[1] : undefined, length);
	  var end = argumentsLength > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex$5(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};

	var $$2s = _export;
	var fill$1 = arrayFill$1;
	var addToUnscopables$6 = addToUnscopables$9;

	// `Array.prototype.fill` method
	// https://tc39.es/ecma262/#sec-array.prototype.fill
	$$2s({ target: 'Array', proto: true }, {
	  fill: fill$1
	});

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables$6('fill');

	var $$2r = _export;
	var $filter$1 = arrayIteration.filter;
	var arrayMethodHasSpeciesSupport$3 = arrayMethodHasSpeciesSupport$5;

	var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport$3('filter');

	// `Array.prototype.filter` method
	// https://tc39.es/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	$$2r({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$3 }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $$2q = _export;
	var $find$1 = arrayIteration.find;
	var addToUnscopables$5 = addToUnscopables$9;

	var FIND = 'find';
	var SKIPS_HOLES$1 = true;

	// Shouldn't skip holes
	if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES$1 = false; });

	// `Array.prototype.find` method
	// https://tc39.es/ecma262/#sec-array.prototype.find
	$$2q({ target: 'Array', proto: true, forced: SKIPS_HOLES$1 }, {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables$5(FIND);

	var $$2p = _export;
	var $findIndex$1 = arrayIteration.findIndex;
	var addToUnscopables$4 = addToUnscopables$9;

	var FIND_INDEX = 'findIndex';
	var SKIPS_HOLES = true;

	// Shouldn't skip holes
	if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });

	// `Array.prototype.findIndex` method
	// https://tc39.es/ecma262/#sec-array.prototype.findindex
	$$2p({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $findIndex$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables$4(FIND_INDEX);

	var global$16 = global$1F;
	var isArray$f = isArray$j;
	var lengthOfArrayLike$e = lengthOfArrayLike$n;
	var bind$a = functionBindContext;

	var TypeError$j = global$16.TypeError;

	// `FlattenIntoArray` abstract operation
	// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
	var flattenIntoArray$2 = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
	  var targetIndex = start;
	  var sourceIndex = 0;
	  var mapFn = mapper ? bind$a(mapper, thisArg) : false;
	  var element, elementLen;

	  while (sourceIndex < sourceLen) {
	    if (sourceIndex in source) {
	      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

	      if (depth > 0 && isArray$f(element)) {
	        elementLen = lengthOfArrayLike$e(element);
	        targetIndex = flattenIntoArray$2(target, original, element, elementLen, targetIndex, depth - 1) - 1;
	      } else {
	        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError$j('Exceed the acceptable array length');
	        target[targetIndex] = element;
	      }

	      targetIndex++;
	    }
	    sourceIndex++;
	  }
	  return targetIndex;
	};

	var flattenIntoArray_1 = flattenIntoArray$2;

	var $$2o = _export;
	var flattenIntoArray$1 = flattenIntoArray_1;
	var toObject$h = toObject$q;
	var lengthOfArrayLike$d = lengthOfArrayLike$n;
	var toIntegerOrInfinity$e = toIntegerOrInfinity$i;
	var arraySpeciesCreate$2 = arraySpeciesCreate$5;

	// `Array.prototype.flat` method
	// https://tc39.es/ecma262/#sec-array.prototype.flat
	$$2o({ target: 'Array', proto: true }, {
	  flat: function flat(/* depthArg = 1 */) {
	    var depthArg = arguments.length ? arguments[0] : undefined;
	    var O = toObject$h(this);
	    var sourceLen = lengthOfArrayLike$d(O);
	    var A = arraySpeciesCreate$2(O, 0);
	    A.length = flattenIntoArray$1(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toIntegerOrInfinity$e(depthArg));
	    return A;
	  }
	});

	var $$2n = _export;
	var flattenIntoArray = flattenIntoArray_1;
	var aCallable$c = aCallable$g;
	var toObject$g = toObject$q;
	var lengthOfArrayLike$c = lengthOfArrayLike$n;
	var arraySpeciesCreate$1 = arraySpeciesCreate$5;

	// `Array.prototype.flatMap` method
	// https://tc39.es/ecma262/#sec-array.prototype.flatmap
	$$2n({ target: 'Array', proto: true }, {
	  flatMap: function flatMap(callbackfn /* , thisArg */) {
	    var O = toObject$g(this);
	    var sourceLen = lengthOfArrayLike$c(O);
	    var A;
	    aCallable$c(callbackfn);
	    A = arraySpeciesCreate$1(O, 0);
	    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    return A;
	  }
	});

	var $forEach$1 = arrayIteration.forEach;
	var arrayMethodIsStrict$7 = arrayMethodIsStrict$9;

	var STRICT_METHOD$7 = arrayMethodIsStrict$7('forEach');

	// `Array.prototype.forEach` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.foreach
	var arrayForEach = !STRICT_METHOD$7 ? function forEach(callbackfn /* , thisArg */) {
	  return $forEach$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	// eslint-disable-next-line es/no-array-prototype-foreach -- safe
	} : [].forEach;

	var $$2m = _export;
	var forEach$2 = arrayForEach;

	// `Array.prototype.forEach` method
	// https://tc39.es/ecma262/#sec-array.prototype.foreach
	// eslint-disable-next-line es/no-array-prototype-foreach -- safe
	$$2m({ target: 'Array', proto: true, forced: [].forEach != forEach$2 }, {
	  forEach: forEach$2
	});

	var anObject$r = anObject$C;
	var iteratorClose = iteratorClose$2;

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing$1 = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject$r(value)[0], value[1]) : fn(value);
	  } catch (error) {
	    iteratorClose(iterator, 'throw', error);
	  }
	};

	var global$15 = global$1F;
	var bind$9 = functionBindContext;
	var call$m = functionCall;
	var toObject$f = toObject$q;
	var callWithSafeIterationClosing = callWithSafeIterationClosing$1;
	var isArrayIteratorMethod$1 = isArrayIteratorMethod$3;
	var isConstructor$4 = isConstructor$6;
	var lengthOfArrayLike$b = lengthOfArrayLike$n;
	var createProperty$6 = createProperty$9;
	var getIterator$2 = getIterator$4;
	var getIteratorMethod$2 = getIteratorMethod$5;

	var Array$7 = global$15.Array;

	// `Array.from` method implementation
	// https://tc39.es/ecma262/#sec-array.from
	var arrayFrom$1 = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject$f(arrayLike);
	  var IS_CONSTRUCTOR = isConstructor$4(this);
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  if (mapping) mapfn = bind$9(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
	  var iteratorMethod = getIteratorMethod$2(O);
	  var index = 0;
	  var length, result, step, iterator, next, value;
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod && !(this == Array$7 && isArrayIteratorMethod$1(iteratorMethod))) {
	    iterator = getIterator$2(O, iteratorMethod);
	    next = iterator.next;
	    result = IS_CONSTRUCTOR ? new this() : [];
	    for (;!(step = call$m(next, iterator)).done; index++) {
	      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
	      createProperty$6(result, index, value);
	    }
	  } else {
	    length = lengthOfArrayLike$b(O);
	    result = IS_CONSTRUCTOR ? new this(length) : Array$7(length);
	    for (;length > index; index++) {
	      value = mapping ? mapfn(O[index], index) : O[index];
	      createProperty$6(result, index, value);
	    }
	  }
	  result.length = index;
	  return result;
	};

	var wellKnownSymbol$k = wellKnownSymbol$y;

	var ITERATOR$8 = wellKnownSymbol$k('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR$8] = function () {
	    return this;
	  };
	  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
	  Array.from(iteratorWithReturn, function () { throw 2; });
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration$4 = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$8] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var $$2l = _export;
	var from$1 = arrayFrom$1;
	var checkCorrectnessOfIteration$3 = checkCorrectnessOfIteration$4;

	var INCORRECT_ITERATION$1 = !checkCorrectnessOfIteration$3(function (iterable) {
	  // eslint-disable-next-line es/no-array-from -- required for testing
	  Array.from(iterable);
	});

	// `Array.from` method
	// https://tc39.es/ecma262/#sec-array.from
	$$2l({ target: 'Array', stat: true, forced: INCORRECT_ITERATION$1 }, {
	  from: from$1
	});

	var $$2k = _export;
	var $includes$1 = arrayIncludes$2.includes;
	var addToUnscopables$3 = addToUnscopables$9;

	// `Array.prototype.includes` method
	// https://tc39.es/ecma262/#sec-array.prototype.includes
	$$2k({ target: 'Array', proto: true }, {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes$1(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables$3('includes');

	/* eslint-disable es/no-array-prototype-indexof -- required for testing */
	var $$2j = _export;
	var uncurryThis$Z = functionUncurryThis;
	var $IndexOf = arrayIncludes$2.indexOf;
	var arrayMethodIsStrict$6 = arrayMethodIsStrict$9;

	var un$IndexOf = uncurryThis$Z([].indexOf);

	var NEGATIVE_ZERO$1 = !!un$IndexOf && 1 / un$IndexOf([1], 1, -0) < 0;
	var STRICT_METHOD$6 = arrayMethodIsStrict$6('indexOf');

	// `Array.prototype.indexOf` method
	// https://tc39.es/ecma262/#sec-array.prototype.indexof
	$$2j({ target: 'Array', proto: true, forced: NEGATIVE_ZERO$1 || !STRICT_METHOD$6 }, {
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    var fromIndex = arguments.length > 1 ? arguments[1] : undefined;
	    return NEGATIVE_ZERO$1
	      // convert -0 to +0
	      ? un$IndexOf(this, searchElement, fromIndex) || 0
	      : $IndexOf(this, searchElement, fromIndex);
	  }
	});

	var $$2i = _export;
	var isArray$e = isArray$j;

	// `Array.isArray` method
	// https://tc39.es/ecma262/#sec-array.isarray
	$$2i({ target: 'Array', stat: true }, {
	  isArray: isArray$e
	});

	var fails$_ = fails$1f;
	var isCallable$e = isCallable$v;
	var getPrototypeOf$8 = objectGetPrototypeOf$1;
	var redefine$h = redefineExports;
	var wellKnownSymbol$j = wellKnownSymbol$y;

	var ITERATOR$7 = wellKnownSymbol$j('iterator');
	var BUGGY_SAFARI_ITERATORS$1 = false;

	// `%IteratorPrototype%` object
	// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype$2, PrototypeOfArrayIteratorPrototype, arrayIterator;

	/* eslint-disable es/no-array-prototype-keys -- safe */
	if ([].keys) {
	  arrayIterator = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;
	  else {
	    PrototypeOfArrayIteratorPrototype = getPrototypeOf$8(getPrototypeOf$8(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;
	  }
	}

	var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$2 == undefined || fails$_(function () {
	  var test = {};
	  // FF44- legacy iterators case
	  return IteratorPrototype$2[ITERATOR$7].call(test) !== test;
	});

	if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$2 = {};

	// `%IteratorPrototype%[@@iterator]()` method
	// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
	if (!isCallable$e(IteratorPrototype$2[ITERATOR$7])) {
	  redefine$h(IteratorPrototype$2, ITERATOR$7, function () {
	    return this;
	  });
	}

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype$2,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;
	var create$7 = objectCreate$1;
	var createPropertyDescriptor$5 = createPropertyDescriptor$c;
	var setToStringTag$a = setToStringTag$c;
	var Iterators$2 = iterators;

	var returnThis$1 = function () { return this; };

	var createIteratorConstructor$3 = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = create$7(IteratorPrototype$1, { next: createPropertyDescriptor$5(+!ENUMERABLE_NEXT, next) });
	  setToStringTag$a(IteratorConstructor, TO_STRING_TAG, false);
	  Iterators$2[TO_STRING_TAG] = returnThis$1;
	  return IteratorConstructor;
	};

	var $$2h = _export;
	var call$l = functionCall;
	var FunctionName$1 = functionName;
	var isCallable$d = isCallable$v;
	var createIteratorConstructor$2 = createIteratorConstructor$3;
	var getPrototypeOf$7 = objectGetPrototypeOf$1;
	var setPrototypeOf$5 = objectSetPrototypeOf$1;
	var setToStringTag$9 = setToStringTag$c;
	var createNonEnumerableProperty$8 = createNonEnumerableProperty$f;
	var redefine$g = redefineExports;
	var wellKnownSymbol$i = wellKnownSymbol$y;
	var Iterators$1 = iterators;
	var IteratorsCore = iteratorsCore;

	var PROPER_FUNCTION_NAME$3 = FunctionName$1.PROPER;
	var CONFIGURABLE_FUNCTION_NAME$1 = FunctionName$1.CONFIGURABLE;
	var IteratorPrototype = IteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$6 = wellKnownSymbol$i('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis = function () { return this; };

	var defineIterator$3 = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor$2(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$6]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = getPrototypeOf$7(anyNativeIterator.call(new Iterable()));
	    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
	      if (getPrototypeOf$7(CurrentIteratorPrototype) !== IteratorPrototype) {
	        if (setPrototypeOf$5) {
	          setPrototypeOf$5(CurrentIteratorPrototype, IteratorPrototype);
	        } else if (!isCallable$d(CurrentIteratorPrototype[ITERATOR$6])) {
	          redefine$g(CurrentIteratorPrototype, ITERATOR$6, returnThis);
	        }
	      }
	      // Set @@toStringTag to native iterators
	      setToStringTag$9(CurrentIteratorPrototype, TO_STRING_TAG, true);
	    }
	  }

	  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
	  if (PROPER_FUNCTION_NAME$3 && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    if (CONFIGURABLE_FUNCTION_NAME$1) {
	      createNonEnumerableProperty$8(IterablePrototype, 'name', VALUES);
	    } else {
	      INCORRECT_VALUES_NAME = true;
	      defaultIterator = function values() { return call$l(nativeIterator, this); };
	    }
	  }

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine$g(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else $$2h({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
	  }

	  // define iterator
	  if (IterablePrototype[ITERATOR$6] !== defaultIterator) {
	    redefine$g(IterablePrototype, ITERATOR$6, defaultIterator, { name: DEFAULT });
	  }
	  Iterators$1[NAME] = defaultIterator;

	  return methods;
	};

	var toIndexedObject$8 = toIndexedObject$f;
	var addToUnscopables$2 = addToUnscopables$9;
	var Iterators = iterators;
	var InternalStateModule$a = internalState;
	var defineProperty$g = objectDefineProperty.f;
	var defineIterator$2 = defineIterator$3;
	var DESCRIPTORS$q = descriptors;

	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState$a = InternalStateModule$a.set;
	var getInternalState$9 = InternalStateModule$a.getterFor(ARRAY_ITERATOR);

	// `Array.prototype.entries` method
	// https://tc39.es/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.es/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.es/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.es/ecma262/#sec-createarrayiterator
	var es_array_iterator = defineIterator$2(Array, 'Array', function (iterated, kind) {
	  setInternalState$a(this, {
	    type: ARRAY_ITERATOR,
	    target: toIndexedObject$8(iterated), // target
	    index: 0,                          // next index
	    kind: kind                         // kind
	  });
	// `%ArrayIteratorPrototype%.next` method
	// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState$9(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;
	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return { value: undefined, done: true };
	  }
	  if (kind == 'keys') return { value: index, done: false };
	  if (kind == 'values') return { value: target[index], done: false };
	  return { value: [index, target[index]], done: false };
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.es/ecma262/#sec-createmappedargumentsobject
	var values = Iterators.Arguments = Iterators.Array;

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables$2('keys');
	addToUnscopables$2('values');
	addToUnscopables$2('entries');

	// V8 ~ Chrome 45- bug
	if (DESCRIPTORS$q && values.name !== 'values') try {
	  defineProperty$g(values, 'name', { value: 'values' });
	} catch (error) { /* empty */ }

	var $$2g = _export;
	var uncurryThis$Y = functionUncurryThis;
	var IndexedObject$2 = indexedObject;
	var toIndexedObject$7 = toIndexedObject$f;
	var arrayMethodIsStrict$5 = arrayMethodIsStrict$9;

	var un$Join = uncurryThis$Y([].join);

	var ES3_STRINGS = IndexedObject$2 != Object;
	var STRICT_METHOD$5 = arrayMethodIsStrict$5('join', ',');

	// `Array.prototype.join` method
	// https://tc39.es/ecma262/#sec-array.prototype.join
	$$2g({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD$5 }, {
	  join: function join(separator) {
	    return un$Join(toIndexedObject$7(this), separator === undefined ? ',' : separator);
	  }
	});

	/* eslint-disable es/no-array-prototype-lastindexof -- safe */
	var apply$a = functionApply$1;
	var toIndexedObject$6 = toIndexedObject$f;
	var toIntegerOrInfinity$d = toIntegerOrInfinity$i;
	var lengthOfArrayLike$a = lengthOfArrayLike$n;
	var arrayMethodIsStrict$4 = arrayMethodIsStrict$9;

	var min$7 = Math.min;
	var $lastIndexOf$1 = [].lastIndexOf;
	var NEGATIVE_ZERO = !!$lastIndexOf$1 && 1 / [1].lastIndexOf(1, -0) < 0;
	var STRICT_METHOD$4 = arrayMethodIsStrict$4('lastIndexOf');
	var FORCED$r = NEGATIVE_ZERO || !STRICT_METHOD$4;

	// `Array.prototype.lastIndexOf` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.lastindexof
	var arrayLastIndexOf = FORCED$r ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
	  // convert -0 to +0
	  if (NEGATIVE_ZERO) return apply$a($lastIndexOf$1, this, arguments) || 0;
	  var O = toIndexedObject$6(this);
	  var length = lengthOfArrayLike$a(O);
	  var index = length - 1;
	  if (arguments.length > 1) index = min$7(index, toIntegerOrInfinity$d(arguments[1]));
	  if (index < 0) index = length + index;
	  for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
	  return -1;
	} : $lastIndexOf$1;

	var $$2f = _export;
	var lastIndexOf = arrayLastIndexOf;

	// `Array.prototype.lastIndexOf` method
	// https://tc39.es/ecma262/#sec-array.prototype.lastindexof
	// eslint-disable-next-line es/no-array-prototype-lastindexof -- required for testing
	$$2f({ target: 'Array', proto: true, forced: lastIndexOf !== [].lastIndexOf }, {
	  lastIndexOf: lastIndexOf
	});

	var $$2e = _export;
	var $map$1 = arrayIteration.map;
	var arrayMethodHasSpeciesSupport$2 = arrayMethodHasSpeciesSupport$5;

	var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport$2('map');

	// `Array.prototype.map` method
	// https://tc39.es/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	$$2e({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $$2d = _export;
	var global$14 = global$1F;
	var fails$Z = fails$1f;
	var isConstructor$3 = isConstructor$6;
	var createProperty$5 = createProperty$9;

	var Array$6 = global$14.Array;

	var ISNT_GENERIC = fails$Z(function () {
	  function F() { /* empty */ }
	  return !(Array$6.of.call(F) instanceof F);
	});

	// `Array.of` method
	// https://tc39.es/ecma262/#sec-array.of
	// WebKit Array.of isn't generic
	$$2d({ target: 'Array', stat: true, forced: ISNT_GENERIC }, {
	  of: function of(/* ...args */) {
	    var index = 0;
	    var argumentsLength = arguments.length;
	    var result = new (isConstructor$3(this) ? this : Array$6)(argumentsLength);
	    while (argumentsLength > index) createProperty$5(result, index, arguments[index++]);
	    result.length = argumentsLength;
	    return result;
	  }
	});

	var global$13 = global$1F;
	var aCallable$b = aCallable$g;
	var toObject$e = toObject$q;
	var IndexedObject$1 = indexedObject;
	var lengthOfArrayLike$9 = lengthOfArrayLike$n;

	var TypeError$i = global$13.TypeError;

	// `Array.prototype.{ reduce, reduceRight }` methods implementation
	var createMethod$4 = function (IS_RIGHT) {
	  return function (that, callbackfn, argumentsLength, memo) {
	    aCallable$b(callbackfn);
	    var O = toObject$e(that);
	    var self = IndexedObject$1(O);
	    var length = lengthOfArrayLike$9(O);
	    var index = IS_RIGHT ? length - 1 : 0;
	    var i = IS_RIGHT ? -1 : 1;
	    if (argumentsLength < 2) while (true) {
	      if (index in self) {
	        memo = self[index];
	        index += i;
	        break;
	      }
	      index += i;
	      if (IS_RIGHT ? index < 0 : length <= index) {
	        throw TypeError$i('Reduce of empty array with no initial value');
	      }
	    }
	    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
	      memo = callbackfn(memo, self[index], index, O);
	    }
	    return memo;
	  };
	};

	var arrayReduce$2 = {
	  // `Array.prototype.reduce` method
	  // https://tc39.es/ecma262/#sec-array.prototype.reduce
	  left: createMethod$4(false),
	  // `Array.prototype.reduceRight` method
	  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
	  right: createMethod$4(true)
	};

	var classof$d = classofRaw$1;
	var global$12 = global$1F;

	var engineIsNode = classof$d(global$12.process) == 'process';

	var $$2c = _export;
	var $reduce$1 = arrayReduce$2.left;
	var arrayMethodIsStrict$3 = arrayMethodIsStrict$9;
	var CHROME_VERSION$1 = engineV8Version;
	var IS_NODE$6 = engineIsNode;

	var STRICT_METHOD$3 = arrayMethodIsStrict$3('reduce');
	// Chrome 80-82 has a critical bug
	// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
	var CHROME_BUG$1 = !IS_NODE$6 && CHROME_VERSION$1 > 79 && CHROME_VERSION$1 < 83;

	// `Array.prototype.reduce` method
	// https://tc39.es/ecma262/#sec-array.prototype.reduce
	$$2c({ target: 'Array', proto: true, forced: !STRICT_METHOD$3 || CHROME_BUG$1 }, {
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    var length = arguments.length;
	    return $reduce$1(this, callbackfn, length, length > 1 ? arguments[1] : undefined);
	  }
	});

	var $$2b = _export;
	var $reduceRight$1 = arrayReduce$2.right;
	var arrayMethodIsStrict$2 = arrayMethodIsStrict$9;
	var CHROME_VERSION = engineV8Version;
	var IS_NODE$5 = engineIsNode;

	var STRICT_METHOD$2 = arrayMethodIsStrict$2('reduceRight');
	// Chrome 80-82 has a critical bug
	// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
	var CHROME_BUG = !IS_NODE$5 && CHROME_VERSION > 79 && CHROME_VERSION < 83;

	// `Array.prototype.reduceRight` method
	// https://tc39.es/ecma262/#sec-array.prototype.reduceright
	$$2b({ target: 'Array', proto: true, forced: !STRICT_METHOD$2 || CHROME_BUG }, {
	  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
	    return $reduceRight$1(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $$2a = _export;
	var uncurryThis$X = functionUncurryThis;
	var isArray$d = isArray$j;

	var un$Reverse = uncurryThis$X([].reverse);
	var test$1 = [1, 2];

	// `Array.prototype.reverse` method
	// https://tc39.es/ecma262/#sec-array.prototype.reverse
	// fix for Safari 12.0 bug
	// https://bugs.webkit.org/show_bug.cgi?id=188794
	$$2a({ target: 'Array', proto: true, forced: String(test$1) === String(test$1.reverse()) }, {
	  reverse: function reverse() {
	    // eslint-disable-next-line no-self-assign -- dirty hack
	    if (isArray$d(this)) this.length = this.length;
	    return un$Reverse(this);
	  }
	});

	var $$29 = _export;
	var global$11 = global$1F;
	var isArray$c = isArray$j;
	var isConstructor$2 = isConstructor$6;
	var isObject$x = isObject$I;
	var toAbsoluteIndex$4 = toAbsoluteIndex$9;
	var lengthOfArrayLike$8 = lengthOfArrayLike$n;
	var toIndexedObject$5 = toIndexedObject$f;
	var createProperty$4 = createProperty$9;
	var wellKnownSymbol$h = wellKnownSymbol$y;
	var arrayMethodHasSpeciesSupport$1 = arrayMethodHasSpeciesSupport$5;
	var un$Slice = arraySlice$b;

	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport$1('slice');

	var SPECIES$4 = wellKnownSymbol$h('species');
	var Array$5 = global$11.Array;
	var max$5 = Math.max;

	// `Array.prototype.slice` method
	// https://tc39.es/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects
	$$29({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 }, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject$5(this);
	    var length = lengthOfArrayLike$8(O);
	    var k = toAbsoluteIndex$4(start, length);
	    var fin = toAbsoluteIndex$4(end === undefined ? length : end, length);
	    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
	    var Constructor, result, n;
	    if (isArray$c(O)) {
	      Constructor = O.constructor;
	      // cross-realm fallback
	      if (isConstructor$2(Constructor) && (Constructor === Array$5 || isArray$c(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject$x(Constructor)) {
	        Constructor = Constructor[SPECIES$4];
	        if (Constructor === null) Constructor = undefined;
	      }
	      if (Constructor === Array$5 || Constructor === undefined) {
	        return un$Slice(O, k, fin);
	      }
	    }
	    result = new (Constructor === undefined ? Array$5 : Constructor)(max$5(fin - k, 0));
	    for (n = 0; k < fin; k++, n++) if (k in O) createProperty$4(result, n, O[k]);
	    result.length = n;
	    return result;
	  }
	});

	var $$28 = _export;
	var $some$1 = arrayIteration.some;
	var arrayMethodIsStrict$1 = arrayMethodIsStrict$9;

	var STRICT_METHOD$1 = arrayMethodIsStrict$1('some');

	// `Array.prototype.some` method
	// https://tc39.es/ecma262/#sec-array.prototype.some
	$$28({ target: 'Array', proto: true, forced: !STRICT_METHOD$1 }, {
	  some: function some(callbackfn /* , thisArg */) {
	    return $some$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var arraySlice$9 = arraySliceSimple;

	var floor$a = Math.floor;

	var mergeSort = function (array, comparefn) {
	  var length = array.length;
	  var middle = floor$a(length / 2);
	  return length < 8 ? insertionSort(array, comparefn) : merge(
	    array,
	    mergeSort(arraySlice$9(array, 0, middle), comparefn),
	    mergeSort(arraySlice$9(array, middle), comparefn),
	    comparefn
	  );
	};

	var insertionSort = function (array, comparefn) {
	  var length = array.length;
	  var i = 1;
	  var element, j;

	  while (i < length) {
	    j = i;
	    element = array[i];
	    while (j && comparefn(array[j - 1], element) > 0) {
	      array[j] = array[--j];
	    }
	    if (j !== i++) array[j] = element;
	  } return array;
	};

	var merge = function (array, left, right, comparefn) {
	  var llength = left.length;
	  var rlength = right.length;
	  var lindex = 0;
	  var rindex = 0;

	  while (lindex < llength || rindex < rlength) {
	    array[lindex + rindex] = (lindex < llength && rindex < rlength)
	      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]
	      : lindex < llength ? left[lindex++] : right[rindex++];
	  } return array;
	};

	var arraySort$1 = mergeSort;

	var userAgent$6 = engineUserAgent;

	var firefox = userAgent$6.match(/firefox\/(\d+)/i);

	var engineFfVersion = !!firefox && +firefox[1];

	var UA = engineUserAgent;

	var engineIsIeOrEdge = /MSIE|Trident/.test(UA);

	var userAgent$5 = engineUserAgent;

	var webkit = userAgent$5.match(/AppleWebKit\/(\d+)\./);

	var engineWebkitVersion = !!webkit && +webkit[1];

	var $$27 = _export;
	var uncurryThis$W = functionUncurryThis;
	var aCallable$a = aCallable$g;
	var toObject$d = toObject$q;
	var lengthOfArrayLike$7 = lengthOfArrayLike$n;
	var toString$z = toString$C;
	var fails$Y = fails$1f;
	var internalSort$1 = arraySort$1;
	var arrayMethodIsStrict = arrayMethodIsStrict$9;
	var FF$1 = engineFfVersion;
	var IE_OR_EDGE$1 = engineIsIeOrEdge;
	var V8$1 = engineV8Version;
	var WEBKIT$2 = engineWebkitVersion;

	var test = [];
	var un$Sort$1 = uncurryThis$W(test.sort);
	var push$9 = uncurryThis$W(test.push);

	// IE8-
	var FAILS_ON_UNDEFINED = fails$Y(function () {
	  test.sort(undefined);
	});
	// V8 bug
	var FAILS_ON_NULL = fails$Y(function () {
	  test.sort(null);
	});
	// Old WebKit
	var STRICT_METHOD = arrayMethodIsStrict('sort');

	var STABLE_SORT$1 = !fails$Y(function () {
	  // feature detection can be too slow, so check engines versions
	  if (V8$1) return V8$1 < 70;
	  if (FF$1 && FF$1 > 3) return;
	  if (IE_OR_EDGE$1) return true;
	  if (WEBKIT$2) return WEBKIT$2 < 603;

	  var result = '';
	  var code, chr, value, index;

	  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
	  for (code = 65; code < 76; code++) {
	    chr = String.fromCharCode(code);

	    switch (code) {
	      case 66: case 69: case 70: case 72: value = 3; break;
	      case 68: case 71: value = 4; break;
	      default: value = 2;
	    }

	    for (index = 0; index < 47; index++) {
	      test.push({ k: chr + index, v: value });
	    }
	  }

	  test.sort(function (a, b) { return b.v - a.v; });

	  for (index = 0; index < test.length; index++) {
	    chr = test[index].k.charAt(0);
	    if (result.charAt(result.length - 1) !== chr) result += chr;
	  }

	  return result !== 'DGBEFHACIJK';
	});

	var FORCED$q = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT$1;

	var getSortCompare$1 = function (comparefn) {
	  return function (x, y) {
	    if (y === undefined) return -1;
	    if (x === undefined) return 1;
	    if (comparefn !== undefined) return +comparefn(x, y) || 0;
	    return toString$z(x) > toString$z(y) ? 1 : -1;
	  };
	};

	// `Array.prototype.sort` method
	// https://tc39.es/ecma262/#sec-array.prototype.sort
	$$27({ target: 'Array', proto: true, forced: FORCED$q }, {
	  sort: function sort(comparefn) {
	    if (comparefn !== undefined) aCallable$a(comparefn);

	    var array = toObject$d(this);

	    if (STABLE_SORT$1) return comparefn === undefined ? un$Sort$1(array) : un$Sort$1(array, comparefn);

	    var items = [];
	    var arrayLength = lengthOfArrayLike$7(array);
	    var itemsLength, index;

	    for (index = 0; index < arrayLength; index++) {
	      if (index in array) push$9(items, array[index]);
	    }

	    internalSort$1(items, getSortCompare$1(comparefn));

	    itemsLength = items.length;
	    index = 0;

	    while (index < itemsLength) array[index] = items[index++];
	    while (index < arrayLength) delete array[index++];

	    return array;
	  }
	});

	var getBuiltIn$c = getBuiltIn$l;
	var definePropertyModule$6 = objectDefineProperty;
	var wellKnownSymbol$g = wellKnownSymbol$y;
	var DESCRIPTORS$p = descriptors;

	var SPECIES$3 = wellKnownSymbol$g('species');

	var setSpecies$6 = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn$c(CONSTRUCTOR_NAME);
	  var defineProperty = definePropertyModule$6.f;

	  if (DESCRIPTORS$p && Constructor && !Constructor[SPECIES$3]) {
	    defineProperty(Constructor, SPECIES$3, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var setSpecies$5 = setSpecies$6;

	// `Array[@@species]` getter
	// https://tc39.es/ecma262/#sec-get-array-@@species
	setSpecies$5('Array');

	var $$26 = _export;
	var global$10 = global$1F;
	var toAbsoluteIndex$3 = toAbsoluteIndex$9;
	var toIntegerOrInfinity$c = toIntegerOrInfinity$i;
	var lengthOfArrayLike$6 = lengthOfArrayLike$n;
	var toObject$c = toObject$q;
	var arraySpeciesCreate = arraySpeciesCreate$5;
	var createProperty$3 = createProperty$9;
	var arrayMethodHasSpeciesSupport = arrayMethodHasSpeciesSupport$5;

	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');

	var TypeError$h = global$10.TypeError;
	var max$4 = Math.max;
	var min$6 = Math.min;
	var MAX_SAFE_INTEGER$2 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

	// `Array.prototype.splice` method
	// https://tc39.es/ecma262/#sec-array.prototype.splice
	// with adding support of @@species
	$$26({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
	  splice: function splice(start, deleteCount /* , ...items */) {
	    var O = toObject$c(this);
	    var len = lengthOfArrayLike$6(O);
	    var actualStart = toAbsoluteIndex$3(start, len);
	    var argumentsLength = arguments.length;
	    var insertCount, actualDeleteCount, A, k, from, to;
	    if (argumentsLength === 0) {
	      insertCount = actualDeleteCount = 0;
	    } else if (argumentsLength === 1) {
	      insertCount = 0;
	      actualDeleteCount = len - actualStart;
	    } else {
	      insertCount = argumentsLength - 2;
	      actualDeleteCount = min$6(max$4(toIntegerOrInfinity$c(deleteCount), 0), len - actualStart);
	    }
	    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$2) {
	      throw TypeError$h(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
	    }
	    A = arraySpeciesCreate(O, actualDeleteCount);
	    for (k = 0; k < actualDeleteCount; k++) {
	      from = actualStart + k;
	      if (from in O) createProperty$3(A, k, O[from]);
	    }
	    A.length = actualDeleteCount;
	    if (insertCount < actualDeleteCount) {
	      for (k = actualStart; k < len - actualDeleteCount; k++) {
	        from = k + actualDeleteCount;
	        to = k + insertCount;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
	    } else if (insertCount > actualDeleteCount) {
	      for (k = len - actualDeleteCount; k > actualStart; k--) {
	        from = k + actualDeleteCount - 1;
	        to = k + insertCount - 1;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	    }
	    for (k = 0; k < insertCount; k++) {
	      O[k + actualStart] = arguments[k + 2];
	    }
	    O.length = len - actualDeleteCount + insertCount;
	    return A;
	  }
	});

	// this method was added to unscopables after implementation
	// in popular engines, so it's moved to a separate module
	var addToUnscopables$1 = addToUnscopables$9;

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables$1('flat');

	// this method was added to unscopables after implementation
	// in popular engines, so it's moved to a separate module
	var addToUnscopables = addToUnscopables$9;

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('flatMap');

	// eslint-disable-next-line es/no-typed-arrays -- safe
	var arrayBufferNative = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';

	var redefine$f = redefineExports;

	var redefineAll$6 = function (target, src, options) {
	  for (var key in src) redefine$f(target, key, src[key], options);
	  return target;
	};

	var global$$ = global$1F;
	var isPrototypeOf$6 = objectIsPrototypeOf;

	var TypeError$g = global$$.TypeError;

	var anInstance$a = function (it, Prototype) {
	  if (isPrototypeOf$6(Prototype, it)) return it;
	  throw TypeError$g('Incorrect invocation');
	};

	var global$_ = global$1F;
	var toIntegerOrInfinity$b = toIntegerOrInfinity$i;
	var toLength$b = toLength$d;

	var RangeError$c = global$_.RangeError;

	// `ToIndex` abstract operation
	// https://tc39.es/ecma262/#sec-toindex
	var toIndex$2 = function (it) {
	  if (it === undefined) return 0;
	  var number = toIntegerOrInfinity$b(it);
	  var length = toLength$b(number);
	  if (number !== length) throw RangeError$c('Wrong length or index');
	  return length;
	};

	// IEEE754 conversions based on https://github.com/feross/ieee754
	var global$Z = global$1F;

	var Array$4 = global$Z.Array;
	var abs$a = Math.abs;
	var pow$5 = Math.pow;
	var floor$9 = Math.floor;
	var log$8 = Math.log;
	var LN2$2 = Math.LN2;

	var pack = function (number, mantissaLength, bytes) {
	  var buffer = Array$4(bytes);
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var rt = mantissaLength === 23 ? pow$5(2, -24) - pow$5(2, -77) : 0;
	  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
	  var index = 0;
	  var exponent, mantissa, c;
	  number = abs$a(number);
	  // eslint-disable-next-line no-self-compare -- NaN check
	  if (number != number || number === Infinity) {
	    // eslint-disable-next-line no-self-compare -- NaN check
	    mantissa = number != number ? 1 : 0;
	    exponent = eMax;
	  } else {
	    exponent = floor$9(log$8(number) / LN2$2);
	    c = pow$5(2, -exponent);
	    if (number * c < 1) {
	      exponent--;
	      c *= 2;
	    }
	    if (exponent + eBias >= 1) {
	      number += rt / c;
	    } else {
	      number += rt * pow$5(2, 1 - eBias);
	    }
	    if (number * c >= 2) {
	      exponent++;
	      c /= 2;
	    }
	    if (exponent + eBias >= eMax) {
	      mantissa = 0;
	      exponent = eMax;
	    } else if (exponent + eBias >= 1) {
	      mantissa = (number * c - 1) * pow$5(2, mantissaLength);
	      exponent = exponent + eBias;
	    } else {
	      mantissa = number * pow$5(2, eBias - 1) * pow$5(2, mantissaLength);
	      exponent = 0;
	    }
	  }
	  while (mantissaLength >= 8) {
	    buffer[index++] = mantissa & 255;
	    mantissa /= 256;
	    mantissaLength -= 8;
	  }
	  exponent = exponent << mantissaLength | mantissa;
	  exponentLength += mantissaLength;
	  while (exponentLength > 0) {
	    buffer[index++] = exponent & 255;
	    exponent /= 256;
	    exponentLength -= 8;
	  }
	  buffer[--index] |= sign * 128;
	  return buffer;
	};

	var unpack = function (buffer, mantissaLength) {
	  var bytes = buffer.length;
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var nBits = exponentLength - 7;
	  var index = bytes - 1;
	  var sign = buffer[index--];
	  var exponent = sign & 127;
	  var mantissa;
	  sign >>= 7;
	  while (nBits > 0) {
	    exponent = exponent * 256 + buffer[index--];
	    nBits -= 8;
	  }
	  mantissa = exponent & (1 << -nBits) - 1;
	  exponent >>= -nBits;
	  nBits += mantissaLength;
	  while (nBits > 0) {
	    mantissa = mantissa * 256 + buffer[index--];
	    nBits -= 8;
	  }
	  if (exponent === 0) {
	    exponent = 1 - eBias;
	  } else if (exponent === eMax) {
	    return mantissa ? NaN : sign ? -Infinity : Infinity;
	  } else {
	    mantissa = mantissa + pow$5(2, mantissaLength);
	    exponent = exponent - eBias;
	  } return (sign ? -1 : 1) * mantissa * pow$5(2, exponent - mantissaLength);
	};

	var ieee754 = {
	  pack: pack,
	  unpack: unpack
	};

	var global$Y = global$1F;
	var uncurryThis$V = functionUncurryThis;
	var DESCRIPTORS$o = descriptors;
	var NATIVE_ARRAY_BUFFER$2 = arrayBufferNative;
	var FunctionName = functionName;
	var createNonEnumerableProperty$7 = createNonEnumerableProperty$f;
	var redefineAll$5 = redefineAll$6;
	var fails$X = fails$1f;
	var anInstance$9 = anInstance$a;
	var toIntegerOrInfinity$a = toIntegerOrInfinity$i;
	var toLength$a = toLength$d;
	var toIndex$1 = toIndex$2;
	var IEEE754 = ieee754;
	var getPrototypeOf$6 = objectGetPrototypeOf$1;
	var setPrototypeOf$4 = objectSetPrototypeOf$1;
	var getOwnPropertyNames$4 = objectGetOwnPropertyNames.f;
	var defineProperty$f = objectDefineProperty.f;
	var arrayFill = arrayFill$1;
	var arraySlice$8 = arraySliceSimple;
	var setToStringTag$8 = setToStringTag$c;
	var InternalStateModule$9 = internalState;

	var PROPER_FUNCTION_NAME$2 = FunctionName.PROPER;
	var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
	var getInternalState$8 = InternalStateModule$9.get;
	var setInternalState$9 = InternalStateModule$9.set;
	var ARRAY_BUFFER$1 = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE = 'prototype';
	var WRONG_LENGTH$1 = 'Wrong length';
	var WRONG_INDEX = 'Wrong index';
	var NativeArrayBuffer$1 = global$Y[ARRAY_BUFFER$1];
	var $ArrayBuffer = NativeArrayBuffer$1;
	var ArrayBufferPrototype$1 = $ArrayBuffer && $ArrayBuffer[PROTOTYPE];
	var $DataView = global$Y[DATA_VIEW];
	var DataViewPrototype$1 = $DataView && $DataView[PROTOTYPE];
	var ObjectPrototype$2 = Object.prototype;
	var Array$3 = global$Y.Array;
	var RangeError$b = global$Y.RangeError;
	var fill = uncurryThis$V(arrayFill);
	var reverse = uncurryThis$V([].reverse);

	var packIEEE754 = IEEE754.pack;
	var unpackIEEE754 = IEEE754.unpack;

	var packInt8 = function (number) {
	  return [number & 0xFF];
	};

	var packInt16 = function (number) {
	  return [number & 0xFF, number >> 8 & 0xFF];
	};

	var packInt32 = function (number) {
	  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
	};

	var unpackInt32 = function (buffer) {
	  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
	};

	var packFloat32 = function (number) {
	  return packIEEE754(number, 23, 4);
	};

	var packFloat64 = function (number) {
	  return packIEEE754(number, 52, 8);
	};

	var addGetter$1 = function (Constructor, key) {
	  defineProperty$f(Constructor[PROTOTYPE], key, { get: function () { return getInternalState$8(this)[key]; } });
	};

	var get$5 = function (view, count, index, isLittleEndian) {
	  var intIndex = toIndex$1(index);
	  var store = getInternalState$8(view);
	  if (intIndex + count > store.byteLength) throw RangeError$b(WRONG_INDEX);
	  var bytes = getInternalState$8(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = arraySlice$8(bytes, start, start + count);
	  return isLittleEndian ? pack : reverse(pack);
	};

	var set$4 = function (view, count, index, conversion, value, isLittleEndian) {
	  var intIndex = toIndex$1(index);
	  var store = getInternalState$8(view);
	  if (intIndex + count > store.byteLength) throw RangeError$b(WRONG_INDEX);
	  var bytes = getInternalState$8(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = conversion(+value);
	  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
	};

	if (!NATIVE_ARRAY_BUFFER$2) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    anInstance$9(this, ArrayBufferPrototype$1);
	    var byteLength = toIndex$1(length);
	    setInternalState$9(this, {
	      bytes: fill(Array$3(byteLength), 0),
	      byteLength: byteLength
	    });
	    if (!DESCRIPTORS$o) this.byteLength = byteLength;
	  };

	  ArrayBufferPrototype$1 = $ArrayBuffer[PROTOTYPE];

	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    anInstance$9(this, DataViewPrototype$1);
	    anInstance$9(buffer, ArrayBufferPrototype$1);
	    var bufferLength = getInternalState$8(buffer).byteLength;
	    var offset = toIntegerOrInfinity$a(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError$b('Wrong offset');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength$a(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError$b(WRONG_LENGTH$1);
	    setInternalState$9(this, {
	      buffer: buffer,
	      byteLength: byteLength,
	      byteOffset: offset
	    });
	    if (!DESCRIPTORS$o) {
	      this.buffer = buffer;
	      this.byteLength = byteLength;
	      this.byteOffset = offset;
	    }
	  };

	  DataViewPrototype$1 = $DataView[PROTOTYPE];

	  if (DESCRIPTORS$o) {
	    addGetter$1($ArrayBuffer, 'byteLength');
	    addGetter$1($DataView, 'buffer');
	    addGetter$1($DataView, 'byteLength');
	    addGetter$1($DataView, 'byteOffset');
	  }

	  redefineAll$5(DataViewPrototype$1, {
	    getInt8: function getInt8(byteOffset) {
	      return get$5(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get$5(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /* , littleEndian */) {
	      var bytes = get$5(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /* , littleEndian */) {
	      var bytes = get$5(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /* , littleEndian */) {
	      return unpackInt32(get$5(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
	    },
	    getUint32: function getUint32(byteOffset /* , littleEndian */) {
	      return unpackInt32(get$5(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get$5(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
	    },
	    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get$5(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set$4(this, 1, byteOffset, packInt8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set$4(this, 1, byteOffset, packInt8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
	      set$4(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
	      set$4(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
	      set$4(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
	      set$4(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
	      set$4(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
	      set$4(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
	    }
	  });
	} else {
	  var INCORRECT_ARRAY_BUFFER_NAME = PROPER_FUNCTION_NAME$2 && NativeArrayBuffer$1.name !== ARRAY_BUFFER$1;
	  /* eslint-disable no-new -- required for testing */
	  if (!fails$X(function () {
	    NativeArrayBuffer$1(1);
	  }) || !fails$X(function () {
	    new NativeArrayBuffer$1(-1);
	  }) || fails$X(function () {
	    new NativeArrayBuffer$1();
	    new NativeArrayBuffer$1(1.5);
	    new NativeArrayBuffer$1(NaN);
	    return INCORRECT_ARRAY_BUFFER_NAME && !CONFIGURABLE_FUNCTION_NAME;
	  })) {
	  /* eslint-enable no-new -- required for testing */
	    $ArrayBuffer = function ArrayBuffer(length) {
	      anInstance$9(this, ArrayBufferPrototype$1);
	      return new NativeArrayBuffer$1(toIndex$1(length));
	    };

	    $ArrayBuffer[PROTOTYPE] = ArrayBufferPrototype$1;

	    for (var keys$7 = getOwnPropertyNames$4(NativeArrayBuffer$1), j$1 = 0, key$3; keys$7.length > j$1;) {
	      if (!((key$3 = keys$7[j$1++]) in $ArrayBuffer)) {
	        createNonEnumerableProperty$7($ArrayBuffer, key$3, NativeArrayBuffer$1[key$3]);
	      }
	    }

	    ArrayBufferPrototype$1.constructor = $ArrayBuffer;
	  } else if (INCORRECT_ARRAY_BUFFER_NAME && CONFIGURABLE_FUNCTION_NAME) {
	    createNonEnumerableProperty$7(NativeArrayBuffer$1, 'name', ARRAY_BUFFER$1);
	  }

	  // WebKit bug - the same parent prototype for typed arrays and data view
	  if (setPrototypeOf$4 && getPrototypeOf$6(DataViewPrototype$1) !== ObjectPrototype$2) {
	    setPrototypeOf$4(DataViewPrototype$1, ObjectPrototype$2);
	  }

	  // iOS Safari 7.x bug
	  var testView = new $DataView(new $ArrayBuffer(2));
	  var $setInt8 = uncurryThis$V(DataViewPrototype$1.setInt8);
	  testView.setInt8(0, 2147483648);
	  testView.setInt8(1, 2147483649);
	  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll$5(DataViewPrototype$1, {
	    setInt8: function setInt8(byteOffset, value) {
	      $setInt8(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      $setInt8(this, byteOffset, value << 24 >> 24);
	    }
	  }, { unsafe: true });
	}

	setToStringTag$8($ArrayBuffer, ARRAY_BUFFER$1);
	setToStringTag$8($DataView, DATA_VIEW);

	var arrayBuffer = {
	  ArrayBuffer: $ArrayBuffer,
	  DataView: $DataView
	};

	var $$25 = _export;
	var global$X = global$1F;
	var arrayBufferModule = arrayBuffer;
	var setSpecies$4 = setSpecies$6;

	var ARRAY_BUFFER = 'ArrayBuffer';
	var ArrayBuffer$4 = arrayBufferModule[ARRAY_BUFFER];
	var NativeArrayBuffer = global$X[ARRAY_BUFFER];

	// `ArrayBuffer` constructor
	// https://tc39.es/ecma262/#sec-arraybuffer-constructor
	$$25({ global: true, forced: NativeArrayBuffer !== ArrayBuffer$4 }, {
	  ArrayBuffer: ArrayBuffer$4
	});

	setSpecies$4(ARRAY_BUFFER);

	var NATIVE_ARRAY_BUFFER$1 = arrayBufferNative;
	var DESCRIPTORS$n = descriptors;
	var global$W = global$1F;
	var isCallable$c = isCallable$v;
	var isObject$w = isObject$I;
	var hasOwn$g = hasOwnProperty_1;
	var classof$c = classof$i;
	var tryToString$1 = tryToString$5;
	var createNonEnumerableProperty$6 = createNonEnumerableProperty$f;
	var redefine$e = redefineExports;
	var defineProperty$e = objectDefineProperty.f;
	var isPrototypeOf$5 = objectIsPrototypeOf;
	var getPrototypeOf$5 = objectGetPrototypeOf$1;
	var setPrototypeOf$3 = objectSetPrototypeOf$1;
	var wellKnownSymbol$f = wellKnownSymbol$y;
	var uid$2 = uid$6;

	var Int8Array$4 = global$W.Int8Array;
	var Int8ArrayPrototype$1 = Int8Array$4 && Int8Array$4.prototype;
	var Uint8ClampedArray$1 = global$W.Uint8ClampedArray;
	var Uint8ClampedArrayPrototype = Uint8ClampedArray$1 && Uint8ClampedArray$1.prototype;
	var TypedArray$1 = Int8Array$4 && getPrototypeOf$5(Int8Array$4);
	var TypedArrayPrototype$2 = Int8ArrayPrototype$1 && getPrototypeOf$5(Int8ArrayPrototype$1);
	var ObjectPrototype$1 = Object.prototype;
	var TypeError$f = global$W.TypeError;

	var TO_STRING_TAG$1 = wellKnownSymbol$f('toStringTag');
	var TYPED_ARRAY_TAG$1 = uid$2('TYPED_ARRAY_TAG');
	var TYPED_ARRAY_CONSTRUCTOR$2 = uid$2('TYPED_ARRAY_CONSTRUCTOR');
	// Fixing native typed arrays in Opera Presto crashes the browser, see #595
	var NATIVE_ARRAY_BUFFER_VIEWS$3 = NATIVE_ARRAY_BUFFER$1 && !!setPrototypeOf$3 && classof$c(global$W.opera) !== 'Opera';
	var TYPED_ARRAY_TAG_REQUIRED = false;
	var NAME$1, Constructor, Prototype;

	var TypedArrayConstructorsList = {
	  Int8Array: 1,
	  Uint8Array: 1,
	  Uint8ClampedArray: 1,
	  Int16Array: 2,
	  Uint16Array: 2,
	  Int32Array: 4,
	  Uint32Array: 4,
	  Float32Array: 4,
	  Float64Array: 8
	};

	var BigIntArrayConstructorsList = {
	  BigInt64Array: 8,
	  BigUint64Array: 8
	};

	var isView = function isView(it) {
	  if (!isObject$w(it)) return false;
	  var klass = classof$c(it);
	  return klass === 'DataView'
	    || hasOwn$g(TypedArrayConstructorsList, klass)
	    || hasOwn$g(BigIntArrayConstructorsList, klass);
	};

	var isTypedArray$4 = function (it) {
	  if (!isObject$w(it)) return false;
	  var klass = classof$c(it);
	  return hasOwn$g(TypedArrayConstructorsList, klass)
	    || hasOwn$g(BigIntArrayConstructorsList, klass);
	};

	var aTypedArray$n = function (it) {
	  if (isTypedArray$4(it)) return it;
	  throw TypeError$f('Target is not a typed array');
	};

	var aTypedArrayConstructor$4 = function (C) {
	  if (isCallable$c(C) && (!setPrototypeOf$3 || isPrototypeOf$5(TypedArray$1, C))) return C;
	  throw TypeError$f(tryToString$1(C) + ' is not a typed array constructor');
	};

	var exportTypedArrayMethod$o = function (KEY, property, forced, options) {
	  if (!DESCRIPTORS$n) return;
	  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
	    var TypedArrayConstructor = global$W[ARRAY];
	    if (TypedArrayConstructor && hasOwn$g(TypedArrayConstructor.prototype, KEY)) try {
	      delete TypedArrayConstructor.prototype[KEY];
	    } catch (error) {
	      // old WebKit bug - some methods are non-configurable
	      try {
	        TypedArrayConstructor.prototype[KEY] = property;
	      } catch (error2) { /* empty */ }
	    }
	  }
	  if (!TypedArrayPrototype$2[KEY] || forced) {
	    redefine$e(TypedArrayPrototype$2, KEY, forced ? property
	      : NATIVE_ARRAY_BUFFER_VIEWS$3 && Int8ArrayPrototype$1[KEY] || property, options);
	  }
	};

	var exportTypedArrayStaticMethod$2 = function (KEY, property, forced) {
	  var ARRAY, TypedArrayConstructor;
	  if (!DESCRIPTORS$n) return;
	  if (setPrototypeOf$3) {
	    if (forced) for (ARRAY in TypedArrayConstructorsList) {
	      TypedArrayConstructor = global$W[ARRAY];
	      if (TypedArrayConstructor && hasOwn$g(TypedArrayConstructor, KEY)) try {
	        delete TypedArrayConstructor[KEY];
	      } catch (error) { /* empty */ }
	    }
	    if (!TypedArray$1[KEY] || forced) {
	      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
	      try {
	        return redefine$e(TypedArray$1, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS$3 && TypedArray$1[KEY] || property);
	      } catch (error) { /* empty */ }
	    } else return;
	  }
	  for (ARRAY in TypedArrayConstructorsList) {
	    TypedArrayConstructor = global$W[ARRAY];
	    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
	      redefine$e(TypedArrayConstructor, KEY, property);
	    }
	  }
	};

	for (NAME$1 in TypedArrayConstructorsList) {
	  Constructor = global$W[NAME$1];
	  Prototype = Constructor && Constructor.prototype;
	  if (Prototype) createNonEnumerableProperty$6(Prototype, TYPED_ARRAY_CONSTRUCTOR$2, Constructor);
	  else NATIVE_ARRAY_BUFFER_VIEWS$3 = false;
	}

	for (NAME$1 in BigIntArrayConstructorsList) {
	  Constructor = global$W[NAME$1];
	  Prototype = Constructor && Constructor.prototype;
	  if (Prototype) createNonEnumerableProperty$6(Prototype, TYPED_ARRAY_CONSTRUCTOR$2, Constructor);
	}

	// WebKit bug - typed arrays constructors prototype is Object.prototype
	if (!NATIVE_ARRAY_BUFFER_VIEWS$3 || !isCallable$c(TypedArray$1) || TypedArray$1 === Function.prototype) {
	  // eslint-disable-next-line no-shadow -- safe
	  TypedArray$1 = function TypedArray() {
	    throw TypeError$f('Incorrect invocation');
	  };
	  if (NATIVE_ARRAY_BUFFER_VIEWS$3) for (NAME$1 in TypedArrayConstructorsList) {
	    if (global$W[NAME$1]) setPrototypeOf$3(global$W[NAME$1], TypedArray$1);
	  }
	}

	if (!NATIVE_ARRAY_BUFFER_VIEWS$3 || !TypedArrayPrototype$2 || TypedArrayPrototype$2 === ObjectPrototype$1) {
	  TypedArrayPrototype$2 = TypedArray$1.prototype;
	  if (NATIVE_ARRAY_BUFFER_VIEWS$3) for (NAME$1 in TypedArrayConstructorsList) {
	    if (global$W[NAME$1]) setPrototypeOf$3(global$W[NAME$1].prototype, TypedArrayPrototype$2);
	  }
	}

	// WebKit bug - one more object in Uint8ClampedArray prototype chain
	if (NATIVE_ARRAY_BUFFER_VIEWS$3 && getPrototypeOf$5(Uint8ClampedArrayPrototype) !== TypedArrayPrototype$2) {
	  setPrototypeOf$3(Uint8ClampedArrayPrototype, TypedArrayPrototype$2);
	}

	if (DESCRIPTORS$n && !hasOwn$g(TypedArrayPrototype$2, TO_STRING_TAG$1)) {
	  TYPED_ARRAY_TAG_REQUIRED = true;
	  defineProperty$e(TypedArrayPrototype$2, TO_STRING_TAG$1, { get: function () {
	    return isObject$w(this) ? this[TYPED_ARRAY_TAG$1] : undefined;
	  } });
	  for (NAME$1 in TypedArrayConstructorsList) if (global$W[NAME$1]) {
	    createNonEnumerableProperty$6(global$W[NAME$1], TYPED_ARRAY_TAG$1, NAME$1);
	  }
	}

	var arrayBufferViewCore = {
	  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS$3,
	  TYPED_ARRAY_CONSTRUCTOR: TYPED_ARRAY_CONSTRUCTOR$2,
	  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG$1,
	  aTypedArray: aTypedArray$n,
	  aTypedArrayConstructor: aTypedArrayConstructor$4,
	  exportTypedArrayMethod: exportTypedArrayMethod$o,
	  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod$2,
	  isView: isView,
	  isTypedArray: isTypedArray$4,
	  TypedArray: TypedArray$1,
	  TypedArrayPrototype: TypedArrayPrototype$2
	};

	var $$24 = _export;
	var ArrayBufferViewCore$q = arrayBufferViewCore;

	var NATIVE_ARRAY_BUFFER_VIEWS$2 = ArrayBufferViewCore$q.NATIVE_ARRAY_BUFFER_VIEWS;

	// `ArrayBuffer.isView` method
	// https://tc39.es/ecma262/#sec-arraybuffer.isview
	$$24({ target: 'ArrayBuffer', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS$2 }, {
	  isView: ArrayBufferViewCore$q.isView
	});

	var global$V = global$1F;
	var isConstructor$1 = isConstructor$6;
	var tryToString = tryToString$5;

	var TypeError$e = global$V.TypeError;

	// `Assert: IsConstructor(argument) is true`
	var aConstructor$3 = function (argument) {
	  if (isConstructor$1(argument)) return argument;
	  throw TypeError$e(tryToString(argument) + ' is not a constructor');
	};

	var anObject$q = anObject$C;
	var aConstructor$2 = aConstructor$3;
	var wellKnownSymbol$e = wellKnownSymbol$y;

	var SPECIES$2 = wellKnownSymbol$e('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.es/ecma262/#sec-speciesconstructor
	var speciesConstructor$6 = function (O, defaultConstructor) {
	  var C = anObject$q(O).constructor;
	  var S;
	  return C === undefined || (S = anObject$q(C)[SPECIES$2]) == undefined ? defaultConstructor : aConstructor$2(S);
	};

	var $$23 = _export;
	var uncurryThis$U = functionUncurryThis;
	var fails$W = fails$1f;
	var ArrayBufferModule$2 = arrayBuffer;
	var anObject$p = anObject$C;
	var toAbsoluteIndex$2 = toAbsoluteIndex$9;
	var toLength$9 = toLength$d;
	var speciesConstructor$5 = speciesConstructor$6;

	var ArrayBuffer$3 = ArrayBufferModule$2.ArrayBuffer;
	var DataView$4 = ArrayBufferModule$2.DataView;
	var DataViewPrototype = DataView$4.prototype;
	var un$ArrayBufferSlice = uncurryThis$U(ArrayBuffer$3.prototype.slice);
	var getUint8 = uncurryThis$U(DataViewPrototype.getUint8);
	var setUint8 = uncurryThis$U(DataViewPrototype.setUint8);

	var INCORRECT_SLICE = fails$W(function () {
	  return !new ArrayBuffer$3(2).slice(1, undefined).byteLength;
	});

	// `ArrayBuffer.prototype.slice` method
	// https://tc39.es/ecma262/#sec-arraybuffer.prototype.slice
	$$23({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
	  slice: function slice(start, end) {
	    if (un$ArrayBufferSlice && end === undefined) {
	      return un$ArrayBufferSlice(anObject$p(this), start); // FF fix
	    }
	    var length = anObject$p(this).byteLength;
	    var first = toAbsoluteIndex$2(start, length);
	    var fin = toAbsoluteIndex$2(end === undefined ? length : end, length);
	    var result = new (speciesConstructor$5(this, ArrayBuffer$3))(toLength$9(fin - first));
	    var viewSource = new DataView$4(this);
	    var viewTarget = new DataView$4(result);
	    var index = 0;
	    while (first < fin) {
	      setUint8(viewTarget, index++, getUint8(viewSource, first++));
	    } return result;
	  }
	});

	var $$22 = _export;
	var ArrayBufferModule$1 = arrayBuffer;
	var NATIVE_ARRAY_BUFFER = arrayBufferNative;

	// `DataView` constructor
	// https://tc39.es/ecma262/#sec-dataview-constructor
	$$22({ global: true, forced: !NATIVE_ARRAY_BUFFER }, {
	  DataView: ArrayBufferModule$1.DataView
	});

	var $$21 = _export;
	var uncurryThis$T = functionUncurryThis;
	var fails$V = fails$1f;

	var FORCED$p = fails$V(function () {
	  return new Date(16e11).getYear() !== 120;
	});

	var getFullYear = uncurryThis$T(Date.prototype.getFullYear);

	// `Date.prototype.getYear` method
	// https://tc39.es/ecma262/#sec-date.prototype.getyear
	$$21({ target: 'Date', proto: true, forced: FORCED$p }, {
	  getYear: function getYear() {
	    return getFullYear(this) - 1900;
	  }
	});

	var $$20 = _export;
	var global$U = global$1F;
	var uncurryThis$S = functionUncurryThis;

	var Date$2 = global$U.Date;
	var getTime$5 = uncurryThis$S(Date$2.prototype.getTime);

	// `Date.now` method
	// https://tc39.es/ecma262/#sec-date.now
	$$20({ target: 'Date', stat: true }, {
	  now: function now() {
	    return getTime$5(new Date$2());
	  }
	});

	var $$1$ = _export;
	var uncurryThis$R = functionUncurryThis;
	var toIntegerOrInfinity$9 = toIntegerOrInfinity$i;

	var DatePrototype$3 = Date.prototype;
	var getTime$4 = uncurryThis$R(DatePrototype$3.getTime);
	var setFullYear = uncurryThis$R(DatePrototype$3.setFullYear);

	// `Date.prototype.setYear` method
	// https://tc39.es/ecma262/#sec-date.prototype.setyear
	$$1$({ target: 'Date', proto: true }, {
	  setYear: function setYear(year) {
	    // validate
	    getTime$4(this);
	    var yi = toIntegerOrInfinity$9(year);
	    var yyyy = 0 <= yi && yi <= 99 ? yi + 1900 : yi;
	    return setFullYear(this, yyyy);
	  }
	});

	var $$1_ = _export;

	// `Date.prototype.toGMTString` method
	// https://tc39.es/ecma262/#sec-date.prototype.togmtstring
	$$1_({ target: 'Date', proto: true }, {
	  toGMTString: Date.prototype.toUTCString
	});

	var global$T = global$1F;
	var toIntegerOrInfinity$8 = toIntegerOrInfinity$i;
	var toString$y = toString$C;
	var requireObjectCoercible$f = requireObjectCoercible$i;

	var RangeError$a = global$T.RangeError;

	// `String.prototype.repeat` method implementation
	// https://tc39.es/ecma262/#sec-string.prototype.repeat
	var stringRepeat = function repeat(count) {
	  var str = toString$y(requireObjectCoercible$f(this));
	  var result = '';
	  var n = toIntegerOrInfinity$8(count);
	  if (n < 0 || n == Infinity) throw RangeError$a('Wrong number of repetitions');
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
	  return result;
	};

	// https://github.com/tc39/proposal-string-pad-start-end
	var uncurryThis$Q = functionUncurryThis;
	var toLength$8 = toLength$d;
	var toString$x = toString$C;
	var $repeat$2 = stringRepeat;
	var requireObjectCoercible$e = requireObjectCoercible$i;

	var repeat$3 = uncurryThis$Q($repeat$2);
	var stringSlice$e = uncurryThis$Q(''.slice);
	var ceil$1 = Math.ceil;

	// `String.prototype.{ padStart, padEnd }` methods implementation
	var createMethod$3 = function (IS_END) {
	  return function ($this, maxLength, fillString) {
	    var S = toString$x(requireObjectCoercible$e($this));
	    var intMaxLength = toLength$8(maxLength);
	    var stringLength = S.length;
	    var fillStr = fillString === undefined ? ' ' : toString$x(fillString);
	    var fillLen, stringFiller;
	    if (intMaxLength <= stringLength || fillStr == '') return S;
	    fillLen = intMaxLength - stringLength;
	    stringFiller = repeat$3(fillStr, ceil$1(fillLen / fillStr.length));
	    if (stringFiller.length > fillLen) stringFiller = stringSlice$e(stringFiller, 0, fillLen);
	    return IS_END ? S + stringFiller : stringFiller + S;
	  };
	};

	var stringPad = {
	  // `String.prototype.padStart` method
	  // https://tc39.es/ecma262/#sec-string.prototype.padstart
	  start: createMethod$3(false),
	  // `String.prototype.padEnd` method
	  // https://tc39.es/ecma262/#sec-string.prototype.padend
	  end: createMethod$3(true)
	};

	var global$S = global$1F;
	var uncurryThis$P = functionUncurryThis;
	var fails$U = fails$1f;
	var padStart = stringPad.start;

	var RangeError$9 = global$S.RangeError;
	var abs$9 = Math.abs;
	var DatePrototype$2 = Date.prototype;
	var n$DateToISOString = DatePrototype$2.toISOString;
	var getTime$3 = uncurryThis$P(DatePrototype$2.getTime);
	var getUTCDate = uncurryThis$P(DatePrototype$2.getUTCDate);
	var getUTCFullYear = uncurryThis$P(DatePrototype$2.getUTCFullYear);
	var getUTCHours = uncurryThis$P(DatePrototype$2.getUTCHours);
	var getUTCMilliseconds = uncurryThis$P(DatePrototype$2.getUTCMilliseconds);
	var getUTCMinutes = uncurryThis$P(DatePrototype$2.getUTCMinutes);
	var getUTCMonth = uncurryThis$P(DatePrototype$2.getUTCMonth);
	var getUTCSeconds = uncurryThis$P(DatePrototype$2.getUTCSeconds);

	// `Date.prototype.toISOString` method implementation
	// https://tc39.es/ecma262/#sec-date.prototype.toisostring
	// PhantomJS / old WebKit fails here:
	var dateToIsoString = (fails$U(function () {
	  return n$DateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
	}) || !fails$U(function () {
	  n$DateToISOString.call(new Date(NaN));
	})) ? function toISOString() {
	  if (!isFinite(getTime$3(this))) throw RangeError$9('Invalid time value');
	  var date = this;
	  var year = getUTCFullYear(date);
	  var milliseconds = getUTCMilliseconds(date);
	  var sign = year < 0 ? '-' : year > 9999 ? '+' : '';
	  return sign + padStart(abs$9(year), sign ? 6 : 4, 0) +
	    '-' + padStart(getUTCMonth(date) + 1, 2, 0) +
	    '-' + padStart(getUTCDate(date), 2, 0) +
	    'T' + padStart(getUTCHours(date), 2, 0) +
	    ':' + padStart(getUTCMinutes(date), 2, 0) +
	    ':' + padStart(getUTCSeconds(date), 2, 0) +
	    '.' + padStart(milliseconds, 3, 0) +
	    'Z';
	} : n$DateToISOString;

	var $$1Z = _export;
	var toISOString$2 = dateToIsoString;

	// `Date.prototype.toISOString` method
	// https://tc39.es/ecma262/#sec-date.prototype.toisostring
	// PhantomJS / old WebKit has a broken implementations
	$$1Z({ target: 'Date', proto: true, forced: Date.prototype.toISOString !== toISOString$2 }, {
	  toISOString: toISOString$2
	});

	var $$1Y = _export;
	var fails$T = fails$1f;
	var toObject$b = toObject$q;
	var toPrimitive$1 = toPrimitive$3;

	var FORCED$o = fails$T(function () {
	  return new Date(NaN).toJSON() !== null
	    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
	});

	// `Date.prototype.toJSON` method
	// https://tc39.es/ecma262/#sec-date.prototype.tojson
	$$1Y({ target: 'Date', proto: true, forced: FORCED$o }, {
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  toJSON: function toJSON(key) {
	    var O = toObject$b(this);
	    var pv = toPrimitive$1(O, 'number');
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});

	var global$R = global$1F;
	var anObject$o = anObject$C;
	var ordinaryToPrimitive = ordinaryToPrimitive$2;

	var TypeError$d = global$R.TypeError;

	// `Date.prototype[@@toPrimitive](hint)` method implementation
	// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive
	var dateToPrimitive$1 = function (hint) {
	  anObject$o(this);
	  if (hint === 'string' || hint === 'default') hint = 'string';
	  else if (hint !== 'number') throw TypeError$d('Incorrect hint');
	  return ordinaryToPrimitive(this, hint);
	};

	var hasOwn$f = hasOwnProperty_1;
	var redefine$d = redefineExports;
	var dateToPrimitive = dateToPrimitive$1;
	var wellKnownSymbol$d = wellKnownSymbol$y;

	var TO_PRIMITIVE = wellKnownSymbol$d('toPrimitive');
	var DatePrototype$1 = Date.prototype;

	// `Date.prototype[@@toPrimitive]` method
	// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive
	if (!hasOwn$f(DatePrototype$1, TO_PRIMITIVE)) {
	  redefine$d(DatePrototype$1, TO_PRIMITIVE, dateToPrimitive);
	}

	var uncurryThis$O = functionUncurryThis;
	var redefine$c = redefineExports;

	var DatePrototype = Date.prototype;
	var INVALID_DATE = 'Invalid Date';
	var TO_STRING$1 = 'toString';
	var un$DateToString = uncurryThis$O(DatePrototype[TO_STRING$1]);
	var getTime$2 = uncurryThis$O(DatePrototype.getTime);

	// `Date.prototype.toString` method
	// https://tc39.es/ecma262/#sec-date.prototype.tostring
	if (String(new Date(NaN)) != INVALID_DATE) {
	  redefine$c(DatePrototype, TO_STRING$1, function toString() {
	    var value = getTime$2(this);
	    // eslint-disable-next-line no-self-compare -- NaN check
	    return value === value ? un$DateToString(this) : INVALID_DATE;
	  });
	}

	var $$1X = _export;
	var uncurryThis$N = functionUncurryThis;
	var toString$w = toString$C;

	var charAt$e = uncurryThis$N(''.charAt);
	var charCodeAt$5 = uncurryThis$N(''.charCodeAt);
	var exec$9 = uncurryThis$N(/./.exec);
	var numberToString$2 = uncurryThis$N(1.0.toString);
	var toUpperCase = uncurryThis$N(''.toUpperCase);

	var raw = /[\w*+\-./@]/;

	var hex$1 = function (code, length) {
	  var result = numberToString$2(code, 16);
	  while (result.length < length) result = '0' + result;
	  return result;
	};

	// `escape` method
	// https://tc39.es/ecma262/#sec-escape-string
	$$1X({ global: true }, {
	  escape: function escape(string) {
	    var str = toString$w(string);
	    var result = '';
	    var length = str.length;
	    var index = 0;
	    var chr, code;
	    while (index < length) {
	      chr = charAt$e(str, index++);
	      if (exec$9(raw, chr)) {
	        result += chr;
	      } else {
	        code = charCodeAt$5(chr, 0);
	        if (code < 256) {
	          result += '%' + hex$1(code, 2);
	        } else {
	          result += '%u' + toUpperCase(hex$1(code, 4));
	        }
	      }
	    } return result;
	  }
	});

	var global$Q = global$1F;
	var uncurryThis$M = functionUncurryThis;
	var aCallable$9 = aCallable$g;
	var isObject$v = isObject$I;
	var hasOwn$e = hasOwnProperty_1;
	var arraySlice$7 = arraySlice$b;
	var NATIVE_BIND = functionBindNative;

	var Function$3 = global$Q.Function;
	var concat$2 = uncurryThis$M([].concat);
	var join$6 = uncurryThis$M([].join);
	var factories = {};

	var construct = function (C, argsLength, args) {
	  if (!hasOwn$e(factories, argsLength)) {
	    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
	    factories[argsLength] = Function$3('C,a', 'return new C(' + join$6(list, ',') + ')');
	  } return factories[argsLength](C, args);
	};

	// `Function.prototype.bind` method implementation
	// https://tc39.es/ecma262/#sec-function.prototype.bind
	var functionBind = NATIVE_BIND ? Function$3.bind : function bind(that /* , ...args */) {
	  var F = aCallable$9(this);
	  var Prototype = F.prototype;
	  var partArgs = arraySlice$7(arguments, 1);
	  var boundFunction = function bound(/* args... */) {
	    var args = concat$2(partArgs, arraySlice$7(arguments));
	    return this instanceof boundFunction ? construct(F, args.length, args) : F.apply(that, args);
	  };
	  if (isObject$v(Prototype)) boundFunction.prototype = Prototype;
	  return boundFunction;
	};

	var $$1W = _export;
	var bind$8 = functionBind;

	// `Function.prototype.bind` method
	// https://tc39.es/ecma262/#sec-function.prototype.bind
	$$1W({ target: 'Function', proto: true, forced: Function.bind !== bind$8 }, {
	  bind: bind$8
	});

	var isCallable$b = isCallable$v;
	var isObject$u = isObject$I;
	var definePropertyModule$5 = objectDefineProperty;
	var getPrototypeOf$4 = objectGetPrototypeOf$1;
	var wellKnownSymbol$c = wellKnownSymbol$y;

	var HAS_INSTANCE = wellKnownSymbol$c('hasInstance');
	var FunctionPrototype$1 = Function.prototype;

	// `Function.prototype[@@hasInstance]` method
	// https://tc39.es/ecma262/#sec-function.prototype-@@hasinstance
	if (!(HAS_INSTANCE in FunctionPrototype$1)) {
	  definePropertyModule$5.f(FunctionPrototype$1, HAS_INSTANCE, { value: function (O) {
	    if (!isCallable$b(this) || !isObject$u(O)) return false;
	    var P = this.prototype;
	    if (!isObject$u(P)) return O instanceof this;
	    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	    while (O = getPrototypeOf$4(O)) if (P === O) return true;
	    return false;
	  } });
	}

	var DESCRIPTORS$m = descriptors;
	var FUNCTION_NAME_EXISTS = functionName.EXISTS;
	var uncurryThis$L = functionUncurryThis;
	var defineProperty$d = objectDefineProperty.f;

	var FunctionPrototype = Function.prototype;
	var functionToString = uncurryThis$L(FunctionPrototype.toString);
	var nameRE = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/;
	var regExpExec$4 = uncurryThis$L(nameRE.exec);
	var NAME = 'name';

	// Function instances `.name` property
	// https://tc39.es/ecma262/#sec-function-instances-name
	if (DESCRIPTORS$m && !FUNCTION_NAME_EXISTS) {
	  defineProperty$d(FunctionPrototype, NAME, {
	    configurable: true,
	    get: function () {
	      try {
	        return regExpExec$4(nameRE, functionToString(this))[1];
	      } catch (error) {
	        return '';
	      }
	    }
	  });
	}

	var $$1V = _export;
	var global$P = global$1F;

	// `globalThis` object
	// https://tc39.es/ecma262/#sec-globalthis
	$$1V({ global: true }, {
	  globalThis: global$P
	});

	var $$1U = _export;
	var global$O = global$1F;
	var getBuiltIn$b = getBuiltIn$l;
	var apply$9 = functionApply$1;
	var uncurryThis$K = functionUncurryThis;
	var fails$S = fails$1f;

	var Array$2 = global$O.Array;
	var $stringify = getBuiltIn$b('JSON', 'stringify');
	var exec$8 = uncurryThis$K(/./.exec);
	var charAt$d = uncurryThis$K(''.charAt);
	var charCodeAt$4 = uncurryThis$K(''.charCodeAt);
	var replace$9 = uncurryThis$K(''.replace);
	var numberToString$1 = uncurryThis$K(1.0.toString);

	var tester = /[\uD800-\uDFFF]/g;
	var low = /^[\uD800-\uDBFF]$/;
	var hi = /^[\uDC00-\uDFFF]$/;

	var fix = function (match, offset, string) {
	  var prev = charAt$d(string, offset - 1);
	  var next = charAt$d(string, offset + 1);
	  if ((exec$8(low, match) && !exec$8(hi, next)) || (exec$8(hi, match) && !exec$8(low, prev))) {
	    return '\\u' + numberToString$1(charCodeAt$4(match, 0), 16);
	  } return match;
	};

	var FORCED$n = fails$S(function () {
	  return $stringify('\uDF06\uD834') !== '"\\udf06\\ud834"'
	    || $stringify('\uDEAD') !== '"\\udead"';
	});

	if ($stringify) {
	  // `JSON.stringify` method
	  // https://tc39.es/ecma262/#sec-json.stringify
	  // https://github.com/tc39/proposal-well-formed-stringify
	  $$1U({ target: 'JSON', stat: true, forced: FORCED$n }, {
	    // eslint-disable-next-line no-unused-vars -- required for `.length`
	    stringify: function stringify(it, replacer, space) {
	      for (var i = 0, l = arguments.length, args = Array$2(l); i < l; i++) args[i] = arguments[i];
	      var result = apply$9($stringify, null, args);
	      return typeof result == 'string' ? replace$9(result, tester, fix) : result;
	    }
	  });
	}

	var global$N = global$1F;
	var setToStringTag$7 = setToStringTag$c;

	// JSON[@@toStringTag] property
	// https://tc39.es/ecma262/#sec-json-@@tostringtag
	setToStringTag$7(global$N.JSON, 'JSON', true);

	var internalMetadata = {exports: {}};

	// FF26- bug: ArrayBuffers are non-extensible, but Object.isExtensible does not report it
	var fails$R = fails$1f;

	var arrayBufferNonExtensible = fails$R(function () {
	  if (typeof ArrayBuffer == 'function') {
	    var buffer = new ArrayBuffer(8);
	    // eslint-disable-next-line es/no-object-isextensible, es/no-object-defineproperty -- safe
	    if (Object.isExtensible(buffer)) Object.defineProperty(buffer, 'a', { value: 8 });
	  }
	});

	var fails$Q = fails$1f;
	var isObject$t = isObject$I;
	var classof$b = classofRaw$1;
	var ARRAY_BUFFER_NON_EXTENSIBLE$2 = arrayBufferNonExtensible;

	// eslint-disable-next-line es/no-object-isextensible -- safe
	var $isExtensible$2 = Object.isExtensible;
	var FAILS_ON_PRIMITIVES$9 = fails$Q(function () { });

	// `Object.isExtensible` method
	// https://tc39.es/ecma262/#sec-object.isextensible
	var objectIsExtensible = (FAILS_ON_PRIMITIVES$9 || ARRAY_BUFFER_NON_EXTENSIBLE$2) ? function isExtensible(it) {
	  if (!isObject$t(it)) return false;
	  if (ARRAY_BUFFER_NON_EXTENSIBLE$2 && classof$b(it) == 'ArrayBuffer') return false;
	  return $isExtensible$2 ? $isExtensible$2(it) : true;
	} : $isExtensible$2;

	var fails$P = fails$1f;

	var freezing = !fails$P(function () {
	  // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
	  return Object.isExtensible(Object.preventExtensions({}));
	});

	var $$1T = _export;
	var uncurryThis$J = functionUncurryThis;
	var hiddenKeys = hiddenKeys$6;
	var isObject$s = isObject$I;
	var hasOwn$d = hasOwnProperty_1;
	var defineProperty$c = objectDefineProperty.f;
	var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
	var getOwnPropertyNamesExternalModule = objectGetOwnPropertyNamesExternal;
	var isExtensible$1 = objectIsExtensible;
	var uid$1 = uid$6;
	var FREEZING$4 = freezing;

	var REQUIRED = false;
	var METADATA = uid$1('meta');
	var id$1 = 0;

	var setMetadata = function (it) {
	  defineProperty$c(it, METADATA, { value: {
	    objectID: 'O' + id$1++, // object ID
	    weakData: {}          // weak collections IDs
	  } });
	};

	var fastKey$1 = function (it, create) {
	  // return a primitive with prefix
	  if (!isObject$s(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!hasOwn$d(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible$1(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMetadata(it);
	  // return object ID
	  } return it[METADATA].objectID;
	};

	var getWeakData$1 = function (it, create) {
	  if (!hasOwn$d(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible$1(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMetadata(it);
	  // return the store of weak collections IDs
	  } return it[METADATA].weakData;
	};

	// add metadata on freeze-family methods calling
	var onFreeze$3 = function (it) {
	  if (FREEZING$4 && REQUIRED && isExtensible$1(it) && !hasOwn$d(it, METADATA)) setMetadata(it);
	  return it;
	};

	var enable = function () {
	  meta.enable = function () { /* empty */ };
	  REQUIRED = true;
	  var getOwnPropertyNames = getOwnPropertyNamesModule.f;
	  var splice = uncurryThis$J([].splice);
	  var test = {};
	  test[METADATA] = 1;

	  // prevent exposing of metadata key
	  if (getOwnPropertyNames(test).length) {
	    getOwnPropertyNamesModule.f = function (it) {
	      var result = getOwnPropertyNames(it);
	      for (var i = 0, length = result.length; i < length; i++) {
	        if (result[i] === METADATA) {
	          splice(result, i, 1);
	          break;
	        }
	      } return result;
	    };

	    $$1T({ target: 'Object', stat: true, forced: true }, {
	      getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
	    });
	  }
	};

	var meta = internalMetadata.exports = {
	  enable: enable,
	  fastKey: fastKey$1,
	  getWeakData: getWeakData$1,
	  onFreeze: onFreeze$3
	};

	hiddenKeys[METADATA] = true;

	var internalMetadataExports = internalMetadata.exports;

	var $$1S = _export;
	var global$M = global$1F;
	var uncurryThis$I = functionUncurryThis;
	var isForced$3 = isForced_1;
	var redefine$b = redefineExports;
	var InternalMetadataModule$1 = internalMetadataExports;
	var iterate$7 = iterate$9;
	var anInstance$8 = anInstance$a;
	var isCallable$a = isCallable$v;
	var isObject$r = isObject$I;
	var fails$O = fails$1f;
	var checkCorrectnessOfIteration$2 = checkCorrectnessOfIteration$4;
	var setToStringTag$6 = setToStringTag$c;
	var inheritIfRequired$4 = inheritIfRequired$6;

	var collection$4 = function (CONSTRUCTOR_NAME, wrapper, common) {
	  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
	  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var NativeConstructor = global$M[CONSTRUCTOR_NAME];
	  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
	  var Constructor = NativeConstructor;
	  var exported = {};

	  var fixMethod = function (KEY) {
	    var uncurriedNativeMethod = uncurryThis$I(NativePrototype[KEY]);
	    redefine$b(NativePrototype, KEY,
	      KEY == 'add' ? function add(value) {
	        uncurriedNativeMethod(this, value === 0 ? 0 : value);
	        return this;
	      } : KEY == 'delete' ? function (key) {
	        return IS_WEAK && !isObject$r(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
	      } : KEY == 'get' ? function get(key) {
	        return IS_WEAK && !isObject$r(key) ? undefined : uncurriedNativeMethod(this, key === 0 ? 0 : key);
	      } : KEY == 'has' ? function has(key) {
	        return IS_WEAK && !isObject$r(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
	      } : function set(key, value) {
	        uncurriedNativeMethod(this, key === 0 ? 0 : key, value);
	        return this;
	      }
	    );
	  };

	  var REPLACE = isForced$3(
	    CONSTRUCTOR_NAME,
	    !isCallable$a(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails$O(function () {
	      new NativeConstructor().entries().next();
	    }))
	  );

	  if (REPLACE) {
	    // create collection constructor
	    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
	    InternalMetadataModule$1.enable();
	  } else if (isForced$3(CONSTRUCTOR_NAME, true)) {
	    var instance = new Constructor();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails$O(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    // eslint-disable-next-line no-new -- required for testing
	    var ACCEPT_ITERABLES = checkCorrectnessOfIteration$2(function (iterable) { new NativeConstructor(iterable); });
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails$O(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new NativeConstructor();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });

	    if (!ACCEPT_ITERABLES) {
	      Constructor = wrapper(function (dummy, iterable) {
	        anInstance$8(dummy, NativePrototype);
	        var that = inheritIfRequired$4(new NativeConstructor(), dummy, Constructor);
	        if (iterable != undefined) iterate$7(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
	        return that;
	      });
	      Constructor.prototype = NativePrototype;
	      NativePrototype.constructor = Constructor;
	    }

	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }

	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

	    // weak collections should not contains .clear method
	    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
	  }

	  exported[CONSTRUCTOR_NAME] = Constructor;
	  $$1S({ global: true, forced: Constructor != NativeConstructor }, exported);

	  setToStringTag$6(Constructor, CONSTRUCTOR_NAME);

	  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

	  return Constructor;
	};

	var defineProperty$b = objectDefineProperty.f;
	var create$6 = objectCreate$1;
	var redefineAll$4 = redefineAll$6;
	var bind$7 = functionBindContext;
	var anInstance$7 = anInstance$a;
	var iterate$6 = iterate$9;
	var defineIterator$1 = defineIterator$3;
	var setSpecies$3 = setSpecies$6;
	var DESCRIPTORS$l = descriptors;
	var fastKey = internalMetadataExports.fastKey;
	var InternalStateModule$8 = internalState;

	var setInternalState$8 = InternalStateModule$8.set;
	var internalStateGetterFor$1 = InternalStateModule$8.getterFor;

	var collectionStrong$2 = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var Constructor = wrapper(function (that, iterable) {
	      anInstance$7(that, Prototype);
	      setInternalState$8(that, {
	        type: CONSTRUCTOR_NAME,
	        index: create$6(null),
	        first: undefined,
	        last: undefined,
	        size: 0
	      });
	      if (!DESCRIPTORS$l) that.size = 0;
	      if (iterable != undefined) iterate$6(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
	    });

	    var Prototype = Constructor.prototype;

	    var getInternalState = internalStateGetterFor$1(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var entry = getEntry(that, key);
	      var previous, index;
	      // change existing entry
	      if (entry) {
	        entry.value = value;
	      // create new entry
	      } else {
	        state.last = entry = {
	          index: index = fastKey(key, true),
	          key: key,
	          value: value,
	          previous: previous = state.last,
	          next: undefined,
	          removed: false
	        };
	        if (!state.first) state.first = entry;
	        if (previous) previous.next = entry;
	        if (DESCRIPTORS$l) state.size++;
	        else that.size++;
	        // add to index
	        if (index !== 'F') state.index[index] = entry;
	      } return that;
	    };

	    var getEntry = function (that, key) {
	      var state = getInternalState(that);
	      // fast case
	      var index = fastKey(key);
	      var entry;
	      if (index !== 'F') return state.index[index];
	      // frozen object case
	      for (entry = state.first; entry; entry = entry.next) {
	        if (entry.key == key) return entry;
	      }
	    };

	    redefineAll$4(Prototype, {
	      // `{ Map, Set }.prototype.clear()` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.clear
	      // https://tc39.es/ecma262/#sec-set.prototype.clear
	      clear: function clear() {
	        var that = this;
	        var state = getInternalState(that);
	        var data = state.index;
	        var entry = state.first;
	        while (entry) {
	          entry.removed = true;
	          if (entry.previous) entry.previous = entry.previous.next = undefined;
	          delete data[entry.index];
	          entry = entry.next;
	        }
	        state.first = state.last = undefined;
	        if (DESCRIPTORS$l) state.size = 0;
	        else that.size = 0;
	      },
	      // `{ Map, Set }.prototype.delete(key)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.delete
	      // https://tc39.es/ecma262/#sec-set.prototype.delete
	      'delete': function (key) {
	        var that = this;
	        var state = getInternalState(that);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.next;
	          var prev = entry.previous;
	          delete state.index[entry.index];
	          entry.removed = true;
	          if (prev) prev.next = next;
	          if (next) next.previous = prev;
	          if (state.first == entry) state.first = next;
	          if (state.last == entry) state.last = prev;
	          if (DESCRIPTORS$l) state.size--;
	          else that.size--;
	        } return !!entry;
	      },
	      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.foreach
	      // https://tc39.es/ecma262/#sec-set.prototype.foreach
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        var state = getInternalState(this);
	        var boundFunction = bind$7(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	        var entry;
	        while (entry = entry ? entry.next : state.first) {
	          boundFunction(entry.value, entry.key, this);
	          // revert to the last existing entry
	          while (entry && entry.removed) entry = entry.previous;
	        }
	      },
	      // `{ Map, Set}.prototype.has(key)` methods
	      // https://tc39.es/ecma262/#sec-map.prototype.has
	      // https://tc39.es/ecma262/#sec-set.prototype.has
	      has: function has(key) {
	        return !!getEntry(this, key);
	      }
	    });

	    redefineAll$4(Prototype, IS_MAP ? {
	      // `Map.prototype.get(key)` method
	      // https://tc39.es/ecma262/#sec-map.prototype.get
	      get: function get(key) {
	        var entry = getEntry(this, key);
	        return entry && entry.value;
	      },
	      // `Map.prototype.set(key, value)` method
	      // https://tc39.es/ecma262/#sec-map.prototype.set
	      set: function set(key, value) {
	        return define(this, key === 0 ? 0 : key, value);
	      }
	    } : {
	      // `Set.prototype.add(value)` method
	      // https://tc39.es/ecma262/#sec-set.prototype.add
	      add: function add(value) {
	        return define(this, value = value === 0 ? 0 : value, value);
	      }
	    });
	    if (DESCRIPTORS$l) defineProperty$b(Prototype, 'size', {
	      get: function () {
	        return getInternalState(this).size;
	      }
	    });
	    return Constructor;
	  },
	  setStrong: function (Constructor, CONSTRUCTOR_NAME, IS_MAP) {
	    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
	    var getInternalCollectionState = internalStateGetterFor$1(CONSTRUCTOR_NAME);
	    var getInternalIteratorState = internalStateGetterFor$1(ITERATOR_NAME);
	    // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
	    // https://tc39.es/ecma262/#sec-map.prototype.entries
	    // https://tc39.es/ecma262/#sec-map.prototype.keys
	    // https://tc39.es/ecma262/#sec-map.prototype.values
	    // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
	    // https://tc39.es/ecma262/#sec-set.prototype.entries
	    // https://tc39.es/ecma262/#sec-set.prototype.keys
	    // https://tc39.es/ecma262/#sec-set.prototype.values
	    // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
	    defineIterator$1(Constructor, CONSTRUCTOR_NAME, function (iterated, kind) {
	      setInternalState$8(this, {
	        type: ITERATOR_NAME,
	        target: iterated,
	        state: getInternalCollectionState(iterated),
	        kind: kind,
	        last: undefined
	      });
	    }, function () {
	      var state = getInternalIteratorState(this);
	      var kind = state.kind;
	      var entry = state.last;
	      // revert to the last existing entry
	      while (entry && entry.removed) entry = entry.previous;
	      // get next entry
	      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
	        // or finish the iteration
	        state.target = undefined;
	        return { value: undefined, done: true };
	      }
	      // return step by kind
	      if (kind == 'keys') return { value: entry.key, done: false };
	      if (kind == 'values') return { value: entry.value, done: false };
	      return { value: [entry.key, entry.value], done: false };
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // `{ Map, Set }.prototype[@@species]` accessors
	    // https://tc39.es/ecma262/#sec-get-map-@@species
	    // https://tc39.es/ecma262/#sec-get-set-@@species
	    setSpecies$3(CONSTRUCTOR_NAME);
	  }
	};

	var collection$3 = collection$4;
	var collectionStrong$1 = collectionStrong$2;

	// `Map` constructor
	// https://tc39.es/ecma262/#sec-map-objects
	collection$3('Map', function (init) {
	  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong$1);

	var log$7 = Math.log;

	// `Math.log1p` method implementation
	// https://tc39.es/ecma262/#sec-math.log1p
	// eslint-disable-next-line es/no-math-log1p -- safe
	var mathLog1p = Math.log1p || function log1p(x) {
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log$7(1 + x);
	};

	var $$1R = _export;
	var log1p$1 = mathLog1p;

	// eslint-disable-next-line es/no-math-acosh -- required for testing
	var $acosh = Math.acosh;
	var log$6 = Math.log;
	var sqrt$2 = Math.sqrt;
	var LN2$1 = Math.LN2;

	var FORCED$m = !$acosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  || Math.floor($acosh(Number.MAX_VALUE)) != 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN
	  || $acosh(Infinity) != Infinity;

	// `Math.acosh` method
	// https://tc39.es/ecma262/#sec-math.acosh
	$$1R({ target: 'Math', stat: true, forced: FORCED$m }, {
	  acosh: function acosh(x) {
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? log$6(x) + LN2$1
	      : log1p$1(x - 1 + sqrt$2(x - 1) * sqrt$2(x + 1));
	  }
	});

	var $$1Q = _export;

	// eslint-disable-next-line es/no-math-asinh -- required for testing
	var $asinh = Math.asinh;
	var log$5 = Math.log;
	var sqrt$1 = Math.sqrt;

	function asinh(x) {
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log$5(x + sqrt$1(x * x + 1));
	}

	// `Math.asinh` method
	// https://tc39.es/ecma262/#sec-math.asinh
	// Tor Browser bug: Math.asinh(0) -> -0
	$$1Q({ target: 'Math', stat: true, forced: !($asinh && 1 / $asinh(0) > 0) }, {
	  asinh: asinh
	});

	var $$1P = _export;

	// eslint-disable-next-line es/no-math-atanh -- required for testing
	var $atanh = Math.atanh;
	var log$4 = Math.log;

	// `Math.atanh` method
	// https://tc39.es/ecma262/#sec-math.atanh
	// Tor Browser bug: Math.atanh(-0) -> 0
	$$1P({ target: 'Math', stat: true, forced: !($atanh && 1 / $atanh(-0) < 0) }, {
	  atanh: function atanh(x) {
	    return (x = +x) == 0 ? x : log$4((1 + x) / (1 - x)) / 2;
	  }
	});

	// `Math.sign` method implementation
	// https://tc39.es/ecma262/#sec-math.sign
	// eslint-disable-next-line es/no-math-sign -- safe
	var mathSign = Math.sign || function sign(x) {
	  // eslint-disable-next-line no-self-compare -- NaN check
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

	var $$1O = _export;
	var sign$3 = mathSign;

	var abs$8 = Math.abs;
	var pow$4 = Math.pow;

	// `Math.cbrt` method
	// https://tc39.es/ecma262/#sec-math.cbrt
	$$1O({ target: 'Math', stat: true }, {
	  cbrt: function cbrt(x) {
	    return sign$3(x = +x) * pow$4(abs$8(x), 1 / 3);
	  }
	});

	var $$1N = _export;

	var floor$8 = Math.floor;
	var log$3 = Math.log;
	var LOG2E = Math.LOG2E;

	// `Math.clz32` method
	// https://tc39.es/ecma262/#sec-math.clz32
	$$1N({ target: 'Math', stat: true }, {
	  clz32: function clz32(x) {
	    return (x >>>= 0) ? 31 - floor$8(log$3(x + 0.5) * LOG2E) : 32;
	  }
	});

	// eslint-disable-next-line es/no-math-expm1 -- safe
	var $expm1 = Math.expm1;
	var exp$2 = Math.exp;

	// `Math.expm1` method implementation
	// https://tc39.es/ecma262/#sec-math.expm1
	var mathExpm1 = (!$expm1
	  // Old FF bug
	  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || $expm1(-2e-17) != -2e-17
	) ? function expm1(x) {
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp$2(x) - 1;
	} : $expm1;

	var $$1M = _export;
	var expm1$3 = mathExpm1;

	// eslint-disable-next-line es/no-math-cosh -- required for testing
	var $cosh = Math.cosh;
	var abs$7 = Math.abs;
	var E$2 = Math.E;

	// `Math.cosh` method
	// https://tc39.es/ecma262/#sec-math.cosh
	$$1M({ target: 'Math', stat: true, forced: !$cosh || $cosh(710) === Infinity }, {
	  cosh: function cosh(x) {
	    var t = expm1$3(abs$7(x) - 1) + 1;
	    return (t + 1 / (t * E$2 * E$2)) * (E$2 / 2);
	  }
	});

	var $$1L = _export;
	var expm1$2 = mathExpm1;

	// `Math.expm1` method
	// https://tc39.es/ecma262/#sec-math.expm1
	// eslint-disable-next-line es/no-math-expm1 -- required for testing
	$$1L({ target: 'Math', stat: true, forced: expm1$2 != Math.expm1 }, { expm1: expm1$2 });

	var sign$2 = mathSign;

	var abs$6 = Math.abs;
	var pow$3 = Math.pow;
	var EPSILON = pow$3(2, -52);
	var EPSILON32 = pow$3(2, -23);
	var MAX32 = pow$3(2, 127) * (2 - EPSILON32);
	var MIN32 = pow$3(2, -126);

	var roundTiesToEven = function (n) {
	  return n + 1 / EPSILON - 1 / EPSILON;
	};

	// `Math.fround` method implementation
	// https://tc39.es/ecma262/#sec-math.fround
	// eslint-disable-next-line es/no-math-fround -- safe
	var mathFround = Math.fround || function fround(x) {
	  var $abs = abs$6(x);
	  var $sign = sign$2(x);
	  var a, result;
	  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	  a = (1 + EPSILON32 / EPSILON) * $abs;
	  result = a - (a - $abs);
	  // eslint-disable-next-line no-self-compare -- NaN check
	  if (result > MAX32 || result != result) return $sign * Infinity;
	  return $sign * result;
	};

	var $$1K = _export;
	var fround = mathFround;

	// `Math.fround` method
	// https://tc39.es/ecma262/#sec-math.fround
	$$1K({ target: 'Math', stat: true }, { fround: fround });

	var $$1J = _export;

	// eslint-disable-next-line es/no-math-hypot -- required for testing
	var $hypot = Math.hypot;
	var abs$5 = Math.abs;
	var sqrt = Math.sqrt;

	// Chrome 77 bug
	// https://bugs.chromium.org/p/v8/issues/detail?id=9546
	var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;

	// `Math.hypot` method
	// https://tc39.es/ecma262/#sec-math.hypot
	$$1J({ target: 'Math', stat: true, forced: BUGGY }, {
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  hypot: function hypot(value1, value2) {
	    var sum = 0;
	    var i = 0;
	    var aLen = arguments.length;
	    var larg = 0;
	    var arg, div;
	    while (i < aLen) {
	      arg = abs$5(arguments[i++]);
	      if (larg < arg) {
	        div = larg / arg;
	        sum = sum * div * div + 1;
	        larg = arg;
	      } else if (arg > 0) {
	        div = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * sqrt(sum);
	  }
	});

	var $$1I = _export;
	var fails$N = fails$1f;

	// eslint-disable-next-line es/no-math-imul -- required for testing
	var $imul = Math.imul;

	var FORCED$l = fails$N(function () {
	  return $imul(0xFFFFFFFF, 5) != -5 || $imul.length != 2;
	});

	// `Math.imul` method
	// https://tc39.es/ecma262/#sec-math.imul
	// some WebKit versions fails with big numbers, some has wrong arity
	$$1I({ target: 'Math', stat: true, forced: FORCED$l }, {
	  imul: function imul(x, y) {
	    var UINT16 = 0xFFFF;
	    var xn = +x;
	    var yn = +y;
	    var xl = UINT16 & xn;
	    var yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

	var log$2 = Math.log;
	var LOG10E = Math.LOG10E;

	// eslint-disable-next-line es/no-math-log10 -- safe
	var mathLog10 = Math.log10 || function log10(x) {
	  return log$2(x) * LOG10E;
	};

	var $$1H = _export;
	var log10$1 = mathLog10;

	// `Math.log10` method
	// https://tc39.es/ecma262/#sec-math.log10
	$$1H({ target: 'Math', stat: true }, {
	  log10: log10$1
	});

	var $$1G = _export;
	var log1p = mathLog1p;

	// `Math.log1p` method
	// https://tc39.es/ecma262/#sec-math.log1p
	$$1G({ target: 'Math', stat: true }, { log1p: log1p });

	var $$1F = _export;

	var log$1 = Math.log;
	var LN2 = Math.LN2;

	// `Math.log2` method
	// https://tc39.es/ecma262/#sec-math.log2
	$$1F({ target: 'Math', stat: true }, {
	  log2: function log2(x) {
	    return log$1(x) / LN2;
	  }
	});

	var $$1E = _export;
	var sign$1 = mathSign;

	// `Math.sign` method
	// https://tc39.es/ecma262/#sec-math.sign
	$$1E({ target: 'Math', stat: true }, {
	  sign: sign$1
	});

	var $$1D = _export;
	var fails$M = fails$1f;
	var expm1$1 = mathExpm1;

	var abs$4 = Math.abs;
	var exp$1 = Math.exp;
	var E$1 = Math.E;

	var FORCED$k = fails$M(function () {
	  // eslint-disable-next-line es/no-math-sinh -- required for testing
	  return Math.sinh(-2e-17) != -2e-17;
	});

	// `Math.sinh` method
	// https://tc39.es/ecma262/#sec-math.sinh
	// V8 near Chromium 38 has a problem with very small numbers
	$$1D({ target: 'Math', stat: true, forced: FORCED$k }, {
	  sinh: function sinh(x) {
	    return abs$4(x = +x) < 1 ? (expm1$1(x) - expm1$1(-x)) / 2 : (exp$1(x - 1) - exp$1(-x - 1)) * (E$1 / 2);
	  }
	});

	var $$1C = _export;
	var expm1 = mathExpm1;

	var exp = Math.exp;

	// `Math.tanh` method
	// https://tc39.es/ecma262/#sec-math.tanh
	$$1C({ target: 'Math', stat: true }, {
	  tanh: function tanh(x) {
	    var a = expm1(x = +x);
	    var b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  }
	});

	var setToStringTag$5 = setToStringTag$c;

	// Math[@@toStringTag] property
	// https://tc39.es/ecma262/#sec-math-@@tostringtag
	setToStringTag$5(Math, 'Math', true);

	var $$1B = _export;

	var ceil = Math.ceil;
	var floor$7 = Math.floor;

	// `Math.trunc` method
	// https://tc39.es/ecma262/#sec-math.trunc
	$$1B({ target: 'Math', stat: true }, {
	  trunc: function trunc(it) {
	    return (it > 0 ? floor$7 : ceil)(it);
	  }
	});

	var uncurryThis$H = functionUncurryThis;

	// `thisNumberValue` abstract operation
	// https://tc39.es/ecma262/#sec-thisnumbervalue
	var thisNumberValue$4 = uncurryThis$H(1.0.valueOf);

	// a string of all valid unicode whitespaces
	var whitespaces$5 = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
	  '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var uncurryThis$G = functionUncurryThis;
	var requireObjectCoercible$d = requireObjectCoercible$i;
	var toString$v = toString$C;
	var whitespaces$4 = whitespaces$5;

	var replace$8 = uncurryThis$G(''.replace);
	var whitespace = '[' + whitespaces$4 + ']';
	var ltrim = RegExp('^' + whitespace + whitespace + '*');
	var rtrim = RegExp(whitespace + whitespace + '*$');

	// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
	var createMethod$2 = function (TYPE) {
	  return function ($this) {
	    var string = toString$v(requireObjectCoercible$d($this));
	    if (TYPE & 1) string = replace$8(string, ltrim, '');
	    if (TYPE & 2) string = replace$8(string, rtrim, '');
	    return string;
	  };
	};

	var stringTrim = {
	  // `String.prototype.{ trimLeft, trimStart }` methods
	  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
	  start: createMethod$2(1),
	  // `String.prototype.{ trimRight, trimEnd }` methods
	  // https://tc39.es/ecma262/#sec-string.prototype.trimend
	  end: createMethod$2(2),
	  // `String.prototype.trim` method
	  // https://tc39.es/ecma262/#sec-string.prototype.trim
	  trim: createMethod$2(3)
	};

	var DESCRIPTORS$k = descriptors;
	var global$L = global$1F;
	var uncurryThis$F = functionUncurryThis;
	var isForced$2 = isForced_1;
	var redefine$a = redefineExports;
	var hasOwn$c = hasOwnProperty_1;
	var inheritIfRequired$3 = inheritIfRequired$6;
	var isPrototypeOf$4 = objectIsPrototypeOf;
	var isSymbol$7 = isSymbol$b;
	var toPrimitive = toPrimitive$3;
	var fails$L = fails$1f;
	var getOwnPropertyNames$3 = objectGetOwnPropertyNames.f;
	var getOwnPropertyDescriptor$6 = objectGetOwnPropertyDescriptor.f;
	var defineProperty$a = objectDefineProperty.f;
	var thisNumberValue$3 = thisNumberValue$4;
	var trim$2 = stringTrim.trim;

	var NUMBER = 'Number';
	var NativeNumber = global$L[NUMBER];
	var NumberPrototype = NativeNumber.prototype;
	var TypeError$c = global$L.TypeError;
	var arraySlice$6 = uncurryThis$F(''.slice);
	var charCodeAt$3 = uncurryThis$F(''.charCodeAt);

	// `ToNumeric` abstract operation
	// https://tc39.es/ecma262/#sec-tonumeric
	var toNumeric = function (value) {
	  var primValue = toPrimitive(value, 'number');
	  return typeof primValue == 'bigint' ? primValue : toNumber$2(primValue);
	};

	// `ToNumber` abstract operation
	// https://tc39.es/ecma262/#sec-tonumber
	var toNumber$2 = function (argument) {
	  var it = toPrimitive(argument, 'number');
	  var first, third, radix, maxCode, digits, length, index, code;
	  if (isSymbol$7(it)) throw TypeError$c('Cannot convert a Symbol value to a number');
	  if (typeof it == 'string' && it.length > 2) {
	    it = trim$2(it);
	    first = charCodeAt$3(it, 0);
	    if (first === 43 || first === 45) {
	      third = charCodeAt$3(it, 2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (charCodeAt$3(it, 1)) {
	        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
	        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
	        default: return +it;
	      }
	      digits = arraySlice$6(it, 2);
	      length = digits.length;
	      for (index = 0; index < length; index++) {
	        code = charCodeAt$3(digits, index);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};

	// `Number` constructor
	// https://tc39.es/ecma262/#sec-number-constructor
	if (isForced$2(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
	  var NumberWrapper = function Number(value) {
	    var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
	    var dummy = this;
	    // check on 1..constructor(foo) case
	    return isPrototypeOf$4(NumberPrototype, dummy) && fails$L(function () { thisNumberValue$3(dummy); })
	      ? inheritIfRequired$3(Object(n), dummy, NumberWrapper) : n;
	  };
	  for (var keys$6 = DESCRIPTORS$k ? getOwnPropertyNames$3(NativeNumber) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES2015 (in case, if modules with ES2015 Number statics required before):
	    'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' +
	    // ESNext
	    'fromString,range'
	  ).split(','), j = 0, key$2; keys$6.length > j; j++) {
	    if (hasOwn$c(NativeNumber, key$2 = keys$6[j]) && !hasOwn$c(NumberWrapper, key$2)) {
	      defineProperty$a(NumberWrapper, key$2, getOwnPropertyDescriptor$6(NativeNumber, key$2));
	    }
	  }
	  NumberWrapper.prototype = NumberPrototype;
	  NumberPrototype.constructor = NumberWrapper;
	  redefine$a(global$L, NUMBER, NumberWrapper);
	}

	var $$1A = _export;

	// `Number.EPSILON` constant
	// https://tc39.es/ecma262/#sec-number.epsilon
	$$1A({ target: 'Number', stat: true }, {
	  EPSILON: Math.pow(2, -52)
	});

	var global$K = global$1F;

	var globalIsFinite = global$K.isFinite;

	// `Number.isFinite` method
	// https://tc39.es/ecma262/#sec-number.isfinite
	// eslint-disable-next-line es/no-number-isfinite -- safe
	var numberIsFinite$1 = Number.isFinite || function isFinite(it) {
	  return typeof it == 'number' && globalIsFinite(it);
	};

	var $$1z = _export;
	var numberIsFinite = numberIsFinite$1;

	// `Number.isFinite` method
	// https://tc39.es/ecma262/#sec-number.isfinite
	$$1z({ target: 'Number', stat: true }, { isFinite: numberIsFinite });

	var isObject$q = isObject$I;

	var floor$6 = Math.floor;

	// `IsIntegralNumber` abstract operation
	// https://tc39.es/ecma262/#sec-isintegralnumber
	// eslint-disable-next-line es/no-number-isinteger -- safe
	var isIntegralNumber$3 = Number.isInteger || function isInteger(it) {
	  return !isObject$q(it) && isFinite(it) && floor$6(it) === it;
	};

	var $$1y = _export;
	var isIntegralNumber$2 = isIntegralNumber$3;

	// `Number.isInteger` method
	// https://tc39.es/ecma262/#sec-number.isinteger
	$$1y({ target: 'Number', stat: true }, {
	  isInteger: isIntegralNumber$2
	});

	var $$1x = _export;

	// `Number.isNaN` method
	// https://tc39.es/ecma262/#sec-number.isnan
	$$1x({ target: 'Number', stat: true }, {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare -- NaN check
	    return number != number;
	  }
	});

	var $$1w = _export;
	var isIntegralNumber$1 = isIntegralNumber$3;

	var abs$3 = Math.abs;

	// `Number.isSafeInteger` method
	// https://tc39.es/ecma262/#sec-number.issafeinteger
	$$1w({ target: 'Number', stat: true }, {
	  isSafeInteger: function isSafeInteger(number) {
	    return isIntegralNumber$1(number) && abs$3(number) <= 0x1FFFFFFFFFFFFF;
	  }
	});

	var $$1v = _export;

	// `Number.MAX_SAFE_INTEGER` constant
	// https://tc39.es/ecma262/#sec-number.max_safe_integer
	$$1v({ target: 'Number', stat: true }, {
	  MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
	});

	var $$1u = _export;

	// `Number.MIN_SAFE_INTEGER` constant
	// https://tc39.es/ecma262/#sec-number.min_safe_integer
	$$1u({ target: 'Number', stat: true }, {
	  MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF
	});

	var global$J = global$1F;
	var fails$K = fails$1f;
	var uncurryThis$E = functionUncurryThis;
	var toString$u = toString$C;
	var trim$1 = stringTrim.trim;
	var whitespaces$3 = whitespaces$5;

	var charAt$c = uncurryThis$E(''.charAt);
	var n$ParseFloat = global$J.parseFloat;
	var Symbol$2 = global$J.Symbol;
	var ITERATOR$5 = Symbol$2 && Symbol$2.iterator;
	var FORCED$j = 1 / n$ParseFloat(whitespaces$3 + '-0') !== -Infinity
	  // MS Edge 18- broken with boxed symbols
	  || (ITERATOR$5 && !fails$K(function () { n$ParseFloat(Object(ITERATOR$5)); }));

	// `parseFloat` method
	// https://tc39.es/ecma262/#sec-parsefloat-string
	var numberParseFloat = FORCED$j ? function parseFloat(string) {
	  var trimmedString = trim$1(toString$u(string));
	  var result = n$ParseFloat(trimmedString);
	  return result === 0 && charAt$c(trimmedString, 0) == '-' ? -0 : result;
	} : n$ParseFloat;

	var $$1t = _export;
	var parseFloat$1 = numberParseFloat;

	// `Number.parseFloat` method
	// https://tc39.es/ecma262/#sec-number.parseFloat
	// eslint-disable-next-line es/no-number-parsefloat -- required for testing
	$$1t({ target: 'Number', stat: true, forced: Number.parseFloat != parseFloat$1 }, {
	  parseFloat: parseFloat$1
	});

	var global$I = global$1F;
	var fails$J = fails$1f;
	var uncurryThis$D = functionUncurryThis;
	var toString$t = toString$C;
	var trim = stringTrim.trim;
	var whitespaces$2 = whitespaces$5;

	var $parseInt$1 = global$I.parseInt;
	var Symbol$1 = global$I.Symbol;
	var ITERATOR$4 = Symbol$1 && Symbol$1.iterator;
	var hex = /^[+-]?0x/i;
	var exec$7 = uncurryThis$D(hex.exec);
	var FORCED$i = $parseInt$1(whitespaces$2 + '08') !== 8 || $parseInt$1(whitespaces$2 + '0x16') !== 22
	  // MS Edge 18- broken with boxed symbols
	  || (ITERATOR$4 && !fails$J(function () { $parseInt$1(Object(ITERATOR$4)); }));

	// `parseInt` method
	// https://tc39.es/ecma262/#sec-parseint-string-radix
	var numberParseInt = FORCED$i ? function parseInt(string, radix) {
	  var S = trim(toString$t(string));
	  return $parseInt$1(S, (radix >>> 0) || (exec$7(hex, S) ? 16 : 10));
	} : $parseInt$1;

	var $$1s = _export;
	var parseInt$2 = numberParseInt;

	// `Number.parseInt` method
	// https://tc39.es/ecma262/#sec-number.parseint
	// eslint-disable-next-line es/no-number-parseint -- required for testing
	$$1s({ target: 'Number', stat: true, forced: Number.parseInt != parseInt$2 }, {
	  parseInt: parseInt$2
	});

	var $$1r = _export;
	var global$H = global$1F;
	var uncurryThis$C = functionUncurryThis;
	var toIntegerOrInfinity$7 = toIntegerOrInfinity$i;
	var thisNumberValue$2 = thisNumberValue$4;
	var $repeat$1 = stringRepeat;
	var log10 = mathLog10;
	var fails$I = fails$1f;

	var RangeError$8 = global$H.RangeError;
	var String$3 = global$H.String;
	var isFinite$2 = global$H.isFinite;
	var abs$2 = Math.abs;
	var floor$5 = Math.floor;
	var pow$2 = Math.pow;
	var round$2 = Math.round;
	var un$ToExponential = uncurryThis$C(1.0.toExponential);
	var repeat$2 = uncurryThis$C($repeat$1);
	var stringSlice$d = uncurryThis$C(''.slice);

	// Edge 17-
	var ROUNDS_PROPERLY = un$ToExponential(-6.9e-11, 4) === '-6.9000e-11'
	  // IE11- && Edge 14-
	  && un$ToExponential(1.255, 2) === '1.25e+0'
	  // FF86-, V8 ~ Chrome 49-50
	  && un$ToExponential(12345, 3) === '1.235e+4'
	  // FF86-, V8 ~ Chrome 49-50
	  && un$ToExponential(25, 0) === '3e+1';

	// IE8-
	var THROWS_ON_INFINITY_FRACTION = fails$I(function () {
	  un$ToExponential(1, Infinity);
	}) && fails$I(function () {
	  un$ToExponential(1, -Infinity);
	});

	// Safari <11 && FF <50
	var PROPER_NON_FINITE_THIS_CHECK = !fails$I(function () {
	  un$ToExponential(Infinity, Infinity);
	}) && !fails$I(function () {
	  un$ToExponential(NaN, Infinity);
	});

	var FORCED$h = !ROUNDS_PROPERLY || !THROWS_ON_INFINITY_FRACTION || !PROPER_NON_FINITE_THIS_CHECK;

	// `Number.prototype.toExponential` method
	// https://tc39.es/ecma262/#sec-number.prototype.toexponential
	$$1r({ target: 'Number', proto: true, forced: FORCED$h }, {
	  toExponential: function toExponential(fractionDigits) {
	    var x = thisNumberValue$2(this);
	    if (fractionDigits === undefined) return un$ToExponential(x);
	    var f = toIntegerOrInfinity$7(fractionDigits);
	    if (!isFinite$2(x)) return String$3(x);
	    // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation
	    if (f < 0 || f > 20) throw RangeError$8('Incorrect fraction digits');
	    if (ROUNDS_PROPERLY) return un$ToExponential(x, f);
	    var s = '';
	    var m = '';
	    var e = 0;
	    var c = '';
	    var d = '';
	    if (x < 0) {
	      s = '-';
	      x = -x;
	    }
	    if (x === 0) {
	      e = 0;
	      m = repeat$2('0', f + 1);
	    } else {
	      // this block is based on https://gist.github.com/SheetJSDev/1100ad56b9f856c95299ed0e068eea08
	      // TODO: improve accuracy with big fraction digits
	      var l = log10(x);
	      e = floor$5(l);
	      var n = 0;
	      var w = pow$2(10, e - f);
	      n = round$2(x / w);
	      if (2 * x >= (2 * n + 1) * w) {
	        n += 1;
	      }
	      if (n >= pow$2(10, f + 1)) {
	        n /= 10;
	        e += 1;
	      }
	      m = String$3(n);
	    }
	    if (f !== 0) {
	      m = stringSlice$d(m, 0, 1) + '.' + stringSlice$d(m, 1);
	    }
	    if (e === 0) {
	      c = '+';
	      d = '0';
	    } else {
	      c = e > 0 ? '+' : '-';
	      d = String$3(abs$2(e));
	    }
	    m += 'e' + c + d;
	    return s + m;
	  }
	});

	var $$1q = _export;
	var global$G = global$1F;
	var uncurryThis$B = functionUncurryThis;
	var toIntegerOrInfinity$6 = toIntegerOrInfinity$i;
	var thisNumberValue$1 = thisNumberValue$4;
	var $repeat = stringRepeat;
	var fails$H = fails$1f;

	var RangeError$7 = global$G.RangeError;
	var String$2 = global$G.String;
	var floor$4 = Math.floor;
	var repeat$1 = uncurryThis$B($repeat);
	var stringSlice$c = uncurryThis$B(''.slice);
	var un$ToFixed = uncurryThis$B(1.0.toFixed);

	var pow$1 = function (x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow$1(x, n - 1, acc * x) : pow$1(x * x, n / 2, acc);
	};

	var log = function (x) {
	  var n = 0;
	  var x2 = x;
	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }
	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  } return n;
	};

	var multiply = function (data, n, c) {
	  var index = -1;
	  var c2 = c;
	  while (++index < 6) {
	    c2 += n * data[index];
	    data[index] = c2 % 1e7;
	    c2 = floor$4(c2 / 1e7);
	  }
	};

	var divide = function (data, n) {
	  var index = 6;
	  var c = 0;
	  while (--index >= 0) {
	    c += data[index];
	    data[index] = floor$4(c / n);
	    c = (c % n) * 1e7;
	  }
	};

	var dataToString = function (data) {
	  var index = 6;
	  var s = '';
	  while (--index >= 0) {
	    if (s !== '' || index === 0 || data[index] !== 0) {
	      var t = String$2(data[index]);
	      s = s === '' ? t : s + repeat$1('0', 7 - t.length) + t;
	    }
	  } return s;
	};

	var FORCED$g = fails$H(function () {
	  return un$ToFixed(0.00008, 3) !== '0.000' ||
	    un$ToFixed(0.9, 0) !== '1' ||
	    un$ToFixed(1.255, 2) !== '1.25' ||
	    un$ToFixed(1000000000000000128.0, 0) !== '1000000000000000128';
	}) || !fails$H(function () {
	  // V8 ~ Android 4.3-
	  un$ToFixed({});
	});

	// `Number.prototype.toFixed` method
	// https://tc39.es/ecma262/#sec-number.prototype.tofixed
	$$1q({ target: 'Number', proto: true, forced: FORCED$g }, {
	  toFixed: function toFixed(fractionDigits) {
	    var number = thisNumberValue$1(this);
	    var fractDigits = toIntegerOrInfinity$6(fractionDigits);
	    var data = [0, 0, 0, 0, 0, 0];
	    var sign = '';
	    var result = '0';
	    var e, z, j, k;

	    // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation
	    if (fractDigits < 0 || fractDigits > 20) throw RangeError$7('Incorrect fraction digits');
	    // eslint-disable-next-line no-self-compare -- NaN check
	    if (number != number) return 'NaN';
	    if (number <= -1e21 || number >= 1e21) return String$2(number);
	    if (number < 0) {
	      sign = '-';
	      number = -number;
	    }
	    if (number > 1e-21) {
	      e = log(number * pow$1(2, 69, 1)) - 69;
	      z = e < 0 ? number * pow$1(2, -e, 1) : number / pow$1(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if (e > 0) {
	        multiply(data, 0, z);
	        j = fractDigits;
	        while (j >= 7) {
	          multiply(data, 1e7, 0);
	          j -= 7;
	        }
	        multiply(data, pow$1(10, j, 1), 0);
	        j = e - 1;
	        while (j >= 23) {
	          divide(data, 1 << 23);
	          j -= 23;
	        }
	        divide(data, 1 << j);
	        multiply(data, 1, 1);
	        divide(data, 2);
	        result = dataToString(data);
	      } else {
	        multiply(data, 0, z);
	        multiply(data, 1 << -e, 0);
	        result = dataToString(data) + repeat$1('0', fractDigits);
	      }
	    }
	    if (fractDigits > 0) {
	      k = result.length;
	      result = sign + (k <= fractDigits
	        ? '0.' + repeat$1('0', fractDigits - k) + result
	        : stringSlice$c(result, 0, k - fractDigits) + '.' + stringSlice$c(result, k - fractDigits));
	    } else {
	      result = sign + result;
	    } return result;
	  }
	});

	var $$1p = _export;
	var uncurryThis$A = functionUncurryThis;
	var fails$G = fails$1f;
	var thisNumberValue = thisNumberValue$4;

	var un$ToPrecision = uncurryThis$A(1.0.toPrecision);

	var FORCED$f = fails$G(function () {
	  // IE7-
	  return un$ToPrecision(1, undefined) !== '1';
	}) || !fails$G(function () {
	  // V8 ~ Android 4.3-
	  un$ToPrecision({});
	});

	// `Number.prototype.toPrecision` method
	// https://tc39.es/ecma262/#sec-number.prototype.toprecision
	$$1p({ target: 'Number', proto: true, forced: FORCED$f }, {
	  toPrecision: function toPrecision(precision) {
	    return precision === undefined
	      ? un$ToPrecision(thisNumberValue(this))
	      : un$ToPrecision(thisNumberValue(this), precision);
	  }
	});

	var DESCRIPTORS$j = descriptors;
	var uncurryThis$z = functionUncurryThis;
	var call$k = functionCall;
	var fails$F = fails$1f;
	var objectKeys$2 = objectKeys$5;
	var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
	var propertyIsEnumerableModule = objectPropertyIsEnumerable;
	var toObject$a = toObject$q;
	var IndexedObject = indexedObject;

	// eslint-disable-next-line es/no-object-assign -- safe
	var $assign = Object.assign;
	// eslint-disable-next-line es/no-object-defineproperty -- required for testing
	var defineProperty$9 = Object.defineProperty;
	var concat$1 = uncurryThis$z([].concat);

	// `Object.assign` method
	// https://tc39.es/ecma262/#sec-object.assign
	var objectAssign = !$assign || fails$F(function () {
	  // should have correct order of operations (Edge bug)
	  if (DESCRIPTORS$j && $assign({ b: 1 }, $assign(defineProperty$9({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty$9(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), { b: 2 })).b !== 1) return true;
	  // should work with symbols and should have deterministic property order (V8 bug)
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line es/no-symbol -- safe
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return $assign({}, A)[symbol] != 7 || objectKeys$2($assign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
	  var T = toObject$a(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
	  var propertyIsEnumerable = propertyIsEnumerableModule.f;
	  while (argumentsLength > index) {
	    var S = IndexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? concat$1(objectKeys$2(S), getOwnPropertySymbols(S)) : objectKeys$2(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!DESCRIPTORS$j || call$k(propertyIsEnumerable, S, key)) T[key] = S[key];
	    }
	  } return T;
	} : $assign;

	var $$1o = _export;
	var assign$1 = objectAssign;

	// `Object.assign` method
	// https://tc39.es/ecma262/#sec-object.assign
	// eslint-disable-next-line es/no-object-assign -- required for testing
	$$1o({ target: 'Object', stat: true, forced: Object.assign !== assign$1 }, {
	  assign: assign$1
	});

	var $$1n = _export;
	var DESCRIPTORS$i = descriptors;
	var create$5 = objectCreate$1;

	// `Object.create` method
	// https://tc39.es/ecma262/#sec-object.create
	$$1n({ target: 'Object', stat: true, sham: !DESCRIPTORS$i }, {
	  create: create$5
	});

	var global$F = global$1F;
	var fails$E = fails$1f;
	var WEBKIT$1 = engineWebkitVersion;

	// Forced replacement object prototype accessors methods
	var objectPrototypeAccessorsForced = !fails$E(function () {
	  // This feature detection crashes old WebKit
	  // https://github.com/zloirock/core-js/issues/232
	  if (WEBKIT$1 && WEBKIT$1 < 535) return;
	  var key = Math.random();
	  // In FF throws only define methods
	  // eslint-disable-next-line no-undef, no-useless-call -- required for testing
	  __defineSetter__.call(null, key, function () { /* empty */ });
	  delete global$F[key];
	});

	var $$1m = _export;
	var DESCRIPTORS$h = descriptors;
	var FORCED$e = objectPrototypeAccessorsForced;
	var aCallable$8 = aCallable$g;
	var toObject$9 = toObject$q;
	var definePropertyModule$4 = objectDefineProperty;

	// `Object.prototype.__defineGetter__` method
	// https://tc39.es/ecma262/#sec-object.prototype.__defineGetter__
	if (DESCRIPTORS$h) {
	  $$1m({ target: 'Object', proto: true, forced: FORCED$e }, {
	    __defineGetter__: function __defineGetter__(P, getter) {
	      definePropertyModule$4.f(toObject$9(this), P, { get: aCallable$8(getter), enumerable: true, configurable: true });
	    }
	  });
	}

	var $$1l = _export;
	var DESCRIPTORS$g = descriptors;
	var defineProperties$2 = objectDefineProperties.f;

	// `Object.defineProperties` method
	// https://tc39.es/ecma262/#sec-object.defineproperties
	// eslint-disable-next-line es/no-object-defineproperties -- safe
	$$1l({ target: 'Object', stat: true, forced: Object.defineProperties !== defineProperties$2, sham: !DESCRIPTORS$g }, {
	  defineProperties: defineProperties$2
	});

	var $$1k = _export;
	var DESCRIPTORS$f = descriptors;
	var defineProperty$8 = objectDefineProperty.f;

	// `Object.defineProperty` method
	// https://tc39.es/ecma262/#sec-object.defineproperty
	// eslint-disable-next-line es/no-object-defineproperty -- safe
	$$1k({ target: 'Object', stat: true, forced: Object.defineProperty !== defineProperty$8, sham: !DESCRIPTORS$f }, {
	  defineProperty: defineProperty$8
	});

	var $$1j = _export;
	var DESCRIPTORS$e = descriptors;
	var FORCED$d = objectPrototypeAccessorsForced;
	var aCallable$7 = aCallable$g;
	var toObject$8 = toObject$q;
	var definePropertyModule$3 = objectDefineProperty;

	// `Object.prototype.__defineSetter__` method
	// https://tc39.es/ecma262/#sec-object.prototype.__defineSetter__
	if (DESCRIPTORS$e) {
	  $$1j({ target: 'Object', proto: true, forced: FORCED$d }, {
	    __defineSetter__: function __defineSetter__(P, setter) {
	      definePropertyModule$3.f(toObject$8(this), P, { set: aCallable$7(setter), enumerable: true, configurable: true });
	    }
	  });
	}

	var DESCRIPTORS$d = descriptors;
	var uncurryThis$y = functionUncurryThis;
	var objectKeys$1 = objectKeys$5;
	var toIndexedObject$4 = toIndexedObject$f;
	var $propertyIsEnumerable = objectPropertyIsEnumerable.f;

	var propertyIsEnumerable$2 = uncurryThis$y($propertyIsEnumerable);
	var push$8 = uncurryThis$y([].push);

	// `Object.{ entries, values }` methods implementation
	var createMethod$1 = function (TO_ENTRIES) {
	  return function (it) {
	    var O = toIndexedObject$4(it);
	    var keys = objectKeys$1(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) {
	      key = keys[i++];
	      if (!DESCRIPTORS$d || propertyIsEnumerable$2(O, key)) {
	        push$8(result, TO_ENTRIES ? [key, O[key]] : O[key]);
	      }
	    }
	    return result;
	  };
	};

	var objectToArray = {
	  // `Object.entries` method
	  // https://tc39.es/ecma262/#sec-object.entries
	  entries: createMethod$1(true),
	  // `Object.values` method
	  // https://tc39.es/ecma262/#sec-object.values
	  values: createMethod$1(false)
	};

	var $$1i = _export;
	var $entries = objectToArray.entries;

	// `Object.entries` method
	// https://tc39.es/ecma262/#sec-object.entries
	$$1i({ target: 'Object', stat: true }, {
	  entries: function entries(O) {
	    return $entries(O);
	  }
	});

	var $$1h = _export;
	var FREEZING$3 = freezing;
	var fails$D = fails$1f;
	var isObject$p = isObject$I;
	var onFreeze$2 = internalMetadataExports.onFreeze;

	// eslint-disable-next-line es/no-object-freeze -- safe
	var $freeze = Object.freeze;
	var FAILS_ON_PRIMITIVES$8 = fails$D(function () { $freeze(1); });

	// `Object.freeze` method
	// https://tc39.es/ecma262/#sec-object.freeze
	$$1h({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$8, sham: !FREEZING$3 }, {
	  freeze: function freeze(it) {
	    return $freeze && isObject$p(it) ? $freeze(onFreeze$2(it)) : it;
	  }
	});

	var $$1g = _export;
	var iterate$5 = iterate$9;
	var createProperty$2 = createProperty$9;

	// `Object.fromEntries` method
	// https://github.com/tc39/proposal-object-from-entries
	$$1g({ target: 'Object', stat: true }, {
	  fromEntries: function fromEntries(iterable) {
	    var obj = {};
	    iterate$5(iterable, function (k, v) {
	      createProperty$2(obj, k, v);
	    }, { AS_ENTRIES: true });
	    return obj;
	  }
	});

	var $$1f = _export;
	var fails$C = fails$1f;
	var toIndexedObject$3 = toIndexedObject$f;
	var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var DESCRIPTORS$c = descriptors;

	var FAILS_ON_PRIMITIVES$7 = fails$C(function () { nativeGetOwnPropertyDescriptor$1(1); });
	var FORCED$c = !DESCRIPTORS$c || FAILS_ON_PRIMITIVES$7;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
	$$1f({ target: 'Object', stat: true, forced: FORCED$c, sham: !DESCRIPTORS$c }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
	    return nativeGetOwnPropertyDescriptor$1(toIndexedObject$3(it), key);
	  }
	});

	var $$1e = _export;
	var DESCRIPTORS$b = descriptors;
	var ownKeys$1 = ownKeys$3;
	var toIndexedObject$2 = toIndexedObject$f;
	var getOwnPropertyDescriptorModule$4 = objectGetOwnPropertyDescriptor;
	var createProperty$1 = createProperty$9;

	// `Object.getOwnPropertyDescriptors` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
	$$1e({ target: 'Object', stat: true, sham: !DESCRIPTORS$b }, {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIndexedObject$2(object);
	    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule$4.f;
	    var keys = ownKeys$1(O);
	    var result = {};
	    var index = 0;
	    var key, descriptor;
	    while (keys.length > index) {
	      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
	      if (descriptor !== undefined) createProperty$1(result, key, descriptor);
	    }
	    return result;
	  }
	});

	var $$1d = _export;
	var fails$B = fails$1f;
	var getOwnPropertyNames$2 = objectGetOwnPropertyNamesExternal.f;

	// eslint-disable-next-line es/no-object-getownpropertynames -- required for testing
	var FAILS_ON_PRIMITIVES$6 = fails$B(function () { return !Object.getOwnPropertyNames(1); });

	// `Object.getOwnPropertyNames` method
	// https://tc39.es/ecma262/#sec-object.getownpropertynames
	$$1d({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$6 }, {
	  getOwnPropertyNames: getOwnPropertyNames$2
	});

	var $$1c = _export;
	var fails$A = fails$1f;
	var toObject$7 = toObject$q;
	var nativeGetPrototypeOf = objectGetPrototypeOf$1;
	var CORRECT_PROTOTYPE_GETTER$1 = correctPrototypeGetter;

	var FAILS_ON_PRIMITIVES$5 = fails$A(function () { nativeGetPrototypeOf(1); });

	// `Object.getPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.getprototypeof
	$$1c({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$5, sham: !CORRECT_PROTOTYPE_GETTER$1 }, {
	  getPrototypeOf: function getPrototypeOf(it) {
	    return nativeGetPrototypeOf(toObject$7(it));
	  }
	});

	var $$1b = _export;
	var hasOwn$b = hasOwnProperty_1;

	// `Object.hasOwn` method
	// https://github.com/tc39/proposal-accessible-object-hasownproperty
	$$1b({ target: 'Object', stat: true }, {
	  hasOwn: hasOwn$b
	});

	// `SameValue` abstract operation
	// https://tc39.es/ecma262/#sec-samevalue
	// eslint-disable-next-line es/no-object-is -- safe
	var sameValue$1 = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare -- NaN check
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

	var $$1a = _export;
	var is = sameValue$1;

	// `Object.is` method
	// https://tc39.es/ecma262/#sec-object.is
	$$1a({ target: 'Object', stat: true }, {
	  is: is
	});

	var $$19 = _export;
	var $isExtensible$1 = objectIsExtensible;

	// `Object.isExtensible` method
	// https://tc39.es/ecma262/#sec-object.isextensible
	// eslint-disable-next-line es/no-object-isextensible -- safe
	$$19({ target: 'Object', stat: true, forced: Object.isExtensible !== $isExtensible$1 }, {
	  isExtensible: $isExtensible$1
	});

	var $$18 = _export;
	var fails$z = fails$1f;
	var isObject$o = isObject$I;
	var classof$a = classofRaw$1;
	var ARRAY_BUFFER_NON_EXTENSIBLE$1 = arrayBufferNonExtensible;

	// eslint-disable-next-line es/no-object-isfrozen -- safe
	var $isFrozen = Object.isFrozen;
	var FAILS_ON_PRIMITIVES$4 = fails$z(function () { });

	// `Object.isFrozen` method
	// https://tc39.es/ecma262/#sec-object.isfrozen
	$$18({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$4 || ARRAY_BUFFER_NON_EXTENSIBLE$1 }, {
	  isFrozen: function isFrozen(it) {
	    if (!isObject$o(it)) return true;
	    if (ARRAY_BUFFER_NON_EXTENSIBLE$1 && classof$a(it) == 'ArrayBuffer') return true;
	    return $isFrozen ? $isFrozen(it) : false;
	  }
	});

	var $$17 = _export;
	var fails$y = fails$1f;
	var isObject$n = isObject$I;
	var classof$9 = classofRaw$1;
	var ARRAY_BUFFER_NON_EXTENSIBLE = arrayBufferNonExtensible;

	// eslint-disable-next-line es/no-object-issealed -- safe
	var $isSealed = Object.isSealed;
	var FAILS_ON_PRIMITIVES$3 = fails$y(function () { });

	// `Object.isSealed` method
	// https://tc39.es/ecma262/#sec-object.issealed
	$$17({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$3 || ARRAY_BUFFER_NON_EXTENSIBLE }, {
	  isSealed: function isSealed(it) {
	    if (!isObject$n(it)) return true;
	    if (ARRAY_BUFFER_NON_EXTENSIBLE && classof$9(it) == 'ArrayBuffer') return true;
	    return $isSealed ? $isSealed(it) : false;
	  }
	});

	var $$16 = _export;
	var toObject$6 = toObject$q;
	var nativeKeys$2 = objectKeys$5;
	var fails$x = fails$1f;

	var FAILS_ON_PRIMITIVES$2 = fails$x(function () { nativeKeys$2(1); });

	// `Object.keys` method
	// https://tc39.es/ecma262/#sec-object.keys
	$$16({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$2 }, {
	  keys: function keys(it) {
	    return nativeKeys$2(toObject$6(it));
	  }
	});

	var $$15 = _export;
	var DESCRIPTORS$a = descriptors;
	var FORCED$b = objectPrototypeAccessorsForced;
	var toObject$5 = toObject$q;
	var toPropertyKey$3 = toPropertyKey$8;
	var getPrototypeOf$3 = objectGetPrototypeOf$1;
	var getOwnPropertyDescriptor$5 = objectGetOwnPropertyDescriptor.f;

	// `Object.prototype.__lookupGetter__` method
	// https://tc39.es/ecma262/#sec-object.prototype.__lookupGetter__
	if (DESCRIPTORS$a) {
	  $$15({ target: 'Object', proto: true, forced: FORCED$b }, {
	    __lookupGetter__: function __lookupGetter__(P) {
	      var O = toObject$5(this);
	      var key = toPropertyKey$3(P);
	      var desc;
	      do {
	        if (desc = getOwnPropertyDescriptor$5(O, key)) return desc.get;
	      } while (O = getPrototypeOf$3(O));
	    }
	  });
	}

	var $$14 = _export;
	var DESCRIPTORS$9 = descriptors;
	var FORCED$a = objectPrototypeAccessorsForced;
	var toObject$4 = toObject$q;
	var toPropertyKey$2 = toPropertyKey$8;
	var getPrototypeOf$2 = objectGetPrototypeOf$1;
	var getOwnPropertyDescriptor$4 = objectGetOwnPropertyDescriptor.f;

	// `Object.prototype.__lookupSetter__` method
	// https://tc39.es/ecma262/#sec-object.prototype.__lookupSetter__
	if (DESCRIPTORS$9) {
	  $$14({ target: 'Object', proto: true, forced: FORCED$a }, {
	    __lookupSetter__: function __lookupSetter__(P) {
	      var O = toObject$4(this);
	      var key = toPropertyKey$2(P);
	      var desc;
	      do {
	        if (desc = getOwnPropertyDescriptor$4(O, key)) return desc.set;
	      } while (O = getPrototypeOf$2(O));
	    }
	  });
	}

	var $$13 = _export;
	var isObject$m = isObject$I;
	var onFreeze$1 = internalMetadataExports.onFreeze;
	var FREEZING$2 = freezing;
	var fails$w = fails$1f;

	// eslint-disable-next-line es/no-object-preventextensions -- safe
	var $preventExtensions = Object.preventExtensions;
	var FAILS_ON_PRIMITIVES$1 = fails$w(function () { $preventExtensions(1); });

	// `Object.preventExtensions` method
	// https://tc39.es/ecma262/#sec-object.preventextensions
	$$13({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$1, sham: !FREEZING$2 }, {
	  preventExtensions: function preventExtensions(it) {
	    return $preventExtensions && isObject$m(it) ? $preventExtensions(onFreeze$1(it)) : it;
	  }
	});

	var $$12 = _export;
	var isObject$l = isObject$I;
	var onFreeze = internalMetadataExports.onFreeze;
	var FREEZING$1 = freezing;
	var fails$v = fails$1f;

	// eslint-disable-next-line es/no-object-seal -- safe
	var $seal = Object.seal;
	var FAILS_ON_PRIMITIVES = fails$v(function () { $seal(1); });

	// `Object.seal` method
	// https://tc39.es/ecma262/#sec-object.seal
	$$12({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING$1 }, {
	  seal: function seal(it) {
	    return $seal && isObject$l(it) ? $seal(onFreeze(it)) : it;
	  }
	});

	var $$11 = _export;
	var setPrototypeOf$2 = objectSetPrototypeOf$1;

	// `Object.setPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.setprototypeof
	$$11({ target: 'Object', stat: true }, {
	  setPrototypeOf: setPrototypeOf$2
	});

	var TO_STRING_TAG_SUPPORT$1 = toStringTagSupport;
	var classof$8 = classof$i;

	// `Object.prototype.toString` method implementation
	// https://tc39.es/ecma262/#sec-object.prototype.tostring
	var objectToString$2 = TO_STRING_TAG_SUPPORT$1 ? {}.toString : function toString() {
	  return '[object ' + classof$8(this) + ']';
	};

	var TO_STRING_TAG_SUPPORT = toStringTagSupport;
	var redefine$9 = redefineExports;
	var toString$s = objectToString$2;

	// `Object.prototype.toString` method
	// https://tc39.es/ecma262/#sec-object.prototype.tostring
	if (!TO_STRING_TAG_SUPPORT) {
	  redefine$9(Object.prototype, 'toString', toString$s, { unsafe: true });
	}

	var $$10 = _export;
	var $values = objectToArray.values;

	// `Object.values` method
	// https://tc39.es/ecma262/#sec-object.values
	$$10({ target: 'Object', stat: true }, {
	  values: function values(O) {
	    return $values(O);
	  }
	});

	var $$$ = _export;
	var $parseFloat = numberParseFloat;

	// `parseFloat` method
	// https://tc39.es/ecma262/#sec-parsefloat-string
	$$$({ global: true, forced: parseFloat != $parseFloat }, {
	  parseFloat: $parseFloat
	});

	var $$_ = _export;
	var $parseInt = numberParseInt;

	// `parseInt` method
	// https://tc39.es/ecma262/#sec-parseint-string-radix
	$$_({ global: true, forced: parseInt != $parseInt }, {
	  parseInt: $parseInt
	});

	var global$E = global$1F;

	var nativePromiseConstructor = global$E.Promise;

	var global$D = global$1F;

	var TypeError$b = global$D.TypeError;

	var validateArgumentsLength$8 = function (passed, required) {
	  if (passed < required) throw TypeError$b('Not enough arguments');
	  return passed;
	};

	var userAgent$4 = engineUserAgent;

	var engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent$4);

	var global$C = global$1F;
	var apply$8 = functionApply$1;
	var bind$6 = functionBindContext;
	var isCallable$9 = isCallable$v;
	var hasOwn$a = hasOwnProperty_1;
	var fails$u = fails$1f;
	var html = html$2;
	var arraySlice$5 = arraySlice$b;
	var createElement = documentCreateElement$2;
	var validateArgumentsLength$7 = validateArgumentsLength$8;
	var IS_IOS$1 = engineIsIos;
	var IS_NODE$4 = engineIsNode;

	var set$3 = global$C.setImmediate;
	var clear = global$C.clearImmediate;
	var process$3 = global$C.process;
	var Dispatch = global$C.Dispatch;
	var Function$2 = global$C.Function;
	var MessageChannel = global$C.MessageChannel;
	var String$1 = global$C.String;
	var counter = 0;
	var queue$1 = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var location, defer$1, channel, port;

	try {
	  // Deno throws a ReferenceError on `location` access without `--location` flag
	  location = global$C.location;
	} catch (error) { /* empty */ }

	var run = function (id) {
	  if (hasOwn$a(queue$1, id)) {
	    var fn = queue$1[id];
	    delete queue$1[id];
	    fn();
	  }
	};

	var runner = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function (event) {
	  run(event.data);
	};

	var post = function (id) {
	  // old engines have not location.origin
	  global$C.postMessage(String$1(id), location.protocol + '//' + location.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set$3 || !clear) {
	  set$3 = function setImmediate(handler) {
	    validateArgumentsLength$7(arguments.length, 1);
	    var fn = isCallable$9(handler) ? handler : Function$2(handler);
	    var args = arraySlice$5(arguments, 1);
	    queue$1[++counter] = function () {
	      apply$8(fn, undefined, args);
	    };
	    defer$1(counter);
	    return counter;
	  };
	  clear = function clearImmediate(id) {
	    delete queue$1[id];
	  };
	  // Node.js 0.8-
	  if (IS_NODE$4) {
	    defer$1 = function (id) {
	      process$3.nextTick(runner(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer$1 = function (id) {
	      Dispatch.now(runner(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel && !IS_IOS$1) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer$1 = bind$6(port.postMessage, port);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (
	    global$C.addEventListener &&
	    isCallable$9(global$C.postMessage) &&
	    !global$C.importScripts &&
	    location && location.protocol !== 'file:' &&
	    !fails$u(post)
	  ) {
	    defer$1 = post;
	    global$C.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in createElement('script')) {
	    defer$1 = function (id) {
	      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer$1 = function (id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task$2 = {
	  set: set$3,
	  clear: clear
	};

	var userAgent$3 = engineUserAgent;
	var global$B = global$1F;

	var engineIsIosPebble = /ipad|iphone|ipod/i.test(userAgent$3) && global$B.Pebble !== undefined;

	var userAgent$2 = engineUserAgent;

	var engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(userAgent$2);

	var global$A = global$1F;
	var bind$5 = functionBindContext;
	var getOwnPropertyDescriptor$3 = objectGetOwnPropertyDescriptor.f;
	var macrotask = task$2.set;
	var IS_IOS = engineIsIos;
	var IS_IOS_PEBBLE = engineIsIosPebble;
	var IS_WEBOS_WEBKIT = engineIsWebosWebkit;
	var IS_NODE$3 = engineIsNode;

	var MutationObserver = global$A.MutationObserver || global$A.WebKitMutationObserver;
	var document$2 = global$A.document;
	var process$2 = global$A.process;
	var Promise$3 = global$A.Promise;
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$3(global$A, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

	var flush, head$1, last$2, notify$1, toggle, node, promise, then;

	// modern engines have queueMicrotask method
	if (!queueMicrotask) {
	  flush = function () {
	    var parent, fn;
	    if (IS_NODE$3 && (parent = process$2.domain)) parent.exit();
	    while (head$1) {
	      fn = head$1.fn;
	      head$1 = head$1.next;
	      try {
	        fn();
	      } catch (error) {
	        if (head$1) notify$1();
	        else last$2 = undefined;
	        throw error;
	      }
	    } last$2 = undefined;
	    if (parent) parent.enter();
	  };

	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
	  if (!IS_IOS && !IS_NODE$3 && !IS_WEBOS_WEBKIT && MutationObserver && document$2) {
	    toggle = true;
	    node = document$2.createTextNode('');
	    new MutationObserver(flush).observe(node, { characterData: true });
	    notify$1 = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (!IS_IOS_PEBBLE && Promise$3 && Promise$3.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$3.resolve(undefined);
	    // workaround of WebKit ~ iOS Safari 10.1 bug
	    promise.constructor = Promise$3;
	    then = bind$5(promise.then, promise);
	    notify$1 = function () {
	      then(flush);
	    };
	  // Node.js without promises
	  } else if (IS_NODE$3) {
	    notify$1 = function () {
	      process$2.nextTick(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    // strange IE + webpack dev server bug - use .bind(global)
	    macrotask = bind$5(macrotask, global$A);
	    notify$1 = function () {
	      macrotask(flush);
	    };
	  }
	}

	var microtask$2 = queueMicrotask || function (fn) {
	  var task = { fn: fn, next: undefined };
	  if (last$2) last$2.next = task;
	  if (!head$1) {
	    head$1 = task;
	    notify$1();
	  } last$2 = task;
	};

	var newPromiseCapability$2 = {};

	var aCallable$6 = aCallable$g;

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aCallable$6(resolve);
	  this.reject = aCallable$6(reject);
	};

	// `NewPromiseCapability` abstract operation
	// https://tc39.es/ecma262/#sec-newpromisecapability
	newPromiseCapability$2.f = function (C) {
	  return new PromiseCapability(C);
	};

	var anObject$n = anObject$C;
	var isObject$k = isObject$I;
	var newPromiseCapability$1 = newPromiseCapability$2;

	var promiseResolve$2 = function (C, x) {
	  anObject$n(C);
	  if (isObject$k(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability$1.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var global$z = global$1F;

	var hostReportErrors$1 = function (a, b) {
	  var console = global$z.console;
	  if (console && console.error) {
	    arguments.length == 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform$3 = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var Queue$1 = function () {
	  this.head = null;
	  this.tail = null;
	};

	Queue$1.prototype = {
	  add: function (item) {
	    var entry = { item: item, next: null };
	    if (this.head) this.tail.next = entry;
	    else this.head = entry;
	    this.tail = entry;
	  },
	  get: function () {
	    var entry = this.head;
	    if (entry) {
	      this.head = entry.next;
	      if (this.tail === entry) this.tail = null;
	      return entry.item;
	    }
	  }
	};

	var queue = Queue$1;

	var engineIsBrowser = typeof window == 'object';

	var $$Z = _export;
	var global$y = global$1F;
	var getBuiltIn$a = getBuiltIn$l;
	var call$j = functionCall;
	var NativePromise$1 = nativePromiseConstructor;
	var redefine$8 = redefineExports;
	var redefineAll$3 = redefineAll$6;
	var setPrototypeOf$1 = objectSetPrototypeOf$1;
	var setToStringTag$4 = setToStringTag$c;
	var setSpecies$2 = setSpecies$6;
	var aCallable$5 = aCallable$g;
	var isCallable$8 = isCallable$v;
	var isObject$j = isObject$I;
	var anInstance$6 = anInstance$a;
	var inspectSource = inspectSource$4;
	var iterate$4 = iterate$9;
	var checkCorrectnessOfIteration$1 = checkCorrectnessOfIteration$4;
	var speciesConstructor$4 = speciesConstructor$6;
	var task$1 = task$2.set;
	var microtask$1 = microtask$2;
	var promiseResolve$1 = promiseResolve$2;
	var hostReportErrors = hostReportErrors$1;
	var newPromiseCapabilityModule$2 = newPromiseCapability$2;
	var perform$2 = perform$3;
	var Queue = queue;
	var InternalStateModule$7 = internalState;
	var isForced$1 = isForced_1;
	var wellKnownSymbol$b = wellKnownSymbol$y;
	var IS_BROWSER = engineIsBrowser;
	var IS_NODE$2 = engineIsNode;
	var V8_VERSION = engineV8Version;

	var SPECIES$1 = wellKnownSymbol$b('species');
	var PROMISE = 'Promise';

	var getInternalState$7 = InternalStateModule$7.getterFor(PROMISE);
	var setInternalState$7 = InternalStateModule$7.set;
	var getInternalPromiseState = InternalStateModule$7.getterFor(PROMISE);
	var NativePromisePrototype = NativePromise$1 && NativePromise$1.prototype;
	var PromiseConstructor = NativePromise$1;
	var PromisePrototype = NativePromisePrototype;
	var TypeError$a = global$y.TypeError;
	var document$1 = global$y.document;
	var process$1 = global$y.process;
	var newPromiseCapability = newPromiseCapabilityModule$2.f;
	var newGenericPromiseCapability = newPromiseCapability;

	var DISPATCH_EVENT = !!(document$1 && document$1.createEvent && global$y.dispatchEvent);
	var NATIVE_REJECTION_EVENT = isCallable$8(global$y.PromiseRejectionEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var SUBCLASSING = false;

	var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

	var FORCED$9 = isForced$1(PROMISE, function () {
	  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
	  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);
	  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	  // We can't detect it synchronously, so just check versions
	  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
	  // We can't use @@species feature detection in V8 since it causes
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679
	  if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;
	  // Detect correctness of subclassing with @@species support
	  var promise = new PromiseConstructor(function (resolve) { resolve(1); });
	  var FakePromise = function (exec) {
	    exec(function () { /* empty */ }, function () { /* empty */ });
	  };
	  var constructor = promise.constructor = {};
	  constructor[SPECIES$1] = FakePromise;
	  SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
	  if (!SUBCLASSING) return true;
	  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	  return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
	});

	var INCORRECT_ITERATION = FORCED$9 || !checkCorrectnessOfIteration$1(function (iterable) {
	  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
	});

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject$j(it) && isCallable$8(then = it.then) ? then : false;
	};

	var callReaction = function (reaction, state) {
	  var value = state.value;
	  var ok = state.state == FULFILLED;
	  var handler = ok ? reaction.ok : reaction.fail;
	  var resolve = reaction.resolve;
	  var reject = reaction.reject;
	  var domain = reaction.domain;
	  var result, then, exited;
	  try {
	    if (handler) {
	      if (!ok) {
	        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
	        state.rejection = HANDLED;
	      }
	      if (handler === true) result = value;
	      else {
	        if (domain) domain.enter();
	        result = handler(value); // can throw
	        if (domain) {
	          domain.exit();
	          exited = true;
	        }
	      }
	      if (result === reaction.promise) {
	        reject(TypeError$a('Promise-chain cycle'));
	      } else if (then = isThenable(result)) {
	        call$j(then, result, resolve, reject);
	      } else resolve(result);
	    } else reject(value);
	  } catch (error) {
	    if (domain && !exited) domain.exit();
	    reject(error);
	  }
	};

	var notify = function (state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  microtask$1(function () {
	    var reactions = state.reactions;
	    var reaction;
	    while (reaction = reactions.get()) {
	      callReaction(reaction, state);
	    }
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT) {
	    event = document$1.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global$y.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (!NATIVE_REJECTION_EVENT && (handler = global$y['on' + name])) handler(event);
	  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (state) {
	  call$j(task$1, global$y, function () {
	    var promise = state.facade;
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform$2(function () {
	        if (IS_NODE$2) {
	          process$1.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = IS_NODE$2 || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (state) {
	  call$j(task$1, global$y, function () {
	    var promise = state.facade;
	    if (IS_NODE$2) {
	      process$1.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind$4 = function (fn, state, unwrap) {
	  return function (value) {
	    fn(state, value, unwrap);
	  };
	};

	var internalReject = function (state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify(state, true);
	};

	var internalResolve = function (state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (state.facade === value) throw TypeError$a("Promise can't be resolved itself");
	    var then = isThenable(value);
	    if (then) {
	      microtask$1(function () {
	        var wrapper = { done: false };
	        try {
	          call$j(then, value,
	            bind$4(internalResolve, wrapper, state),
	            bind$4(internalReject, wrapper, state)
	          );
	        } catch (error) {
	          internalReject(wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify(state, false);
	    }
	  } catch (error) {
	    internalReject({ done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED$9) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance$6(this, PromisePrototype);
	    aCallable$5(executor);
	    call$j(Internal, this);
	    var state = getInternalState$7(this);
	    try {
	      executor(bind$4(internalResolve, state), bind$4(internalReject, state));
	    } catch (error) {
	      internalReject(state, error);
	    }
	  };
	  PromisePrototype = PromiseConstructor.prototype;
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  Internal = function Promise(executor) {
	    setInternalState$7(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: new Queue(),
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };
	  Internal.prototype = redefineAll$3(PromisePrototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.es/ecma262/#sec-promise.prototype.then
	    // eslint-disable-next-line unicorn/no-thenable -- safe
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState(this);
	      var reaction = newPromiseCapability(speciesConstructor$4(this, PromiseConstructor));
	      state.parent = true;
	      reaction.ok = isCallable$8(onFulfilled) ? onFulfilled : true;
	      reaction.fail = isCallable$8(onRejected) && onRejected;
	      reaction.domain = IS_NODE$2 ? process$1.domain : undefined;
	      if (state.state == PENDING) state.reactions.add(reaction);
	      else microtask$1(function () {
	        callReaction(reaction, state);
	      });
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.es/ecma262/#sec-promise.prototype.catch
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalState$7(promise);
	    this.promise = promise;
	    this.resolve = bind$4(internalResolve, state);
	    this.reject = bind$4(internalReject, state);
	  };
	  newPromiseCapabilityModule$2.f = newPromiseCapability = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };

	  if (isCallable$8(NativePromise$1) && NativePromisePrototype !== Object.prototype) {
	    nativeThen = NativePromisePrototype.then;

	    if (!SUBCLASSING) {
	      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
	      redefine$8(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
	        var that = this;
	        return new PromiseConstructor(function (resolve, reject) {
	          call$j(nativeThen, that, resolve, reject);
	        }).then(onFulfilled, onRejected);
	      // https://github.com/zloirock/core-js/issues/640
	      }, { unsafe: true });

	      // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
	      redefine$8(NativePromisePrototype, 'catch', PromisePrototype['catch'], { unsafe: true });
	    }

	    // make `.constructor === Promise` work for native promise-based APIs
	    try {
	      delete NativePromisePrototype.constructor;
	    } catch (error) { /* empty */ }

	    // make `instanceof Promise` work for native promise-based APIs
	    if (setPrototypeOf$1) {
	      setPrototypeOf$1(NativePromisePrototype, PromisePrototype);
	    }
	  }
	}

	$$Z({ global: true, wrap: true, forced: FORCED$9 }, {
	  Promise: PromiseConstructor
	});

	setToStringTag$4(PromiseConstructor, PROMISE, false);
	setSpecies$2(PROMISE);

	PromiseWrapper = getBuiltIn$a(PROMISE);

	// statics
	$$Z({ target: PROMISE, stat: true, forced: FORCED$9 }, {
	  // `Promise.reject` method
	  // https://tc39.es/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    call$j(capability.reject, undefined, r);
	    return capability.promise;
	  }
	});

	$$Z({ target: PROMISE, stat: true, forced: FORCED$9 }, {
	  // `Promise.resolve` method
	  // https://tc39.es/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve$1(this, x);
	  }
	});

	$$Z({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
	  // `Promise.all` method
	  // https://tc39.es/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform$2(function () {
	      var $promiseResolve = aCallable$5(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate$4(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        remaining++;
	        call$j($promiseResolve, C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.es/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = perform$2(function () {
	      var $promiseResolve = aCallable$5(C.resolve);
	      iterate$4(iterable, function (promise) {
	        call$j($promiseResolve, C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var $$Y = _export;
	var call$i = functionCall;
	var aCallable$4 = aCallable$g;
	var newPromiseCapabilityModule$1 = newPromiseCapability$2;
	var perform$1 = perform$3;
	var iterate$3 = iterate$9;

	// `Promise.allSettled` method
	// https://tc39.es/ecma262/#sec-promise.allsettled
	$$Y({ target: 'Promise', stat: true }, {
	  allSettled: function allSettled(iterable) {
	    var C = this;
	    var capability = newPromiseCapabilityModule$1.f(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform$1(function () {
	      var promiseResolve = aCallable$4(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate$3(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        remaining++;
	        call$i(promiseResolve, C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = { status: 'fulfilled', value: value };
	          --remaining || resolve(values);
	        }, function (error) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = { status: 'rejected', reason: error };
	          --remaining || resolve(values);
	        });
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var $$X = _export;
	var aCallable$3 = aCallable$g;
	var getBuiltIn$9 = getBuiltIn$l;
	var call$h = functionCall;
	var newPromiseCapabilityModule = newPromiseCapability$2;
	var perform = perform$3;
	var iterate$2 = iterate$9;

	var PROMISE_ANY_ERROR = 'No one promise resolved';

	// `Promise.any` method
	// https://tc39.es/ecma262/#sec-promise.any
	$$X({ target: 'Promise', stat: true }, {
	  any: function any(iterable) {
	    var C = this;
	    var AggregateError = getBuiltIn$9('AggregateError');
	    var capability = newPromiseCapabilityModule.f(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var promiseResolve = aCallable$3(C.resolve);
	      var errors = [];
	      var counter = 0;
	      var remaining = 1;
	      var alreadyResolved = false;
	      iterate$2(iterable, function (promise) {
	        var index = counter++;
	        var alreadyRejected = false;
	        remaining++;
	        call$h(promiseResolve, C, promise).then(function (value) {
	          if (alreadyRejected || alreadyResolved) return;
	          alreadyResolved = true;
	          resolve(value);
	        }, function (error) {
	          if (alreadyRejected || alreadyResolved) return;
	          alreadyRejected = true;
	          errors[index] = error;
	          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
	        });
	      });
	      --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var $$W = _export;
	var NativePromise = nativePromiseConstructor;
	var fails$t = fails$1f;
	var getBuiltIn$8 = getBuiltIn$l;
	var isCallable$7 = isCallable$v;
	var speciesConstructor$3 = speciesConstructor$6;
	var promiseResolve = promiseResolve$2;
	var redefine$7 = redefineExports;

	// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
	var NON_GENERIC = !!NativePromise && fails$t(function () {
	  // eslint-disable-next-line unicorn/no-thenable -- required for testing
	  NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
	});

	// `Promise.prototype.finally` method
	// https://tc39.es/ecma262/#sec-promise.prototype.finally
	$$W({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
	  'finally': function (onFinally) {
	    var C = speciesConstructor$3(this, getBuiltIn$8('Promise'));
	    var isFunction = isCallable$7(onFinally);
	    return this.then(
	      isFunction ? function (x) {
	        return promiseResolve(C, onFinally()).then(function () { return x; });
	      } : onFinally,
	      isFunction ? function (e) {
	        return promiseResolve(C, onFinally()).then(function () { throw e; });
	      } : onFinally
	    );
	  }
	});

	// makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`
	if (isCallable$7(NativePromise)) {
	  var method = getBuiltIn$8('Promise').prototype['finally'];
	  if (NativePromise.prototype['finally'] !== method) {
	    redefine$7(NativePromise.prototype, 'finally', method, { unsafe: true });
	  }
	}

	var $$V = _export;
	var functionApply = functionApply$1;
	var aCallable$2 = aCallable$g;
	var anObject$m = anObject$C;
	var fails$s = fails$1f;

	// MS Edge argumentsList argument is optional
	var OPTIONAL_ARGUMENTS_LIST = !fails$s(function () {
	  // eslint-disable-next-line es/no-reflect -- required for testing
	  Reflect.apply(function () { /* empty */ });
	});

	// `Reflect.apply` method
	// https://tc39.es/ecma262/#sec-reflect.apply
	$$V({ target: 'Reflect', stat: true, forced: OPTIONAL_ARGUMENTS_LIST }, {
	  apply: function apply(target, thisArgument, argumentsList) {
	    return functionApply(aCallable$2(target), thisArgument, anObject$m(argumentsList));
	  }
	});

	var $$U = _export;
	var getBuiltIn$7 = getBuiltIn$l;
	var apply$7 = functionApply$1;
	var bind$3 = functionBind;
	var aConstructor$1 = aConstructor$3;
	var anObject$l = anObject$C;
	var isObject$i = isObject$I;
	var create$4 = objectCreate$1;
	var fails$r = fails$1f;

	var nativeConstruct = getBuiltIn$7('Reflect', 'construct');
	var ObjectPrototype = Object.prototype;
	var push$7 = [].push;

	// `Reflect.construct` method
	// https://tc39.es/ecma262/#sec-reflect.construct
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails$r(function () {
	  function F() { /* empty */ }
	  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);
	});

	var ARGS_BUG = !fails$r(function () {
	  nativeConstruct(function () { /* empty */ });
	});

	var FORCED$8 = NEW_TARGET_BUG || ARGS_BUG;

	$$U({ target: 'Reflect', stat: true, forced: FORCED$8, sham: FORCED$8 }, {
	  construct: function construct(Target, args /* , newTarget */) {
	    aConstructor$1(Target);
	    anObject$l(args);
	    var newTarget = arguments.length < 3 ? Target : aConstructor$1(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0: return new Target();
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      apply$7(push$7, $args, args);
	      return new (apply$7(bind$3, Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = create$4(isObject$i(proto) ? proto : ObjectPrototype);
	    var result = apply$7(Target, instance, args);
	    return isObject$i(result) ? result : instance;
	  }
	});

	var $$T = _export;
	var DESCRIPTORS$8 = descriptors;
	var anObject$k = anObject$C;
	var toPropertyKey$1 = toPropertyKey$8;
	var definePropertyModule$2 = objectDefineProperty;
	var fails$q = fails$1f;

	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	var ERROR_INSTEAD_OF_FALSE = fails$q(function () {
	  // eslint-disable-next-line es/no-reflect -- required for testing
	  Reflect.defineProperty(definePropertyModule$2.f({}, 1, { value: 1 }), 1, { value: 2 });
	});

	// `Reflect.defineProperty` method
	// https://tc39.es/ecma262/#sec-reflect.defineproperty
	$$T({ target: 'Reflect', stat: true, forced: ERROR_INSTEAD_OF_FALSE, sham: !DESCRIPTORS$8 }, {
	  defineProperty: function defineProperty(target, propertyKey, attributes) {
	    anObject$k(target);
	    var key = toPropertyKey$1(propertyKey);
	    anObject$k(attributes);
	    try {
	      definePropertyModule$2.f(target, key, attributes);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	var $$S = _export;
	var anObject$j = anObject$C;
	var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;

	// `Reflect.deleteProperty` method
	// https://tc39.es/ecma262/#sec-reflect.deleteproperty
	$$S({ target: 'Reflect', stat: true }, {
	  deleteProperty: function deleteProperty(target, propertyKey) {
	    var descriptor = getOwnPropertyDescriptor$2(anObject$j(target), propertyKey);
	    return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
	  }
	});

	var hasOwn$9 = hasOwnProperty_1;

	var isDataDescriptor$2 = function (descriptor) {
	  return descriptor !== undefined && (hasOwn$9(descriptor, 'value') || hasOwn$9(descriptor, 'writable'));
	};

	var $$R = _export;
	var call$g = functionCall;
	var isObject$h = isObject$I;
	var anObject$i = anObject$C;
	var isDataDescriptor$1 = isDataDescriptor$2;
	var getOwnPropertyDescriptorModule$3 = objectGetOwnPropertyDescriptor;
	var getPrototypeOf$1 = objectGetPrototypeOf$1;

	// `Reflect.get` method
	// https://tc39.es/ecma262/#sec-reflect.get
	function get$4(target, propertyKey /* , receiver */) {
	  var receiver = arguments.length < 3 ? target : arguments[2];
	  var descriptor, prototype;
	  if (anObject$i(target) === receiver) return target[propertyKey];
	  descriptor = getOwnPropertyDescriptorModule$3.f(target, propertyKey);
	  if (descriptor) return isDataDescriptor$1(descriptor)
	    ? descriptor.value
	    : descriptor.get === undefined ? undefined : call$g(descriptor.get, receiver);
	  if (isObject$h(prototype = getPrototypeOf$1(target))) return get$4(prototype, propertyKey, receiver);
	}

	$$R({ target: 'Reflect', stat: true }, {
	  get: get$4
	});

	var $$Q = _export;
	var DESCRIPTORS$7 = descriptors;
	var anObject$h = anObject$C;
	var getOwnPropertyDescriptorModule$2 = objectGetOwnPropertyDescriptor;

	// `Reflect.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-reflect.getownpropertydescriptor
	$$Q({ target: 'Reflect', stat: true, sham: !DESCRIPTORS$7 }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
	    return getOwnPropertyDescriptorModule$2.f(anObject$h(target), propertyKey);
	  }
	});

	var $$P = _export;
	var anObject$g = anObject$C;
	var objectGetPrototypeOf = objectGetPrototypeOf$1;
	var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;

	// `Reflect.getPrototypeOf` method
	// https://tc39.es/ecma262/#sec-reflect.getprototypeof
	$$P({ target: 'Reflect', stat: true, sham: !CORRECT_PROTOTYPE_GETTER }, {
	  getPrototypeOf: function getPrototypeOf(target) {
	    return objectGetPrototypeOf(anObject$g(target));
	  }
	});

	var $$O = _export;

	// `Reflect.has` method
	// https://tc39.es/ecma262/#sec-reflect.has
	$$O({ target: 'Reflect', stat: true }, {
	  has: function has(target, propertyKey) {
	    return propertyKey in target;
	  }
	});

	var $$N = _export;
	var anObject$f = anObject$C;
	var $isExtensible = objectIsExtensible;

	// `Reflect.isExtensible` method
	// https://tc39.es/ecma262/#sec-reflect.isextensible
	$$N({ target: 'Reflect', stat: true }, {
	  isExtensible: function isExtensible(target) {
	    anObject$f(target);
	    return $isExtensible(target);
	  }
	});

	var $$M = _export;
	var ownKeys = ownKeys$3;

	// `Reflect.ownKeys` method
	// https://tc39.es/ecma262/#sec-reflect.ownkeys
	$$M({ target: 'Reflect', stat: true }, {
	  ownKeys: ownKeys
	});

	var $$L = _export;
	var getBuiltIn$6 = getBuiltIn$l;
	var anObject$e = anObject$C;
	var FREEZING = freezing;

	// `Reflect.preventExtensions` method
	// https://tc39.es/ecma262/#sec-reflect.preventextensions
	$$L({ target: 'Reflect', stat: true, sham: !FREEZING }, {
	  preventExtensions: function preventExtensions(target) {
	    anObject$e(target);
	    try {
	      var objectPreventExtensions = getBuiltIn$6('Object', 'preventExtensions');
	      if (objectPreventExtensions) objectPreventExtensions(target);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	var $$K = _export;
	var call$f = functionCall;
	var anObject$d = anObject$C;
	var isObject$g = isObject$I;
	var isDataDescriptor = isDataDescriptor$2;
	var fails$p = fails$1f;
	var definePropertyModule$1 = objectDefineProperty;
	var getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;
	var getPrototypeOf = objectGetPrototypeOf$1;
	var createPropertyDescriptor$4 = createPropertyDescriptor$c;

	// `Reflect.set` method
	// https://tc39.es/ecma262/#sec-reflect.set
	function set$2(target, propertyKey, V /* , receiver */) {
	  var receiver = arguments.length < 4 ? target : arguments[3];
	  var ownDescriptor = getOwnPropertyDescriptorModule$1.f(anObject$d(target), propertyKey);
	  var existingDescriptor, prototype, setter;
	  if (!ownDescriptor) {
	    if (isObject$g(prototype = getPrototypeOf(target))) {
	      return set$2(prototype, propertyKey, V, receiver);
	    }
	    ownDescriptor = createPropertyDescriptor$4(0);
	  }
	  if (isDataDescriptor(ownDescriptor)) {
	    if (ownDescriptor.writable === false || !isObject$g(receiver)) return false;
	    if (existingDescriptor = getOwnPropertyDescriptorModule$1.f(receiver, propertyKey)) {
	      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
	      existingDescriptor.value = V;
	      definePropertyModule$1.f(receiver, propertyKey, existingDescriptor);
	    } else definePropertyModule$1.f(receiver, propertyKey, createPropertyDescriptor$4(0, V));
	  } else {
	    setter = ownDescriptor.set;
	    if (setter === undefined) return false;
	    call$f(setter, receiver, V);
	  } return true;
	}

	// MS Edge 17-18 Reflect.set allows setting the property to object
	// with non-writable property on the prototype
	var MS_EDGE_BUG = fails$p(function () {
	  var Constructor = function () { /* empty */ };
	  var object = definePropertyModule$1.f(new Constructor(), 'a', { configurable: true });
	  // eslint-disable-next-line es/no-reflect -- required for testing
	  return Reflect.set(Constructor.prototype, 'a', 1, object) !== false;
	});

	$$K({ target: 'Reflect', stat: true, forced: MS_EDGE_BUG }, {
	  set: set$2
	});

	var $$J = _export;
	var anObject$c = anObject$C;
	var aPossiblePrototype = aPossiblePrototype$2;
	var objectSetPrototypeOf = objectSetPrototypeOf$1;

	// `Reflect.setPrototypeOf` method
	// https://tc39.es/ecma262/#sec-reflect.setprototypeof
	if (objectSetPrototypeOf) $$J({ target: 'Reflect', stat: true }, {
	  setPrototypeOf: function setPrototypeOf(target, proto) {
	    anObject$c(target);
	    aPossiblePrototype(proto);
	    try {
	      objectSetPrototypeOf(target, proto);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	var $$I = _export;
	var global$x = global$1F;
	var setToStringTag$3 = setToStringTag$c;

	$$I({ global: true }, { Reflect: {} });

	// Reflect[@@toStringTag] property
	// https://tc39.es/ecma262/#sec-reflect-@@tostringtag
	setToStringTag$3(global$x.Reflect, 'Reflect', true);

	var isObject$f = isObject$I;
	var classof$7 = classofRaw$1;
	var wellKnownSymbol$a = wellKnownSymbol$y;

	var MATCH$2 = wellKnownSymbol$a('match');

	// `IsRegExp` abstract operation
	// https://tc39.es/ecma262/#sec-isregexp
	var isRegexp = function (it) {
	  var isRegExp;
	  return isObject$f(it) && ((isRegExp = it[MATCH$2]) !== undefined ? !!isRegExp : classof$7(it) == 'RegExp');
	};

	var anObject$b = anObject$C;

	// `RegExp.prototype.flags` getter implementation
	// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
	var regexpFlags$1 = function () {
	  var that = anObject$b(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.dotAll) result += 's';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	var fails$o = fails$1f;
	var global$w = global$1F;

	// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
	var $RegExp$2 = global$w.RegExp;

	var UNSUPPORTED_Y$3 = fails$o(function () {
	  var re = $RegExp$2('a', 'y');
	  re.lastIndex = 2;
	  return re.exec('abcd') != null;
	});

	// UC Browser bug
	// https://github.com/zloirock/core-js/issues/1008
	var MISSED_STICKY$2 = UNSUPPORTED_Y$3 || fails$o(function () {
	  return !$RegExp$2('a', 'y').sticky;
	});

	var BROKEN_CARET = UNSUPPORTED_Y$3 || fails$o(function () {
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
	  var re = $RegExp$2('^r', 'gy');
	  re.lastIndex = 2;
	  return re.exec('str') != null;
	});

	var regexpStickyHelpers = {
	  BROKEN_CARET: BROKEN_CARET,
	  MISSED_STICKY: MISSED_STICKY$2,
	  UNSUPPORTED_Y: UNSUPPORTED_Y$3
	};

	var fails$n = fails$1f;
	var global$v = global$1F;

	// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
	var $RegExp$1 = global$v.RegExp;

	var regexpUnsupportedDotAll = fails$n(function () {
	  var re = $RegExp$1('.', 's');
	  return !(re.dotAll && re.exec('\n') && re.flags === 's');
	});

	var fails$m = fails$1f;
	var global$u = global$1F;

	// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
	var $RegExp = global$u.RegExp;

	var regexpUnsupportedNcg = fails$m(function () {
	  var re = $RegExp('(?<a>b)', 'g');
	  return re.exec('b').groups.a !== 'b' ||
	    'b'.replace(re, '$<a>c') !== 'bc';
	});

	var DESCRIPTORS$6 = descriptors;
	var global$t = global$1F;
	var uncurryThis$x = functionUncurryThis;
	var isForced = isForced_1;
	var inheritIfRequired$2 = inheritIfRequired$6;
	var createNonEnumerableProperty$5 = createNonEnumerableProperty$f;
	var defineProperty$7 = objectDefineProperty.f;
	var getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
	var isPrototypeOf$3 = objectIsPrototypeOf;
	var isRegExp$4 = isRegexp;
	var toString$r = toString$C;
	var regExpFlags$5 = regexpFlags$1;
	var stickyHelpers$2 = regexpStickyHelpers;
	var redefine$6 = redefineExports;
	var fails$l = fails$1f;
	var hasOwn$8 = hasOwnProperty_1;
	var enforceInternalState$1 = internalState.enforce;
	var setSpecies$1 = setSpecies$6;
	var wellKnownSymbol$9 = wellKnownSymbol$y;
	var UNSUPPORTED_DOT_ALL$2 = regexpUnsupportedDotAll;
	var UNSUPPORTED_NCG$1 = regexpUnsupportedNcg;

	var MATCH$1 = wellKnownSymbol$9('match');
	var NativeRegExp = global$t.RegExp;
	var RegExpPrototype$7 = NativeRegExp.prototype;
	var SyntaxError$1 = global$t.SyntaxError;
	var getFlags$4 = uncurryThis$x(regExpFlags$5);
	var exec$6 = uncurryThis$x(RegExpPrototype$7.exec);
	var charAt$b = uncurryThis$x(''.charAt);
	var replace$7 = uncurryThis$x(''.replace);
	var stringIndexOf$4 = uncurryThis$x(''.indexOf);
	var stringSlice$b = uncurryThis$x(''.slice);
	// TODO: Use only propper RegExpIdentifierName
	var IS_NCG = /^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/;
	var re1 = /a/g;
	var re2 = /a/g;

	// "new" should create a new object, old webkit bug
	var CORRECT_NEW = new NativeRegExp(re1) !== re1;

	var MISSED_STICKY$1 = stickyHelpers$2.MISSED_STICKY;
	var UNSUPPORTED_Y$2 = stickyHelpers$2.UNSUPPORTED_Y;

	var BASE_FORCED = DESCRIPTORS$6 &&
	  (!CORRECT_NEW || MISSED_STICKY$1 || UNSUPPORTED_DOT_ALL$2 || UNSUPPORTED_NCG$1 || fails$l(function () {
	    re2[MATCH$1] = false;
	    // RegExp constructor can alter flags and IsRegExp works correct with @@match
	    return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
	  }));

	var handleDotAll = function (string) {
	  var length = string.length;
	  var index = 0;
	  var result = '';
	  var brackets = false;
	  var chr;
	  for (; index <= length; index++) {
	    chr = charAt$b(string, index);
	    if (chr === '\\') {
	      result += chr + charAt$b(string, ++index);
	      continue;
	    }
	    if (!brackets && chr === '.') {
	      result += '[\\s\\S]';
	    } else {
	      if (chr === '[') {
	        brackets = true;
	      } else if (chr === ']') {
	        brackets = false;
	      } result += chr;
	    }
	  } return result;
	};

	var handleNCG = function (string) {
	  var length = string.length;
	  var index = 0;
	  var result = '';
	  var named = [];
	  var names = {};
	  var brackets = false;
	  var ncg = false;
	  var groupid = 0;
	  var groupname = '';
	  var chr;
	  for (; index <= length; index++) {
	    chr = charAt$b(string, index);
	    if (chr === '\\') {
	      chr = chr + charAt$b(string, ++index);
	    } else if (chr === ']') {
	      brackets = false;
	    } else if (!brackets) switch (true) {
	      case chr === '[':
	        brackets = true;
	        break;
	      case chr === '(':
	        if (exec$6(IS_NCG, stringSlice$b(string, index + 1))) {
	          index += 2;
	          ncg = true;
	        }
	        result += chr;
	        groupid++;
	        continue;
	      case chr === '>' && ncg:
	        if (groupname === '' || hasOwn$8(names, groupname)) {
	          throw new SyntaxError$1('Invalid capture group name');
	        }
	        names[groupname] = true;
	        named[named.length] = [groupname, groupid];
	        ncg = false;
	        groupname = '';
	        continue;
	    }
	    if (ncg) groupname += chr;
	    else result += chr;
	  } return [result, named];
	};

	// `RegExp` constructor
	// https://tc39.es/ecma262/#sec-regexp-constructor
	if (isForced('RegExp', BASE_FORCED)) {
	  var RegExpWrapper = function RegExp(pattern, flags) {
	    var thisIsRegExp = isPrototypeOf$3(RegExpPrototype$7, this);
	    var patternIsRegExp = isRegExp$4(pattern);
	    var flagsAreUndefined = flags === undefined;
	    var groups = [];
	    var rawPattern = pattern;
	    var rawFlags, dotAll, sticky, handled, result, state;

	    if (!thisIsRegExp && patternIsRegExp && flagsAreUndefined && pattern.constructor === RegExpWrapper) {
	      return pattern;
	    }

	    if (patternIsRegExp || isPrototypeOf$3(RegExpPrototype$7, pattern)) {
	      pattern = pattern.source;
	      if (flagsAreUndefined) flags = 'flags' in rawPattern ? rawPattern.flags : getFlags$4(rawPattern);
	    }

	    pattern = pattern === undefined ? '' : toString$r(pattern);
	    flags = flags === undefined ? '' : toString$r(flags);
	    rawPattern = pattern;

	    if (UNSUPPORTED_DOT_ALL$2 && 'dotAll' in re1) {
	      dotAll = !!flags && stringIndexOf$4(flags, 's') > -1;
	      if (dotAll) flags = replace$7(flags, /s/g, '');
	    }

	    rawFlags = flags;

	    if (MISSED_STICKY$1 && 'sticky' in re1) {
	      sticky = !!flags && stringIndexOf$4(flags, 'y') > -1;
	      if (sticky && UNSUPPORTED_Y$2) flags = replace$7(flags, /y/g, '');
	    }

	    if (UNSUPPORTED_NCG$1) {
	      handled = handleNCG(pattern);
	      pattern = handled[0];
	      groups = handled[1];
	    }

	    result = inheritIfRequired$2(NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype$7, RegExpWrapper);

	    if (dotAll || sticky || groups.length) {
	      state = enforceInternalState$1(result);
	      if (dotAll) {
	        state.dotAll = true;
	        state.raw = RegExpWrapper(handleDotAll(pattern), rawFlags);
	      }
	      if (sticky) state.sticky = true;
	      if (groups.length) state.groups = groups;
	    }

	    if (pattern !== rawPattern) try {
	      // fails in old engines, but we have no alternatives for unsupported regex syntax
	      createNonEnumerableProperty$5(result, 'source', rawPattern === '' ? '(?:)' : rawPattern);
	    } catch (error) { /* empty */ }

	    return result;
	  };

	  var proxy = function (key) {
	    key in RegExpWrapper || defineProperty$7(RegExpWrapper, key, {
	      configurable: true,
	      get: function () { return NativeRegExp[key]; },
	      set: function (it) { NativeRegExp[key] = it; }
	    });
	  };

	  for (var keys$5 = getOwnPropertyNames$1(NativeRegExp), index$1 = 0; keys$5.length > index$1;) {
	    proxy(keys$5[index$1++]);
	  }

	  RegExpPrototype$7.constructor = RegExpWrapper;
	  RegExpWrapper.prototype = RegExpPrototype$7;
	  redefine$6(global$t, 'RegExp', RegExpWrapper);
	}

	// https://tc39.es/ecma262/#sec-get-regexp-@@species
	setSpecies$1('RegExp');

	var global$s = global$1F;
	var DESCRIPTORS$5 = descriptors;
	var UNSUPPORTED_DOT_ALL$1 = regexpUnsupportedDotAll;
	var classof$6 = classofRaw$1;
	var defineProperty$6 = objectDefineProperty.f;
	var getInternalState$6 = internalState.get;

	var RegExpPrototype$6 = RegExp.prototype;
	var TypeError$9 = global$s.TypeError;

	// `RegExp.prototype.dotAll` getter
	// https://tc39.es/ecma262/#sec-get-regexp.prototype.dotall
	if (DESCRIPTORS$5 && UNSUPPORTED_DOT_ALL$1) {
	  defineProperty$6(RegExpPrototype$6, 'dotAll', {
	    configurable: true,
	    get: function () {
	      if (this === RegExpPrototype$6) return undefined;
	      // We can't use InternalStateModule.getterFor because
	      // we don't add metadata for regexps created by a literal.
	      if (classof$6(this) === 'RegExp') {
	        return !!getInternalState$6(this).dotAll;
	      }
	      throw TypeError$9('Incompatible receiver, RegExp required');
	    }
	  });
	}

	/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
	/* eslint-disable regexp/no-useless-quantifier -- testing */
	var call$e = functionCall;
	var uncurryThis$w = functionUncurryThis;
	var toString$q = toString$C;
	var regexpFlags = regexpFlags$1;
	var stickyHelpers$1 = regexpStickyHelpers;
	var shared = sharedExports;
	var create$3 = objectCreate$1;
	var getInternalState$5 = internalState.get;
	var UNSUPPORTED_DOT_ALL = regexpUnsupportedDotAll;
	var UNSUPPORTED_NCG = regexpUnsupportedNcg;

	var nativeReplace = shared('native-string-replace', String.prototype.replace);
	var nativeExec = RegExp.prototype.exec;
	var patchedExec = nativeExec;
	var charAt$a = uncurryThis$w(''.charAt);
	var indexOf$2 = uncurryThis$w(''.indexOf);
	var replace$6 = uncurryThis$w(''.replace);
	var stringSlice$a = uncurryThis$w(''.slice);

	var UPDATES_LAST_INDEX_WRONG = (function () {
	  var re1 = /a/;
	  var re2 = /b*/g;
	  call$e(nativeExec, re1, 'a');
	  call$e(nativeExec, re2, 'a');
	  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
	})();

	var UNSUPPORTED_Y$1 = stickyHelpers$1.BROKEN_CARET;

	// nonparticipating capturing group, copied from es5-shim's String#split patch.
	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1 || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

	if (PATCH) {
	  patchedExec = function exec(string) {
	    var re = this;
	    var state = getInternalState$5(re);
	    var str = toString$q(string);
	    var raw = state.raw;
	    var result, reCopy, lastIndex, match, i, object, group;

	    if (raw) {
	      raw.lastIndex = re.lastIndex;
	      result = call$e(patchedExec, raw, str);
	      re.lastIndex = raw.lastIndex;
	      return result;
	    }

	    var groups = state.groups;
	    var sticky = UNSUPPORTED_Y$1 && re.sticky;
	    var flags = call$e(regexpFlags, re);
	    var source = re.source;
	    var charsAdded = 0;
	    var strCopy = str;

	    if (sticky) {
	      flags = replace$6(flags, 'y', '');
	      if (indexOf$2(flags, 'g') === -1) {
	        flags += 'g';
	      }

	      strCopy = stringSlice$a(str, re.lastIndex);
	      // Support anchored sticky behavior.
	      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt$a(str, re.lastIndex - 1) !== '\n')) {
	        source = '(?: ' + source + ')';
	        strCopy = ' ' + strCopy;
	        charsAdded++;
	      }
	      // ^(? + rx + ) is needed, in combination with some str slicing, to
	      // simulate the 'y' flag.
	      reCopy = new RegExp('^(?:' + source + ')', flags);
	    }

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
	    }
	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

	    match = call$e(nativeExec, sticky ? reCopy : re, strCopy);

	    if (sticky) {
	      if (match) {
	        match.input = stringSlice$a(match.input, charsAdded);
	        match[0] = stringSlice$a(match[0], charsAdded);
	        match.index = re.lastIndex;
	        re.lastIndex += match[0].length;
	      } else re.lastIndex = 0;
	    } else if (UPDATES_LAST_INDEX_WRONG && match) {
	      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
	    }
	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      call$e(nativeReplace, match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    if (match && groups) {
	      match.groups = object = create$3(null);
	      for (i = 0; i < groups.length; i++) {
	        group = groups[i];
	        object[group[0]] = match[group[1]];
	      }
	    }

	    return match;
	  };
	}

	var regexpExec$3 = patchedExec;

	var $$H = _export;
	var exec$5 = regexpExec$3;

	// `RegExp.prototype.exec` method
	// https://tc39.es/ecma262/#sec-regexp.prototype.exec
	$$H({ target: 'RegExp', proto: true, forced: /./.exec !== exec$5 }, {
	  exec: exec$5
	});

	var DESCRIPTORS$4 = descriptors;
	var objectDefinePropertyModule = objectDefineProperty;
	var regExpFlags$4 = regexpFlags$1;
	var fails$k = fails$1f;

	var RegExpPrototype$5 = RegExp.prototype;

	var FORCED$7 = DESCRIPTORS$4 && fails$k(function () {
	  // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	  return Object.getOwnPropertyDescriptor(RegExpPrototype$5, 'flags').get.call({ dotAll: true, sticky: true }) !== 'sy';
	});

	// `RegExp.prototype.flags` getter
	// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
	if (FORCED$7) objectDefinePropertyModule.f(RegExpPrototype$5, 'flags', {
	  configurable: true,
	  get: regExpFlags$4
	});

	var global$r = global$1F;
	var DESCRIPTORS$3 = descriptors;
	var MISSED_STICKY = regexpStickyHelpers.MISSED_STICKY;
	var classof$5 = classofRaw$1;
	var defineProperty$5 = objectDefineProperty.f;
	var getInternalState$4 = internalState.get;

	var RegExpPrototype$4 = RegExp.prototype;
	var TypeError$8 = global$r.TypeError;

	// `RegExp.prototype.sticky` getter
	// https://tc39.es/ecma262/#sec-get-regexp.prototype.sticky
	if (DESCRIPTORS$3 && MISSED_STICKY) {
	  defineProperty$5(RegExpPrototype$4, 'sticky', {
	    configurable: true,
	    get: function () {
	      if (this === RegExpPrototype$4) return undefined;
	      // We can't use InternalStateModule.getterFor because
	      // we don't add metadata for regexps created by a literal.
	      if (classof$5(this) === 'RegExp') {
	        return !!getInternalState$4(this).sticky;
	      }
	      throw TypeError$8('Incompatible receiver, RegExp required');
	    }
	  });
	}

	// TODO: Remove from `core-js@4` since it's moved to entry points

	var $$G = _export;
	var global$q = global$1F;
	var call$d = functionCall;
	var uncurryThis$v = functionUncurryThis;
	var isCallable$6 = isCallable$v;
	var isObject$e = isObject$I;

	var DELEGATES_TO_EXEC = function () {
	  var execCalled = false;
	  var re = /[ac]/;
	  re.exec = function () {
	    execCalled = true;
	    return /./.exec.apply(this, arguments);
	  };
	  return re.test('abc') === true && execCalled;
	}();

	var Error$4 = global$q.Error;
	var un$Test = uncurryThis$v(/./.test);

	// `RegExp.prototype.test` method
	// https://tc39.es/ecma262/#sec-regexp.prototype.test
	$$G({ target: 'RegExp', proto: true, forced: !DELEGATES_TO_EXEC }, {
	  test: function (str) {
	    var exec = this.exec;
	    if (!isCallable$6(exec)) return un$Test(this, str);
	    var result = call$d(exec, this, str);
	    if (result !== null && !isObject$e(result)) {
	      throw new Error$4('RegExp exec method returned something other than an Object or null');
	    }
	    return !!result;
	  }
	});

	var uncurryThis$u = functionUncurryThis;
	var PROPER_FUNCTION_NAME$1 = functionName.PROPER;
	var redefine$5 = redefineExports;
	var anObject$a = anObject$C;
	var isPrototypeOf$2 = objectIsPrototypeOf;
	var $toString$2 = toString$C;
	var fails$j = fails$1f;
	var regExpFlags$3 = regexpFlags$1;

	var TO_STRING = 'toString';
	var RegExpPrototype$3 = RegExp.prototype;
	var n$ToString = RegExpPrototype$3[TO_STRING];
	var getFlags$3 = uncurryThis$u(regExpFlags$3);

	var NOT_GENERIC = fails$j(function () { return n$ToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
	// FF44- RegExp#toString has a wrong name
	var INCORRECT_NAME = PROPER_FUNCTION_NAME$1 && n$ToString.name != TO_STRING;

	// `RegExp.prototype.toString` method
	// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
	if (NOT_GENERIC || INCORRECT_NAME) {
	  redefine$5(RegExp.prototype, TO_STRING, function toString() {
	    var R = anObject$a(this);
	    var p = $toString$2(R.source);
	    var rf = R.flags;
	    var f = $toString$2(rf === undefined && isPrototypeOf$2(RegExpPrototype$3, R) && !('flags' in RegExpPrototype$3) ? getFlags$3(R) : rf);
	    return '/' + p + '/' + f;
	  }, { unsafe: true });
	}

	var collection$2 = collection$4;
	var collectionStrong = collectionStrong$2;

	// `Set` constructor
	// https://tc39.es/ecma262/#sec-set-objects
	collection$2('Set', function (init) {
	  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	var $$F = _export;
	var uncurryThis$t = functionUncurryThis;
	var requireObjectCoercible$c = requireObjectCoercible$i;
	var toIntegerOrInfinity$5 = toIntegerOrInfinity$i;
	var toString$p = toString$C;
	var fails$i = fails$1f;

	var charAt$9 = uncurryThis$t(''.charAt);

	var FORCED$6 = fails$i(function () {
	  return '𠮷'.at(-2) !== '\uD842';
	});

	// `String.prototype.at` method
	// https://github.com/tc39/proposal-relative-indexing-method
	$$F({ target: 'String', proto: true, forced: FORCED$6 }, {
	  at: function at(index) {
	    var S = toString$p(requireObjectCoercible$c(this));
	    var len = S.length;
	    var relativeIndex = toIntegerOrInfinity$5(index);
	    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
	    return (k < 0 || k >= len) ? undefined : charAt$9(S, k);
	  }
	});

	var uncurryThis$s = functionUncurryThis;
	var toIntegerOrInfinity$4 = toIntegerOrInfinity$i;
	var toString$o = toString$C;
	var requireObjectCoercible$b = requireObjectCoercible$i;

	var charAt$8 = uncurryThis$s(''.charAt);
	var charCodeAt$2 = uncurryThis$s(''.charCodeAt);
	var stringSlice$9 = uncurryThis$s(''.slice);

	var createMethod = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = toString$o(requireObjectCoercible$b($this));
	    var position = toIntegerOrInfinity$4(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = charCodeAt$2(S, position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size
	      || (second = charCodeAt$2(S, position + 1)) < 0xDC00 || second > 0xDFFF
	        ? CONVERT_TO_STRING
	          ? charAt$8(S, position)
	          : first
	        : CONVERT_TO_STRING
	          ? stringSlice$9(S, position, position + 2)
	          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod(true)
	};

	var $$E = _export;
	var codeAt$1 = stringMultibyte.codeAt;

	// `String.prototype.codePointAt` method
	// https://tc39.es/ecma262/#sec-string.prototype.codepointat
	$$E({ target: 'String', proto: true }, {
	  codePointAt: function codePointAt(pos) {
	    return codeAt$1(this, pos);
	  }
	});

	var global$p = global$1F;
	var isRegExp$3 = isRegexp;

	var TypeError$7 = global$p.TypeError;

	var notARegexp = function (it) {
	  if (isRegExp$3(it)) {
	    throw TypeError$7("The method doesn't accept regular expressions");
	  } return it;
	};

	var wellKnownSymbol$8 = wellKnownSymbol$y;

	var MATCH = wellKnownSymbol$8('match');

	var correctIsRegexpLogic = function (METHOD_NAME) {
	  var regexp = /./;
	  try {
	    '/./'[METHOD_NAME](regexp);
	  } catch (error1) {
	    try {
	      regexp[MATCH] = false;
	      return '/./'[METHOD_NAME](regexp);
	    } catch (error2) { /* empty */ }
	  } return false;
	};

	var $$D = _export;
	var uncurryThis$r = functionUncurryThis;
	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var toLength$7 = toLength$d;
	var toString$n = toString$C;
	var notARegExp$2 = notARegexp;
	var requireObjectCoercible$a = requireObjectCoercible$i;
	var correctIsRegExpLogic$2 = correctIsRegexpLogic;

	// eslint-disable-next-line es/no-string-prototype-endswith -- safe
	var un$EndsWith = uncurryThis$r(''.endsWith);
	var slice = uncurryThis$r(''.slice);
	var min$5 = Math.min;

	var CORRECT_IS_REGEXP_LOGIC$1 = correctIsRegExpLogic$2('endsWith');
	// https://github.com/zloirock/core-js/pull/702
	var MDN_POLYFILL_BUG$1 = !CORRECT_IS_REGEXP_LOGIC$1 && !!function () {
	  var descriptor = getOwnPropertyDescriptor$1(String.prototype, 'endsWith');
	  return descriptor && !descriptor.writable;
	}();

	// `String.prototype.endsWith` method
	// https://tc39.es/ecma262/#sec-string.prototype.endswith
	$$D({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG$1 && !CORRECT_IS_REGEXP_LOGIC$1 }, {
	  endsWith: function endsWith(searchString /* , endPosition = @length */) {
	    var that = toString$n(requireObjectCoercible$a(this));
	    notARegExp$2(searchString);
	    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
	    var len = that.length;
	    var end = endPosition === undefined ? len : min$5(toLength$7(endPosition), len);
	    var search = toString$n(searchString);
	    return un$EndsWith
	      ? un$EndsWith(that, search, end)
	      : slice(that, end - search.length, end) === search;
	  }
	});

	var $$C = _export;
	var global$o = global$1F;
	var uncurryThis$q = functionUncurryThis;
	var toAbsoluteIndex$1 = toAbsoluteIndex$9;

	var RangeError$6 = global$o.RangeError;
	var fromCharCode$3 = String.fromCharCode;
	// eslint-disable-next-line es/no-string-fromcodepoint -- required for testing
	var $fromCodePoint = String.fromCodePoint;
	var join$5 = uncurryThis$q([].join);

	// length should be 1, old FF problem
	var INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1;

	// `String.fromCodePoint` method
	// https://tc39.es/ecma262/#sec-string.fromcodepoint
	$$C({ target: 'String', stat: true, forced: INCORRECT_LENGTH }, {
	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  fromCodePoint: function fromCodePoint(x) {
	    var elements = [];
	    var length = arguments.length;
	    var i = 0;
	    var code;
	    while (length > i) {
	      code = +arguments[i++];
	      if (toAbsoluteIndex$1(code, 0x10FFFF) !== code) throw RangeError$6(code + ' is not a valid code point');
	      elements[i] = code < 0x10000
	        ? fromCharCode$3(code)
	        : fromCharCode$3(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00);
	    } return join$5(elements, '');
	  }
	});

	var $$B = _export;
	var uncurryThis$p = functionUncurryThis;
	var notARegExp$1 = notARegexp;
	var requireObjectCoercible$9 = requireObjectCoercible$i;
	var toString$m = toString$C;
	var correctIsRegExpLogic$1 = correctIsRegexpLogic;

	var stringIndexOf$3 = uncurryThis$p(''.indexOf);

	// `String.prototype.includes` method
	// https://tc39.es/ecma262/#sec-string.prototype.includes
	$$B({ target: 'String', proto: true, forced: !correctIsRegExpLogic$1('includes') }, {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~stringIndexOf$3(
	      toString$m(requireObjectCoercible$9(this)),
	      toString$m(notARegExp$1(searchString)),
	      arguments.length > 1 ? arguments[1] : undefined
	    );
	  }
	});

	var charAt$7 = stringMultibyte.charAt;
	var toString$l = toString$C;
	var InternalStateModule$6 = internalState;
	var defineIterator = defineIterator$3;

	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$6 = InternalStateModule$6.set;
	var getInternalState$3 = InternalStateModule$6.getterFor(STRING_ITERATOR);

	// `String.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
	defineIterator(String, 'String', function (iterated) {
	  setInternalState$6(this, {
	    type: STRING_ITERATOR,
	    string: toString$l(iterated),
	    index: 0
	  });
	// `%StringIteratorPrototype%.next` method
	// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$3(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return { value: undefined, done: true };
	  point = charAt$7(string, index);
	  state.index += point.length;
	  return { value: point, done: false };
	});

	// TODO: Remove from `core-js@4` since it's moved to entry points

	var uncurryThis$o = functionUncurryThis;
	var redefine$4 = redefineExports;
	var regexpExec$2 = regexpExec$3;
	var fails$h = fails$1f;
	var wellKnownSymbol$7 = wellKnownSymbol$y;
	var createNonEnumerableProperty$4 = createNonEnumerableProperty$f;

	var SPECIES = wellKnownSymbol$7('species');
	var RegExpPrototype$2 = RegExp.prototype;

	var fixRegexpWellKnownSymbolLogic = function (KEY, exec, FORCED, SHAM) {
	  var SYMBOL = wellKnownSymbol$7(KEY);

	  var DELEGATES_TO_SYMBOL = !fails$h(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  });

	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails$h(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;

	    if (KEY === 'split') {
	      // We can't use real regex here since it causes deoptimization
	      // and serious performance degradation in V8
	      // https://github.com/zloirock/core-js/issues/306
	      re = {};
	      // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.
	      re.constructor = {};
	      re.constructor[SPECIES] = function () { return re; };
	      re.flags = '';
	      re[SYMBOL] = /./[SYMBOL];
	    }

	    re.exec = function () { execCalled = true; return null; };

	    re[SYMBOL]('');
	    return !execCalled;
	  });

	  if (
	    !DELEGATES_TO_SYMBOL ||
	    !DELEGATES_TO_EXEC ||
	    FORCED
	  ) {
	    var uncurriedNativeRegExpMethod = uncurryThis$o(/./[SYMBOL]);
	    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
	      var uncurriedNativeMethod = uncurryThis$o(nativeMethod);
	      var $exec = regexp.exec;
	      if ($exec === regexpExec$2 || $exec === RegExpPrototype$2.exec) {
	        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	          // The native String method already delegates to @@method (this
	          // polyfilled function), leasing to infinite recursion.
	          // We avoid it by directly calling the native @@method method.
	          return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };
	        }
	        return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };
	      }
	      return { done: false };
	    });

	    redefine$4(String.prototype, KEY, methods[0]);
	    redefine$4(RegExpPrototype$2, SYMBOL, methods[1]);
	  }

	  if (SHAM) createNonEnumerableProperty$4(RegExpPrototype$2[SYMBOL], 'sham', true);
	};

	var charAt$6 = stringMultibyte.charAt;

	// `AdvanceStringIndex` abstract operation
	// https://tc39.es/ecma262/#sec-advancestringindex
	var advanceStringIndex$4 = function (S, index, unicode) {
	  return index + (unicode ? charAt$6(S, index).length : 1);
	};

	var global$n = global$1F;
	var call$c = functionCall;
	var anObject$9 = anObject$C;
	var isCallable$5 = isCallable$v;
	var classof$4 = classofRaw$1;
	var regexpExec$1 = regexpExec$3;

	var TypeError$6 = global$n.TypeError;

	// `RegExpExec` abstract operation
	// https://tc39.es/ecma262/#sec-regexpexec
	var regexpExecAbstract = function (R, S) {
	  var exec = R.exec;
	  if (isCallable$5(exec)) {
	    var result = call$c(exec, R, S);
	    if (result !== null) anObject$9(result);
	    return result;
	  }
	  if (classof$4(R) === 'RegExp') return call$c(regexpExec$1, R, S);
	  throw TypeError$6('RegExp#exec called on incompatible receiver');
	};

	var call$b = functionCall;
	var fixRegExpWellKnownSymbolLogic$3 = fixRegexpWellKnownSymbolLogic;
	var anObject$8 = anObject$C;
	var toLength$6 = toLength$d;
	var toString$k = toString$C;
	var requireObjectCoercible$8 = requireObjectCoercible$i;
	var getMethod$5 = getMethod$9;
	var advanceStringIndex$3 = advanceStringIndex$4;
	var regExpExec$3 = regexpExecAbstract;

	// @@match logic
	fixRegExpWellKnownSymbolLogic$3('match', function (MATCH, nativeMatch, maybeCallNative) {
	  return [
	    // `String.prototype.match` method
	    // https://tc39.es/ecma262/#sec-string.prototype.match
	    function match(regexp) {
	      var O = requireObjectCoercible$8(this);
	      var matcher = regexp == undefined ? undefined : getMethod$5(regexp, MATCH);
	      return matcher ? call$b(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString$k(O));
	    },
	    // `RegExp.prototype[@@match]` method
	    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
	    function (string) {
	      var rx = anObject$8(this);
	      var S = toString$k(string);
	      var res = maybeCallNative(nativeMatch, rx, S);

	      if (res.done) return res.value;

	      if (!rx.global) return regExpExec$3(rx, S);

	      var fullUnicode = rx.unicode;
	      rx.lastIndex = 0;
	      var A = [];
	      var n = 0;
	      var result;
	      while ((result = regExpExec$3(rx, S)) !== null) {
	        var matchStr = toString$k(result[0]);
	        A[n] = matchStr;
	        if (matchStr === '') rx.lastIndex = advanceStringIndex$3(S, toLength$6(rx.lastIndex), fullUnicode);
	        n++;
	      }
	      return n === 0 ? null : A;
	    }
	  ];
	});

	/* eslint-disable es/no-string-prototype-matchall -- safe */
	var $$A = _export;
	var global$m = global$1F;
	var call$a = functionCall;
	var uncurryThis$n = functionUncurryThis;
	var createIteratorConstructor$1 = createIteratorConstructor$3;
	var requireObjectCoercible$7 = requireObjectCoercible$i;
	var toLength$5 = toLength$d;
	var toString$j = toString$C;
	var anObject$7 = anObject$C;
	var classof$3 = classofRaw$1;
	var isPrototypeOf$1 = objectIsPrototypeOf;
	var isRegExp$2 = isRegexp;
	var regExpFlags$2 = regexpFlags$1;
	var getMethod$4 = getMethod$9;
	var redefine$3 = redefineExports;
	var fails$g = fails$1f;
	var wellKnownSymbol$6 = wellKnownSymbol$y;
	var speciesConstructor$2 = speciesConstructor$6;
	var advanceStringIndex$2 = advanceStringIndex$4;
	var regExpExec$2 = regexpExecAbstract;
	var InternalStateModule$5 = internalState;
	var IS_PURE = isPure;

	var MATCH_ALL = wellKnownSymbol$6('matchAll');
	var REGEXP_STRING = 'RegExp String';
	var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
	var setInternalState$5 = InternalStateModule$5.set;
	var getInternalState$2 = InternalStateModule$5.getterFor(REGEXP_STRING_ITERATOR);
	var RegExpPrototype$1 = RegExp.prototype;
	var TypeError$5 = global$m.TypeError;
	var getFlags$2 = uncurryThis$n(regExpFlags$2);
	var stringIndexOf$2 = uncurryThis$n(''.indexOf);
	var un$MatchAll = uncurryThis$n(''.matchAll);

	var WORKS_WITH_NON_GLOBAL_REGEX = !!un$MatchAll && !fails$g(function () {
	  un$MatchAll('a', /./);
	});

	var $RegExpStringIterator = createIteratorConstructor$1(function RegExpStringIterator(regexp, string, $global, fullUnicode) {
	  setInternalState$5(this, {
	    type: REGEXP_STRING_ITERATOR,
	    regexp: regexp,
	    string: string,
	    global: $global,
	    unicode: fullUnicode,
	    done: false
	  });
	}, REGEXP_STRING, function next() {
	  var state = getInternalState$2(this);
	  if (state.done) return { value: undefined, done: true };
	  var R = state.regexp;
	  var S = state.string;
	  var match = regExpExec$2(R, S);
	  if (match === null) return { value: undefined, done: state.done = true };
	  if (state.global) {
	    if (toString$j(match[0]) === '') R.lastIndex = advanceStringIndex$2(S, toLength$5(R.lastIndex), state.unicode);
	    return { value: match, done: false };
	  }
	  state.done = true;
	  return { value: match, done: false };
	});

	var $matchAll = function (string) {
	  var R = anObject$7(this);
	  var S = toString$j(string);
	  var C, flagsValue, flags, matcher, $global, fullUnicode;
	  C = speciesConstructor$2(R, RegExp);
	  flagsValue = R.flags;
	  if (flagsValue === undefined && isPrototypeOf$1(RegExpPrototype$1, R) && !('flags' in RegExpPrototype$1)) {
	    flagsValue = getFlags$2(R);
	  }
	  flags = flagsValue === undefined ? '' : toString$j(flagsValue);
	  matcher = new C(C === RegExp ? R.source : R, flags);
	  $global = !!~stringIndexOf$2(flags, 'g');
	  fullUnicode = !!~stringIndexOf$2(flags, 'u');
	  matcher.lastIndex = toLength$5(R.lastIndex);
	  return new $RegExpStringIterator(matcher, S, $global, fullUnicode);
	};

	// `String.prototype.matchAll` method
	// https://tc39.es/ecma262/#sec-string.prototype.matchall
	$$A({ target: 'String', proto: true, forced: WORKS_WITH_NON_GLOBAL_REGEX }, {
	  matchAll: function matchAll(regexp) {
	    var O = requireObjectCoercible$7(this);
	    var flags, S, matcher, rx;
	    if (regexp != null) {
	      if (isRegExp$2(regexp)) {
	        flags = toString$j(requireObjectCoercible$7('flags' in RegExpPrototype$1
	          ? regexp.flags
	          : getFlags$2(regexp)
	        ));
	        if (!~stringIndexOf$2(flags, 'g')) throw TypeError$5('`.matchAll` does not allow non-global regexes');
	      }
	      if (WORKS_WITH_NON_GLOBAL_REGEX) return un$MatchAll(O, regexp);
	      matcher = getMethod$4(regexp, MATCH_ALL);
	      if (matcher === undefined && IS_PURE && classof$3(regexp) == 'RegExp') matcher = $matchAll;
	      if (matcher) return call$a(matcher, regexp, O);
	    } else if (WORKS_WITH_NON_GLOBAL_REGEX) return un$MatchAll(O, regexp);
	    S = toString$j(O);
	    rx = new RegExp(regexp, 'g');
	    return rx[MATCH_ALL](S);
	  }
	});

	MATCH_ALL in RegExpPrototype$1 || redefine$3(RegExpPrototype$1, MATCH_ALL, $matchAll);

	// https://github.com/zloirock/core-js/issues/280
	var userAgent$1 = engineUserAgent;

	var stringPadWebkitBug = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(userAgent$1);

	var $$z = _export;
	var $padEnd = stringPad.end;
	var WEBKIT_BUG$1 = stringPadWebkitBug;

	// `String.prototype.padEnd` method
	// https://tc39.es/ecma262/#sec-string.prototype.padend
	$$z({ target: 'String', proto: true, forced: WEBKIT_BUG$1 }, {
	  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
	    return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $$y = _export;
	var $padStart = stringPad.start;
	var WEBKIT_BUG = stringPadWebkitBug;

	// `String.prototype.padStart` method
	// https://tc39.es/ecma262/#sec-string.prototype.padstart
	$$y({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
	  padStart: function padStart(maxLength /* , fillString = ' ' */) {
	    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $$x = _export;
	var uncurryThis$m = functionUncurryThis;
	var toIndexedObject$1 = toIndexedObject$f;
	var toObject$3 = toObject$q;
	var toString$i = toString$C;
	var lengthOfArrayLike$5 = lengthOfArrayLike$n;

	var push$6 = uncurryThis$m([].push);
	var join$4 = uncurryThis$m([].join);

	// `String.raw` method
	// https://tc39.es/ecma262/#sec-string.raw
	$$x({ target: 'String', stat: true }, {
	  raw: function raw(template) {
	    var rawTemplate = toIndexedObject$1(toObject$3(template).raw);
	    var literalSegments = lengthOfArrayLike$5(rawTemplate);
	    var argumentsLength = arguments.length;
	    var elements = [];
	    var i = 0;
	    while (literalSegments > i) {
	      push$6(elements, toString$i(rawTemplate[i++]));
	      if (i === literalSegments) return join$4(elements, '');
	      if (i < argumentsLength) push$6(elements, toString$i(arguments[i]));
	    }
	  }
	});

	var $$w = _export;
	var repeat = stringRepeat;

	// `String.prototype.repeat` method
	// https://tc39.es/ecma262/#sec-string.prototype.repeat
	$$w({ target: 'String', proto: true }, {
	  repeat: repeat
	});

	var uncurryThis$l = functionUncurryThis;
	var toObject$2 = toObject$q;

	var floor$3 = Math.floor;
	var charAt$5 = uncurryThis$l(''.charAt);
	var replace$5 = uncurryThis$l(''.replace);
	var stringSlice$8 = uncurryThis$l(''.slice);
	var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;

	// `GetSubstitution` abstract operation
	// https://tc39.es/ecma262/#sec-getsubstitution
	var getSubstitution$2 = function (matched, str, position, captures, namedCaptures, replacement) {
	  var tailPos = position + matched.length;
	  var m = captures.length;
	  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
	  if (namedCaptures !== undefined) {
	    namedCaptures = toObject$2(namedCaptures);
	    symbols = SUBSTITUTION_SYMBOLS;
	  }
	  return replace$5(replacement, symbols, function (match, ch) {
	    var capture;
	    switch (charAt$5(ch, 0)) {
	      case '$': return '$';
	      case '&': return matched;
	      case '`': return stringSlice$8(str, 0, position);
	      case "'": return stringSlice$8(str, tailPos);
	      case '<':
	        capture = namedCaptures[stringSlice$8(ch, 1, -1)];
	        break;
	      default: // \d\d?
	        var n = +ch;
	        if (n === 0) return match;
	        if (n > m) {
	          var f = floor$3(n / 10);
	          if (f === 0) return match;
	          if (f <= m) return captures[f - 1] === undefined ? charAt$5(ch, 1) : captures[f - 1] + charAt$5(ch, 1);
	          return match;
	        }
	        capture = captures[n - 1];
	    }
	    return capture === undefined ? '' : capture;
	  });
	};

	var apply$6 = functionApply$1;
	var call$9 = functionCall;
	var uncurryThis$k = functionUncurryThis;
	var fixRegExpWellKnownSymbolLogic$2 = fixRegexpWellKnownSymbolLogic;
	var fails$f = fails$1f;
	var anObject$6 = anObject$C;
	var isCallable$4 = isCallable$v;
	var toIntegerOrInfinity$3 = toIntegerOrInfinity$i;
	var toLength$4 = toLength$d;
	var toString$h = toString$C;
	var requireObjectCoercible$6 = requireObjectCoercible$i;
	var advanceStringIndex$1 = advanceStringIndex$4;
	var getMethod$3 = getMethod$9;
	var getSubstitution$1 = getSubstitution$2;
	var regExpExec$1 = regexpExecAbstract;
	var wellKnownSymbol$5 = wellKnownSymbol$y;

	var REPLACE$1 = wellKnownSymbol$5('replace');
	var max$3 = Math.max;
	var min$4 = Math.min;
	var concat = uncurryThis$k([].concat);
	var push$5 = uncurryThis$k([].push);
	var stringIndexOf$1 = uncurryThis$k(''.indexOf);
	var stringSlice$7 = uncurryThis$k(''.slice);

	var maybeToString = function (it) {
	  return it === undefined ? it : String(it);
	};

	// IE <= 11 replaces $0 with the whole match, as if it was $&
	// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
	var REPLACE_KEEPS_$0 = (function () {
	  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
	  return 'a'.replace(/./, '$0') === '$0';
	})();

	// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
	var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
	  if (/./[REPLACE$1]) {
	    return /./[REPLACE$1]('a', '$0') === '';
	  }
	  return false;
	})();

	var REPLACE_SUPPORTS_NAMED_GROUPS = !fails$f(function () {
	  var re = /./;
	  re.exec = function () {
	    var result = [];
	    result.groups = { a: '7' };
	    return result;
	  };
	  // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive
	  return ''.replace(re, '$<a>') !== '7';
	});

	// @@replace logic
	fixRegExpWellKnownSymbolLogic$2('replace', function (_, nativeReplace, maybeCallNative) {
	  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

	  return [
	    // `String.prototype.replace` method
	    // https://tc39.es/ecma262/#sec-string.prototype.replace
	    function replace(searchValue, replaceValue) {
	      var O = requireObjectCoercible$6(this);
	      var replacer = searchValue == undefined ? undefined : getMethod$3(searchValue, REPLACE$1);
	      return replacer
	        ? call$9(replacer, searchValue, O, replaceValue)
	        : call$9(nativeReplace, toString$h(O), searchValue, replaceValue);
	    },
	    // `RegExp.prototype[@@replace]` method
	    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
	    function (string, replaceValue) {
	      var rx = anObject$6(this);
	      var S = toString$h(string);

	      if (
	        typeof replaceValue == 'string' &&
	        stringIndexOf$1(replaceValue, UNSAFE_SUBSTITUTE) === -1 &&
	        stringIndexOf$1(replaceValue, '$<') === -1
	      ) {
	        var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
	        if (res.done) return res.value;
	      }

	      var functionalReplace = isCallable$4(replaceValue);
	      if (!functionalReplace) replaceValue = toString$h(replaceValue);

	      var global = rx.global;
	      if (global) {
	        var fullUnicode = rx.unicode;
	        rx.lastIndex = 0;
	      }
	      var results = [];
	      while (true) {
	        var result = regExpExec$1(rx, S);
	        if (result === null) break;

	        push$5(results, result);
	        if (!global) break;

	        var matchStr = toString$h(result[0]);
	        if (matchStr === '') rx.lastIndex = advanceStringIndex$1(S, toLength$4(rx.lastIndex), fullUnicode);
	      }

	      var accumulatedResult = '';
	      var nextSourcePosition = 0;
	      for (var i = 0; i < results.length; i++) {
	        result = results[i];

	        var matched = toString$h(result[0]);
	        var position = max$3(min$4(toIntegerOrInfinity$3(result.index), S.length), 0);
	        var captures = [];
	        // NOTE: This is equivalent to
	        //   captures = result.slice(1).map(maybeToString)
	        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
	        for (var j = 1; j < result.length; j++) push$5(captures, maybeToString(result[j]));
	        var namedCaptures = result.groups;
	        if (functionalReplace) {
	          var replacerArgs = concat([matched], captures, position, S);
	          if (namedCaptures !== undefined) push$5(replacerArgs, namedCaptures);
	          var replacement = toString$h(apply$6(replaceValue, undefined, replacerArgs));
	        } else {
	          replacement = getSubstitution$1(matched, S, position, captures, namedCaptures, replaceValue);
	        }
	        if (position >= nextSourcePosition) {
	          accumulatedResult += stringSlice$7(S, nextSourcePosition, position) + replacement;
	          nextSourcePosition = position + matched.length;
	        }
	      }
	      return accumulatedResult + stringSlice$7(S, nextSourcePosition);
	    }
	  ];
	}, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);

	var $$v = _export;
	var global$l = global$1F;
	var call$8 = functionCall;
	var uncurryThis$j = functionUncurryThis;
	var requireObjectCoercible$5 = requireObjectCoercible$i;
	var isCallable$3 = isCallable$v;
	var isRegExp$1 = isRegexp;
	var toString$g = toString$C;
	var getMethod$2 = getMethod$9;
	var regExpFlags$1 = regexpFlags$1;
	var getSubstitution = getSubstitution$2;
	var wellKnownSymbol$4 = wellKnownSymbol$y;

	var REPLACE = wellKnownSymbol$4('replace');
	var RegExpPrototype = RegExp.prototype;
	var TypeError$4 = global$l.TypeError;
	var getFlags$1 = uncurryThis$j(regExpFlags$1);
	var indexOf$1 = uncurryThis$j(''.indexOf);
	uncurryThis$j(''.replace);
	var stringSlice$6 = uncurryThis$j(''.slice);
	var max$2 = Math.max;

	var stringIndexOf = function (string, searchValue, fromIndex) {
	  if (fromIndex > string.length) return -1;
	  if (searchValue === '') return fromIndex;
	  return indexOf$1(string, searchValue, fromIndex);
	};

	// `String.prototype.replaceAll` method
	// https://tc39.es/ecma262/#sec-string.prototype.replaceall
	$$v({ target: 'String', proto: true }, {
	  replaceAll: function replaceAll(searchValue, replaceValue) {
	    var O = requireObjectCoercible$5(this);
	    var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;
	    var position = 0;
	    var endOfLastMatch = 0;
	    var result = '';
	    if (searchValue != null) {
	      IS_REG_EXP = isRegExp$1(searchValue);
	      if (IS_REG_EXP) {
	        flags = toString$g(requireObjectCoercible$5('flags' in RegExpPrototype
	          ? searchValue.flags
	          : getFlags$1(searchValue)
	        ));
	        if (!~indexOf$1(flags, 'g')) throw TypeError$4('`.replaceAll` does not allow non-global regexes');
	      }
	      replacer = getMethod$2(searchValue, REPLACE);
	      if (replacer) {
	        return call$8(replacer, searchValue, O, replaceValue);
	      }
	    }
	    string = toString$g(O);
	    searchString = toString$g(searchValue);
	    functionalReplace = isCallable$3(replaceValue);
	    if (!functionalReplace) replaceValue = toString$g(replaceValue);
	    searchLength = searchString.length;
	    advanceBy = max$2(1, searchLength);
	    position = stringIndexOf(string, searchString, 0);
	    while (position !== -1) {
	      replacement = functionalReplace
	        ? toString$g(replaceValue(searchString, position, string))
	        : getSubstitution(searchString, string, position, [], undefined, replaceValue);
	      result += stringSlice$6(string, endOfLastMatch, position) + replacement;
	      endOfLastMatch = position + searchLength;
	      position = stringIndexOf(string, searchString, position + advanceBy);
	    }
	    if (endOfLastMatch < string.length) {
	      result += stringSlice$6(string, endOfLastMatch);
	    }
	    return result;
	  }
	});

	var call$7 = functionCall;
	var fixRegExpWellKnownSymbolLogic$1 = fixRegexpWellKnownSymbolLogic;
	var anObject$5 = anObject$C;
	var requireObjectCoercible$4 = requireObjectCoercible$i;
	var sameValue = sameValue$1;
	var toString$f = toString$C;
	var getMethod$1 = getMethod$9;
	var regExpExec = regexpExecAbstract;

	// @@search logic
	fixRegExpWellKnownSymbolLogic$1('search', function (SEARCH, nativeSearch, maybeCallNative) {
	  return [
	    // `String.prototype.search` method
	    // https://tc39.es/ecma262/#sec-string.prototype.search
	    function search(regexp) {
	      var O = requireObjectCoercible$4(this);
	      var searcher = regexp == undefined ? undefined : getMethod$1(regexp, SEARCH);
	      return searcher ? call$7(searcher, regexp, O) : new RegExp(regexp)[SEARCH](toString$f(O));
	    },
	    // `RegExp.prototype[@@search]` method
	    // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
	    function (string) {
	      var rx = anObject$5(this);
	      var S = toString$f(string);
	      var res = maybeCallNative(nativeSearch, rx, S);

	      if (res.done) return res.value;

	      var previousLastIndex = rx.lastIndex;
	      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
	      var result = regExpExec(rx, S);
	      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
	      return result === null ? -1 : result.index;
	    }
	  ];
	});

	var apply$5 = functionApply$1;
	var call$6 = functionCall;
	var uncurryThis$i = functionUncurryThis;
	var fixRegExpWellKnownSymbolLogic = fixRegexpWellKnownSymbolLogic;
	var isRegExp = isRegexp;
	var anObject$4 = anObject$C;
	var requireObjectCoercible$3 = requireObjectCoercible$i;
	var speciesConstructor$1 = speciesConstructor$6;
	var advanceStringIndex = advanceStringIndex$4;
	var toLength$3 = toLength$d;
	var toString$e = toString$C;
	var getMethod = getMethod$9;
	var arraySlice$4 = arraySliceSimple;
	var callRegExpExec = regexpExecAbstract;
	var regexpExec = regexpExec$3;
	var stickyHelpers = regexpStickyHelpers;
	var fails$e = fails$1f;

	var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
	var MAX_UINT32 = 0xFFFFFFFF;
	var min$3 = Math.min;
	var $push = [].push;
	var exec$4 = uncurryThis$i(/./.exec);
	var push$4 = uncurryThis$i($push);
	var stringSlice$5 = uncurryThis$i(''.slice);

	// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	// Weex JS has frozen built-in prototypes, so use try / catch wrapper
	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails$e(function () {
	  // eslint-disable-next-line regexp/no-empty-group -- required for testing
	  var re = /(?:)/;
	  var originalExec = re.exec;
	  re.exec = function () { return originalExec.apply(this, arguments); };
	  var result = 'ab'.split(re);
	  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
	});

	// @@split logic
	fixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {
	  var internalSplit;
	  if (
	    'abbc'.split(/(b)*/)[1] == 'c' ||
	    // eslint-disable-next-line regexp/no-empty-group -- required for testing
	    'test'.split(/(?:)/, -1).length != 4 ||
	    'ab'.split(/(?:ab)*/).length != 2 ||
	    '.'.split(/(.?)(.?)/).length != 4 ||
	    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
	    '.'.split(/()()/).length > 1 ||
	    ''.split(/.?/).length
	  ) {
	    // based on es5-shim implementation, need to rework it
	    internalSplit = function (separator, limit) {
	      var string = toString$e(requireObjectCoercible$3(this));
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (separator === undefined) return [string];
	      // If `separator` is not a regex, use native split
	      if (!isRegExp(separator)) {
	        return call$6(nativeSplit, string, separator, lim);
	      }
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var match, lastIndex, lastLength;
	      while (match = call$6(regexpExec, separatorCopy, string)) {
	        lastIndex = separatorCopy.lastIndex;
	        if (lastIndex > lastLastIndex) {
	          push$4(output, stringSlice$5(string, lastLastIndex, match.index));
	          if (match.length > 1 && match.index < string.length) apply$5($push, output, arraySlice$4(match, 1));
	          lastLength = match[0].length;
	          lastLastIndex = lastIndex;
	          if (output.length >= lim) break;
	        }
	        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string.length) {
	        if (lastLength || !exec$4(separatorCopy, '')) push$4(output, '');
	      } else push$4(output, stringSlice$5(string, lastLastIndex));
	      return output.length > lim ? arraySlice$4(output, 0, lim) : output;
	    };
	  // Chakra, V8
	  } else if ('0'.split(undefined, 0).length) {
	    internalSplit = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : call$6(nativeSplit, this, separator, limit);
	    };
	  } else internalSplit = nativeSplit;

	  return [
	    // `String.prototype.split` method
	    // https://tc39.es/ecma262/#sec-string.prototype.split
	    function split(separator, limit) {
	      var O = requireObjectCoercible$3(this);
	      var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);
	      return splitter
	        ? call$6(splitter, separator, O, limit)
	        : call$6(internalSplit, toString$e(O), separator, limit);
	    },
	    // `RegExp.prototype[@@split]` method
	    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
	    //
	    // NOTE: This cannot be properly polyfilled in engines that don't support
	    // the 'y' flag.
	    function (string, limit) {
	      var rx = anObject$4(this);
	      var S = toString$e(string);
	      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);

	      if (res.done) return res.value;

	      var C = speciesConstructor$1(rx, RegExp);

	      var unicodeMatching = rx.unicode;
	      var flags = (rx.ignoreCase ? 'i' : '') +
	                  (rx.multiline ? 'm' : '') +
	                  (rx.unicode ? 'u' : '') +
	                  (UNSUPPORTED_Y ? 'g' : 'y');

	      // ^(? + rx + ) is needed, in combination with some S slicing, to
	      // simulate the 'y' flag.
	      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
	      var p = 0;
	      var q = 0;
	      var A = [];
	      while (q < S.length) {
	        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
	        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice$5(S, q) : S);
	        var e;
	        if (
	          z === null ||
	          (e = min$3(toLength$3(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p
	        ) {
	          q = advanceStringIndex(S, q, unicodeMatching);
	        } else {
	          push$4(A, stringSlice$5(S, p, q));
	          if (A.length === lim) return A;
	          for (var i = 1; i <= z.length - 1; i++) {
	            push$4(A, z[i]);
	            if (A.length === lim) return A;
	          }
	          q = p = e;
	        }
	      }
	      push$4(A, stringSlice$5(S, p));
	      return A;
	    }
	  ];
	}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);

	var $$u = _export;
	var uncurryThis$h = functionUncurryThis;
	var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	var toLength$2 = toLength$d;
	var toString$d = toString$C;
	var notARegExp = notARegexp;
	var requireObjectCoercible$2 = requireObjectCoercible$i;
	var correctIsRegExpLogic = correctIsRegexpLogic;

	// eslint-disable-next-line es/no-string-prototype-startswith -- safe
	var un$StartsWith = uncurryThis$h(''.startsWith);
	var stringSlice$4 = uncurryThis$h(''.slice);
	var min$2 = Math.min;

	var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');
	// https://github.com/zloirock/core-js/pull/702
	var MDN_POLYFILL_BUG = !CORRECT_IS_REGEXP_LOGIC && !!function () {
	  var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
	  return descriptor && !descriptor.writable;
	}();

	// `String.prototype.startsWith` method
	// https://tc39.es/ecma262/#sec-string.prototype.startswith
	$$u({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = toString$d(requireObjectCoercible$2(this));
	    notARegExp(searchString);
	    var index = toLength$2(min$2(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = toString$d(searchString);
	    return un$StartsWith
	      ? un$StartsWith(that, search, index)
	      : stringSlice$4(that, index, index + search.length) === search;
	  }
	});

	var $$t = _export;
	var uncurryThis$g = functionUncurryThis;
	var requireObjectCoercible$1 = requireObjectCoercible$i;
	var toIntegerOrInfinity$2 = toIntegerOrInfinity$i;
	var toString$c = toString$C;

	var stringSlice$3 = uncurryThis$g(''.slice);
	var max$1 = Math.max;
	var min$1 = Math.min;

	// eslint-disable-next-line unicorn/prefer-string-slice -- required for testing
	var FORCED$5 = !''.substr || 'ab'.substr(-1) !== 'b';

	// `String.prototype.substr` method
	// https://tc39.es/ecma262/#sec-string.prototype.substr
	$$t({ target: 'String', proto: true, forced: FORCED$5 }, {
	  substr: function substr(start, length) {
	    var that = toString$c(requireObjectCoercible$1(this));
	    var size = that.length;
	    var intStart = toIntegerOrInfinity$2(start);
	    var intLength, intEnd;
	    if (intStart === Infinity) intStart = 0;
	    if (intStart < 0) intStart = max$1(size + intStart, 0);
	    intLength = length === undefined ? size : toIntegerOrInfinity$2(length);
	    if (intLength <= 0 || intLength === Infinity) return '';
	    intEnd = min$1(intStart + intLength, size);
	    return intStart >= intEnd ? '' : stringSlice$3(that, intStart, intEnd);
	  }
	});

	var PROPER_FUNCTION_NAME = functionName.PROPER;
	var fails$d = fails$1f;
	var whitespaces$1 = whitespaces$5;

	var non = '\u200B\u0085\u180E';

	// check that a method works with the correct list
	// of whitespaces and has a correct name
	var stringTrimForced = function (METHOD_NAME) {
	  return fails$d(function () {
	    return !!whitespaces$1[METHOD_NAME]()
	      || non[METHOD_NAME]() !== non
	      || (PROPER_FUNCTION_NAME && whitespaces$1[METHOD_NAME].name !== METHOD_NAME);
	  });
	};

	var $$s = _export;
	var $trim = stringTrim.trim;
	var forcedStringTrimMethod$2 = stringTrimForced;

	// `String.prototype.trim` method
	// https://tc39.es/ecma262/#sec-string.prototype.trim
	$$s({ target: 'String', proto: true, forced: forcedStringTrimMethod$2('trim') }, {
	  trim: function trim() {
	    return $trim(this);
	  }
	});

	var $$r = _export;
	var $trimEnd = stringTrim.end;
	var forcedStringTrimMethod$1 = stringTrimForced;

	var FORCED$4 = forcedStringTrimMethod$1('trimEnd');

	var trimEnd = FORCED$4 ? function trimEnd() {
	  return $trimEnd(this);
	// eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
	} : ''.trimEnd;

	// `String.prototype.{ trimEnd, trimRight }` methods
	// https://tc39.es/ecma262/#sec-string.prototype.trimend
	// https://tc39.es/ecma262/#String.prototype.trimright
	$$r({ target: 'String', proto: true, name: 'trimEnd', forced: FORCED$4 }, {
	  trimEnd: trimEnd,
	  trimRight: trimEnd
	});

	var $$q = _export;
	var $trimStart = stringTrim.start;
	var forcedStringTrimMethod = stringTrimForced;

	var FORCED$3 = forcedStringTrimMethod('trimStart');

	var trimStart = FORCED$3 ? function trimStart() {
	  return $trimStart(this);
	// eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
	} : ''.trimStart;

	// `String.prototype.{ trimStart, trimLeft }` methods
	// https://tc39.es/ecma262/#sec-string.prototype.trimstart
	// https://tc39.es/ecma262/#String.prototype.trimleft
	$$q({ target: 'String', proto: true, name: 'trimStart', forced: FORCED$3 }, {
	  trimStart: trimStart,
	  trimLeft: trimStart
	});

	var uncurryThis$f = functionUncurryThis;
	var requireObjectCoercible = requireObjectCoercible$i;
	var toString$b = toString$C;

	var quot = /"/g;
	var replace$4 = uncurryThis$f(''.replace);

	// `CreateHTML` abstract operation
	// https://tc39.es/ecma262/#sec-createhtml
	var createHtml = function (string, tag, attribute, value) {
	  var S = toString$b(requireObjectCoercible(string));
	  var p1 = '<' + tag;
	  if (attribute !== '') p1 += ' ' + attribute + '="' + replace$4(toString$b(value), quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};

	var fails$c = fails$1f;

	// check the existence of a method, lowercase
	// of a tag and escaping quotes in arguments
	var stringHtmlForced = function (METHOD_NAME) {
	  return fails$c(function () {
	    var test = ''[METHOD_NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  });
	};

	var $$p = _export;
	var createHTML$c = createHtml;
	var forcedStringHTMLMethod$c = stringHtmlForced;

	// `String.prototype.anchor` method
	// https://tc39.es/ecma262/#sec-string.prototype.anchor
	$$p({ target: 'String', proto: true, forced: forcedStringHTMLMethod$c('anchor') }, {
	  anchor: function anchor(name) {
	    return createHTML$c(this, 'a', 'name', name);
	  }
	});

	var $$o = _export;
	var createHTML$b = createHtml;
	var forcedStringHTMLMethod$b = stringHtmlForced;

	// `String.prototype.big` method
	// https://tc39.es/ecma262/#sec-string.prototype.big
	$$o({ target: 'String', proto: true, forced: forcedStringHTMLMethod$b('big') }, {
	  big: function big() {
	    return createHTML$b(this, 'big', '', '');
	  }
	});

	var $$n = _export;
	var createHTML$a = createHtml;
	var forcedStringHTMLMethod$a = stringHtmlForced;

	// `String.prototype.blink` method
	// https://tc39.es/ecma262/#sec-string.prototype.blink
	$$n({ target: 'String', proto: true, forced: forcedStringHTMLMethod$a('blink') }, {
	  blink: function blink() {
	    return createHTML$a(this, 'blink', '', '');
	  }
	});

	var $$m = _export;
	var createHTML$9 = createHtml;
	var forcedStringHTMLMethod$9 = stringHtmlForced;

	// `String.prototype.bold` method
	// https://tc39.es/ecma262/#sec-string.prototype.bold
	$$m({ target: 'String', proto: true, forced: forcedStringHTMLMethod$9('bold') }, {
	  bold: function bold() {
	    return createHTML$9(this, 'b', '', '');
	  }
	});

	var $$l = _export;
	var createHTML$8 = createHtml;
	var forcedStringHTMLMethod$8 = stringHtmlForced;

	// `String.prototype.fixed` method
	// https://tc39.es/ecma262/#sec-string.prototype.fixed
	$$l({ target: 'String', proto: true, forced: forcedStringHTMLMethod$8('fixed') }, {
	  fixed: function fixed() {
	    return createHTML$8(this, 'tt', '', '');
	  }
	});

	var $$k = _export;
	var createHTML$7 = createHtml;
	var forcedStringHTMLMethod$7 = stringHtmlForced;

	// `String.prototype.fontcolor` method
	// https://tc39.es/ecma262/#sec-string.prototype.fontcolor
	$$k({ target: 'String', proto: true, forced: forcedStringHTMLMethod$7('fontcolor') }, {
	  fontcolor: function fontcolor(color) {
	    return createHTML$7(this, 'font', 'color', color);
	  }
	});

	var $$j = _export;
	var createHTML$6 = createHtml;
	var forcedStringHTMLMethod$6 = stringHtmlForced;

	// `String.prototype.fontsize` method
	// https://tc39.es/ecma262/#sec-string.prototype.fontsize
	$$j({ target: 'String', proto: true, forced: forcedStringHTMLMethod$6('fontsize') }, {
	  fontsize: function fontsize(size) {
	    return createHTML$6(this, 'font', 'size', size);
	  }
	});

	var $$i = _export;
	var createHTML$5 = createHtml;
	var forcedStringHTMLMethod$5 = stringHtmlForced;

	// `String.prototype.italics` method
	// https://tc39.es/ecma262/#sec-string.prototype.italics
	$$i({ target: 'String', proto: true, forced: forcedStringHTMLMethod$5('italics') }, {
	  italics: function italics() {
	    return createHTML$5(this, 'i', '', '');
	  }
	});

	var $$h = _export;
	var createHTML$4 = createHtml;
	var forcedStringHTMLMethod$4 = stringHtmlForced;

	// `String.prototype.link` method
	// https://tc39.es/ecma262/#sec-string.prototype.link
	$$h({ target: 'String', proto: true, forced: forcedStringHTMLMethod$4('link') }, {
	  link: function link(url) {
	    return createHTML$4(this, 'a', 'href', url);
	  }
	});

	var $$g = _export;
	var createHTML$3 = createHtml;
	var forcedStringHTMLMethod$3 = stringHtmlForced;

	// `String.prototype.small` method
	// https://tc39.es/ecma262/#sec-string.prototype.small
	$$g({ target: 'String', proto: true, forced: forcedStringHTMLMethod$3('small') }, {
	  small: function small() {
	    return createHTML$3(this, 'small', '', '');
	  }
	});

	var $$f = _export;
	var createHTML$2 = createHtml;
	var forcedStringHTMLMethod$2 = stringHtmlForced;

	// `String.prototype.strike` method
	// https://tc39.es/ecma262/#sec-string.prototype.strike
	$$f({ target: 'String', proto: true, forced: forcedStringHTMLMethod$2('strike') }, {
	  strike: function strike() {
	    return createHTML$2(this, 'strike', '', '');
	  }
	});

	var $$e = _export;
	var createHTML$1 = createHtml;
	var forcedStringHTMLMethod$1 = stringHtmlForced;

	// `String.prototype.sub` method
	// https://tc39.es/ecma262/#sec-string.prototype.sub
	$$e({ target: 'String', proto: true, forced: forcedStringHTMLMethod$1('sub') }, {
	  sub: function sub() {
	    return createHTML$1(this, 'sub', '', '');
	  }
	});

	var $$d = _export;
	var createHTML = createHtml;
	var forcedStringHTMLMethod = stringHtmlForced;

	// `String.prototype.sup` method
	// https://tc39.es/ecma262/#sec-string.prototype.sup
	$$d({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sup') }, {
	  sup: function sup() {
	    return createHTML(this, 'sup', '', '');
	  }
	});

	var typedArrayConstructor = {exports: {}};

	/* eslint-disable no-new -- required for testing */

	var global$k = global$1F;
	var fails$b = fails$1f;
	var checkCorrectnessOfIteration = checkCorrectnessOfIteration$4;
	var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

	var ArrayBuffer$2 = global$k.ArrayBuffer;
	var Int8Array$3 = global$k.Int8Array;

	var typedArrayConstructorsRequireWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$1 || !fails$b(function () {
	  Int8Array$3(1);
	}) || !fails$b(function () {
	  new Int8Array$3(-1);
	}) || !checkCorrectnessOfIteration(function (iterable) {
	  new Int8Array$3();
	  new Int8Array$3(null);
	  new Int8Array$3(1.5);
	  new Int8Array$3(iterable);
	}, true) || fails$b(function () {
	  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
	  return new Int8Array$3(new ArrayBuffer$2(2), 1, undefined).length !== 1;
	});

	var global$j = global$1F;
	var toIntegerOrInfinity$1 = toIntegerOrInfinity$i;

	var RangeError$5 = global$j.RangeError;

	var toPositiveInteger$1 = function (it) {
	  var result = toIntegerOrInfinity$1(it);
	  if (result < 0) throw RangeError$5("The argument can't be less than 0");
	  return result;
	};

	var global$i = global$1F;
	var toPositiveInteger = toPositiveInteger$1;

	var RangeError$4 = global$i.RangeError;

	var toOffset$2 = function (it, BYTES) {
	  var offset = toPositiveInteger(it);
	  if (offset % BYTES) throw RangeError$4('Wrong offset');
	  return offset;
	};

	var bind$2 = functionBindContext;
	var call$5 = functionCall;
	var aConstructor = aConstructor$3;
	var toObject$1 = toObject$q;
	var lengthOfArrayLike$4 = lengthOfArrayLike$n;
	var getIterator$1 = getIterator$4;
	var getIteratorMethod$1 = getIteratorMethod$5;
	var isArrayIteratorMethod = isArrayIteratorMethod$3;
	var aTypedArrayConstructor$3 = arrayBufferViewCore.aTypedArrayConstructor;

	var typedArrayFrom$2 = function from(source /* , mapfn, thisArg */) {
	  var C = aConstructor(this);
	  var O = toObject$1(source);
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod$1(O);
	  var i, length, result, step, iterator, next;
	  if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {
	    iterator = getIterator$1(O, iteratorMethod);
	    next = iterator.next;
	    O = [];
	    while (!(step = call$5(next, iterator)).done) {
	      O.push(step.value);
	    }
	  }
	  if (mapping && argumentsLength > 2) {
	    mapfn = bind$2(mapfn, arguments[2]);
	  }
	  length = lengthOfArrayLike$4(O);
	  result = new (aTypedArrayConstructor$3(C))(length);
	  for (i = 0; length > i; i++) {
	    result[i] = mapping ? mapfn(O[i], i) : O[i];
	  }
	  return result;
	};

	var $$c = _export;
	var global$h = global$1F;
	var call$4 = functionCall;
	var DESCRIPTORS$2 = descriptors;
	var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS$2 = typedArrayConstructorsRequireWrappers;
	var ArrayBufferViewCore$p = arrayBufferViewCore;
	var ArrayBufferModule = arrayBuffer;
	var anInstance$5 = anInstance$a;
	var createPropertyDescriptor$3 = createPropertyDescriptor$c;
	var createNonEnumerableProperty$3 = createNonEnumerableProperty$f;
	var isIntegralNumber = isIntegralNumber$3;
	var toLength$1 = toLength$d;
	var toIndex = toIndex$2;
	var toOffset$1 = toOffset$2;
	var toPropertyKey = toPropertyKey$8;
	var hasOwn$7 = hasOwnProperty_1;
	var classof$2 = classof$i;
	var isObject$d = isObject$I;
	var isSymbol$6 = isSymbol$b;
	var create$2 = objectCreate$1;
	var isPrototypeOf = objectIsPrototypeOf;
	var setPrototypeOf = objectSetPrototypeOf$1;
	var getOwnPropertyNames = objectGetOwnPropertyNames.f;
	var typedArrayFrom$1 = typedArrayFrom$2;
	var forEach$1 = arrayIteration.forEach;
	var setSpecies = setSpecies$6;
	var definePropertyModule = objectDefineProperty;
	var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
	var InternalStateModule$4 = internalState;
	var inheritIfRequired$1 = inheritIfRequired$6;

	var getInternalState$1 = InternalStateModule$4.get;
	var setInternalState$4 = InternalStateModule$4.set;
	var nativeDefineProperty = definePropertyModule.f;
	var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
	var round$1 = Math.round;
	var RangeError$3 = global$h.RangeError;
	var ArrayBuffer$1 = ArrayBufferModule.ArrayBuffer;
	var ArrayBufferPrototype = ArrayBuffer$1.prototype;
	var DataView$3 = ArrayBufferModule.DataView;
	var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore$p.NATIVE_ARRAY_BUFFER_VIEWS;
	var TYPED_ARRAY_CONSTRUCTOR$1 = ArrayBufferViewCore$p.TYPED_ARRAY_CONSTRUCTOR;
	var TYPED_ARRAY_TAG = ArrayBufferViewCore$p.TYPED_ARRAY_TAG;
	var TypedArray = ArrayBufferViewCore$p.TypedArray;
	var TypedArrayPrototype$1 = ArrayBufferViewCore$p.TypedArrayPrototype;
	var aTypedArrayConstructor$2 = ArrayBufferViewCore$p.aTypedArrayConstructor;
	var isTypedArray$3 = ArrayBufferViewCore$p.isTypedArray;
	var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	var WRONG_LENGTH = 'Wrong length';

	var fromList = function (C, list) {
	  aTypedArrayConstructor$2(C);
	  var index = 0;
	  var length = list.length;
	  var result = new C(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	};

	var addGetter = function (it, key) {
	  nativeDefineProperty(it, key, { get: function () {
	    return getInternalState$1(this)[key];
	  } });
	};

	var isArrayBuffer = function (it) {
	  var klass;
	  return isPrototypeOf(ArrayBufferPrototype, it) || (klass = classof$2(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
	};

	var isTypedArrayIndex = function (target, key) {
	  return isTypedArray$3(target)
	    && !isSymbol$6(key)
	    && key in target
	    && isIntegralNumber(+key)
	    && key >= 0;
	};

	var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
	  key = toPropertyKey(key);
	  return isTypedArrayIndex(target, key)
	    ? createPropertyDescriptor$3(2, target[key])
	    : nativeGetOwnPropertyDescriptor(target, key);
	};

	var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
	  key = toPropertyKey(key);
	  if (isTypedArrayIndex(target, key)
	    && isObject$d(descriptor)
	    && hasOwn$7(descriptor, 'value')
	    && !hasOwn$7(descriptor, 'get')
	    && !hasOwn$7(descriptor, 'set')
	    // TODO: add validation descriptor w/o calling accessors
	    && !descriptor.configurable
	    && (!hasOwn$7(descriptor, 'writable') || descriptor.writable)
	    && (!hasOwn$7(descriptor, 'enumerable') || descriptor.enumerable)
	  ) {
	    target[key] = descriptor.value;
	    return target;
	  } return nativeDefineProperty(target, key, descriptor);
	};

	if (DESCRIPTORS$2) {
	  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
	    definePropertyModule.f = wrappedDefineProperty;
	    addGetter(TypedArrayPrototype$1, 'buffer');
	    addGetter(TypedArrayPrototype$1, 'byteOffset');
	    addGetter(TypedArrayPrototype$1, 'byteLength');
	    addGetter(TypedArrayPrototype$1, 'length');
	  }

	  $$c({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
	    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
	    defineProperty: wrappedDefineProperty
	  });

	  typedArrayConstructor.exports = function (TYPE, wrapper, CLAMPED) {
	    var BYTES = TYPE.match(/\d+$/)[0] / 8;
	    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
	    var GETTER = 'get' + TYPE;
	    var SETTER = 'set' + TYPE;
	    var NativeTypedArrayConstructor = global$h[CONSTRUCTOR_NAME];
	    var TypedArrayConstructor = NativeTypedArrayConstructor;
	    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
	    var exported = {};

	    var getter = function (that, index) {
	      var data = getInternalState$1(that);
	      return data.view[GETTER](index * BYTES + data.byteOffset, true);
	    };

	    var setter = function (that, index, value) {
	      var data = getInternalState$1(that);
	      if (CLAMPED) value = (value = round$1(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
	      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
	    };

	    var addElement = function (that, index) {
	      nativeDefineProperty(that, index, {
	        get: function () {
	          return getter(this, index);
	        },
	        set: function (value) {
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };

	    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
	        anInstance$5(that, TypedArrayConstructorPrototype);
	        var index = 0;
	        var byteOffset = 0;
	        var buffer, byteLength, length;
	        if (!isObject$d(data)) {
	          length = toIndex(data);
	          byteLength = length * BYTES;
	          buffer = new ArrayBuffer$1(byteLength);
	        } else if (isArrayBuffer(data)) {
	          buffer = data;
	          byteOffset = toOffset$1(offset, BYTES);
	          var $len = data.byteLength;
	          if ($length === undefined) {
	            if ($len % BYTES) throw RangeError$3(WRONG_LENGTH);
	            byteLength = $len - byteOffset;
	            if (byteLength < 0) throw RangeError$3(WRONG_LENGTH);
	          } else {
	            byteLength = toLength$1($length) * BYTES;
	            if (byteLength + byteOffset > $len) throw RangeError$3(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if (isTypedArray$3(data)) {
	          return fromList(TypedArrayConstructor, data);
	        } else {
	          return call$4(typedArrayFrom$1, TypedArrayConstructor, data);
	        }
	        setInternalState$4(that, {
	          buffer: buffer,
	          byteOffset: byteOffset,
	          byteLength: byteLength,
	          length: length,
	          view: new DataView$3(buffer)
	        });
	        while (index < length) addElement(that, index++);
	      });

	      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
	      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create$2(TypedArrayPrototype$1);
	    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS$2) {
	      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
	        anInstance$5(dummy, TypedArrayConstructorPrototype);
	        return inheritIfRequired$1(function () {
	          if (!isObject$d(data)) return new NativeTypedArrayConstructor(toIndex(data));
	          if (isArrayBuffer(data)) return $length !== undefined
	            ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES), $length)
	            : typedArrayOffset !== undefined
	              ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES))
	              : new NativeTypedArrayConstructor(data);
	          if (isTypedArray$3(data)) return fromList(TypedArrayConstructor, data);
	          return call$4(typedArrayFrom$1, TypedArrayConstructor, data);
	        }(), dummy, TypedArrayConstructor);
	      });

	      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
	      forEach$1(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
	        if (!(key in TypedArrayConstructor)) {
	          createNonEnumerableProperty$3(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
	        }
	      });
	      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
	    }

	    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
	      createNonEnumerableProperty$3(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
	    }

	    createNonEnumerableProperty$3(TypedArrayConstructorPrototype, TYPED_ARRAY_CONSTRUCTOR$1, TypedArrayConstructor);

	    if (TYPED_ARRAY_TAG) {
	      createNonEnumerableProperty$3(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
	    }

	    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

	    $$c({
	      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
	    }, exported);

	    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
	      createNonEnumerableProperty$3(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
	    }

	    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
	      createNonEnumerableProperty$3(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
	    }

	    setSpecies(CONSTRUCTOR_NAME);
	  };
	} else typedArrayConstructor.exports = function () { /* empty */ };

	var typedArrayConstructorExports = typedArrayConstructor.exports;

	var createTypedArrayConstructor$8 = typedArrayConstructorExports;

	// `Float32Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects
	createTypedArrayConstructor$8('Float32', function (init) {
	  return function Float32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var createTypedArrayConstructor$7 = typedArrayConstructorExports;

	// `Float64Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects
	createTypedArrayConstructor$7('Float64', function (init) {
	  return function Float64Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var createTypedArrayConstructor$6 = typedArrayConstructorExports;

	// `Int8Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects
	createTypedArrayConstructor$6('Int8', function (init) {
	  return function Int8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var createTypedArrayConstructor$5 = typedArrayConstructorExports;

	// `Int16Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects
	createTypedArrayConstructor$5('Int16', function (init) {
	  return function Int16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var createTypedArrayConstructor$4 = typedArrayConstructorExports;

	// `Int32Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects
	createTypedArrayConstructor$4('Int32', function (init) {
	  return function Int32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var createTypedArrayConstructor$3 = typedArrayConstructorExports;

	// `Uint8Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects
	createTypedArrayConstructor$3('Uint8', function (init) {
	  return function Uint8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var createTypedArrayConstructor$2 = typedArrayConstructorExports;

	// `Uint8ClampedArray` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects
	createTypedArrayConstructor$2('Uint8', function (init) {
	  return function Uint8ClampedArray(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	}, true);

	var createTypedArrayConstructor$1 = typedArrayConstructorExports;

	// `Uint16Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects
	createTypedArrayConstructor$1('Uint16', function (init) {
	  return function Uint16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var createTypedArrayConstructor = typedArrayConstructorExports;

	// `Uint32Array` constructor
	// https://tc39.es/ecma262/#sec-typedarray-objects
	createTypedArrayConstructor('Uint32', function (init) {
	  return function Uint32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var ArrayBufferViewCore$o = arrayBufferViewCore;
	var lengthOfArrayLike$3 = lengthOfArrayLike$n;
	var toIntegerOrInfinity = toIntegerOrInfinity$i;

	var aTypedArray$m = ArrayBufferViewCore$o.aTypedArray;
	var exportTypedArrayMethod$n = ArrayBufferViewCore$o.exportTypedArrayMethod;

	// `%TypedArray%.prototype.at` method
	// https://github.com/tc39/proposal-relative-indexing-method
	exportTypedArrayMethod$n('at', function at(index) {
	  var O = aTypedArray$m(this);
	  var len = lengthOfArrayLike$3(O);
	  var relativeIndex = toIntegerOrInfinity(index);
	  var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
	  return (k < 0 || k >= len) ? undefined : O[k];
	});

	var uncurryThis$e = functionUncurryThis;
	var ArrayBufferViewCore$n = arrayBufferViewCore;
	var $ArrayCopyWithin = arrayCopyWithin;

	var u$ArrayCopyWithin = uncurryThis$e($ArrayCopyWithin);
	var aTypedArray$l = ArrayBufferViewCore$n.aTypedArray;
	var exportTypedArrayMethod$m = ArrayBufferViewCore$n.exportTypedArrayMethod;

	// `%TypedArray%.prototype.copyWithin` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin
	exportTypedArrayMethod$m('copyWithin', function copyWithin(target, start /* , end */) {
	  return u$ArrayCopyWithin(aTypedArray$l(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	});

	var ArrayBufferViewCore$m = arrayBufferViewCore;
	var $every = arrayIteration.every;

	var aTypedArray$k = ArrayBufferViewCore$m.aTypedArray;
	var exportTypedArrayMethod$l = ArrayBufferViewCore$m.exportTypedArrayMethod;

	// `%TypedArray%.prototype.every` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.every
	exportTypedArrayMethod$l('every', function every(callbackfn /* , thisArg */) {
	  return $every(aTypedArray$k(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$l = arrayBufferViewCore;
	var call$3 = functionCall;
	var $fill = arrayFill$1;

	var aTypedArray$j = ArrayBufferViewCore$l.aTypedArray;
	var exportTypedArrayMethod$k = ArrayBufferViewCore$l.exportTypedArrayMethod;

	// `%TypedArray%.prototype.fill` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill
	exportTypedArrayMethod$k('fill', function fill(value /* , start, end */) {
	  var length = arguments.length;
	  return call$3(
	    $fill,
	    aTypedArray$j(this),
	    value,
	    length > 1 ? arguments[1] : undefined,
	    length > 2 ? arguments[2] : undefined
	  );
	});

	var lengthOfArrayLike$2 = lengthOfArrayLike$n;

	var arrayFromConstructorAndList$1 = function (Constructor, list) {
	  var index = 0;
	  var length = lengthOfArrayLike$2(list);
	  var result = new Constructor(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	};

	var ArrayBufferViewCore$k = arrayBufferViewCore;
	var speciesConstructor = speciesConstructor$6;

	var TYPED_ARRAY_CONSTRUCTOR = ArrayBufferViewCore$k.TYPED_ARRAY_CONSTRUCTOR;
	var aTypedArrayConstructor$1 = ArrayBufferViewCore$k.aTypedArrayConstructor;

	// a part of `TypedArraySpeciesCreate` abstract operation
	// https://tc39.es/ecma262/#typedarray-species-create
	var typedArraySpeciesConstructor$4 = function (originalArray) {
	  return aTypedArrayConstructor$1(speciesConstructor(originalArray, originalArray[TYPED_ARRAY_CONSTRUCTOR]));
	};

	var arrayFromConstructorAndList = arrayFromConstructorAndList$1;
	var typedArraySpeciesConstructor$3 = typedArraySpeciesConstructor$4;

	var typedArrayFromSpeciesAndList = function (instance, list) {
	  return arrayFromConstructorAndList(typedArraySpeciesConstructor$3(instance), list);
	};

	var ArrayBufferViewCore$j = arrayBufferViewCore;
	var $filter = arrayIteration.filter;
	var fromSpeciesAndList = typedArrayFromSpeciesAndList;

	var aTypedArray$i = ArrayBufferViewCore$j.aTypedArray;
	var exportTypedArrayMethod$j = ArrayBufferViewCore$j.exportTypedArrayMethod;

	// `%TypedArray%.prototype.filter` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter
	exportTypedArrayMethod$j('filter', function filter(callbackfn /* , thisArg */) {
	  var list = $filter(aTypedArray$i(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  return fromSpeciesAndList(this, list);
	});

	var ArrayBufferViewCore$i = arrayBufferViewCore;
	var $find = arrayIteration.find;

	var aTypedArray$h = ArrayBufferViewCore$i.aTypedArray;
	var exportTypedArrayMethod$i = ArrayBufferViewCore$i.exportTypedArrayMethod;

	// `%TypedArray%.prototype.find` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.find
	exportTypedArrayMethod$i('find', function find(predicate /* , thisArg */) {
	  return $find(aTypedArray$h(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$h = arrayBufferViewCore;
	var $findIndex = arrayIteration.findIndex;

	var aTypedArray$g = ArrayBufferViewCore$h.aTypedArray;
	var exportTypedArrayMethod$h = ArrayBufferViewCore$h.exportTypedArrayMethod;

	// `%TypedArray%.prototype.findIndex` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex
	exportTypedArrayMethod$h('findIndex', function findIndex(predicate /* , thisArg */) {
	  return $findIndex(aTypedArray$g(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$g = arrayBufferViewCore;
	var $forEach = arrayIteration.forEach;

	var aTypedArray$f = ArrayBufferViewCore$g.aTypedArray;
	var exportTypedArrayMethod$g = ArrayBufferViewCore$g.exportTypedArrayMethod;

	// `%TypedArray%.prototype.forEach` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach
	exportTypedArrayMethod$g('forEach', function forEach(callbackfn /* , thisArg */) {
	  $forEach(aTypedArray$f(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS$1 = typedArrayConstructorsRequireWrappers;
	var exportTypedArrayStaticMethod$1 = arrayBufferViewCore.exportTypedArrayStaticMethod;
	var typedArrayFrom = typedArrayFrom$2;

	// `%TypedArray%.from` method
	// https://tc39.es/ecma262/#sec-%typedarray%.from
	exportTypedArrayStaticMethod$1('from', typedArrayFrom, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS$1);

	var ArrayBufferViewCore$f = arrayBufferViewCore;
	var $includes = arrayIncludes$2.includes;

	var aTypedArray$e = ArrayBufferViewCore$f.aTypedArray;
	var exportTypedArrayMethod$f = ArrayBufferViewCore$f.exportTypedArrayMethod;

	// `%TypedArray%.prototype.includes` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes
	exportTypedArrayMethod$f('includes', function includes(searchElement /* , fromIndex */) {
	  return $includes(aTypedArray$e(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$e = arrayBufferViewCore;
	var $indexOf = arrayIncludes$2.indexOf;

	var aTypedArray$d = ArrayBufferViewCore$e.aTypedArray;
	var exportTypedArrayMethod$e = ArrayBufferViewCore$e.exportTypedArrayMethod;

	// `%TypedArray%.prototype.indexOf` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof
	exportTypedArrayMethod$e('indexOf', function indexOf(searchElement /* , fromIndex */) {
	  return $indexOf(aTypedArray$d(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var global$g = global$1F;
	var fails$a = fails$1f;
	var uncurryThis$d = functionUncurryThis;
	var ArrayBufferViewCore$d = arrayBufferViewCore;
	var ArrayIterators = es_array_iterator;
	var wellKnownSymbol$3 = wellKnownSymbol$y;

	var ITERATOR$3 = wellKnownSymbol$3('iterator');
	var Uint8Array$5 = global$g.Uint8Array;
	var arrayValues = uncurryThis$d(ArrayIterators.values);
	var arrayKeys = uncurryThis$d(ArrayIterators.keys);
	var arrayEntries = uncurryThis$d(ArrayIterators.entries);
	var aTypedArray$c = ArrayBufferViewCore$d.aTypedArray;
	var exportTypedArrayMethod$d = ArrayBufferViewCore$d.exportTypedArrayMethod;
	var TypedArrayPrototype = Uint8Array$5 && Uint8Array$5.prototype;

	var GENERIC = !fails$a(function () {
	  TypedArrayPrototype[ITERATOR$3].call([1]);
	});

	var ITERATOR_IS_VALUES = !!TypedArrayPrototype
	  && TypedArrayPrototype.values
	  && TypedArrayPrototype[ITERATOR$3] === TypedArrayPrototype.values
	  && TypedArrayPrototype.values.name === 'values';

	var typedArrayValues = function values() {
	  return arrayValues(aTypedArray$c(this));
	};

	// `%TypedArray%.prototype.entries` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries
	exportTypedArrayMethod$d('entries', function entries() {
	  return arrayEntries(aTypedArray$c(this));
	}, GENERIC);
	// `%TypedArray%.prototype.keys` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys
	exportTypedArrayMethod$d('keys', function keys() {
	  return arrayKeys(aTypedArray$c(this));
	}, GENERIC);
	// `%TypedArray%.prototype.values` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.values
	exportTypedArrayMethod$d('values', typedArrayValues, GENERIC || !ITERATOR_IS_VALUES, { name: 'values' });
	// `%TypedArray%.prototype[@@iterator]` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator
	exportTypedArrayMethod$d(ITERATOR$3, typedArrayValues, GENERIC || !ITERATOR_IS_VALUES, { name: 'values' });

	var ArrayBufferViewCore$c = arrayBufferViewCore;
	var uncurryThis$c = functionUncurryThis;

	var aTypedArray$b = ArrayBufferViewCore$c.aTypedArray;
	var exportTypedArrayMethod$c = ArrayBufferViewCore$c.exportTypedArrayMethod;
	var $join = uncurryThis$c([].join);

	// `%TypedArray%.prototype.join` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.join
	exportTypedArrayMethod$c('join', function join(separator) {
	  return $join(aTypedArray$b(this), separator);
	});

	var ArrayBufferViewCore$b = arrayBufferViewCore;
	var apply$4 = functionApply$1;
	var $lastIndexOf = arrayLastIndexOf;

	var aTypedArray$a = ArrayBufferViewCore$b.aTypedArray;
	var exportTypedArrayMethod$b = ArrayBufferViewCore$b.exportTypedArrayMethod;

	// `%TypedArray%.prototype.lastIndexOf` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof
	exportTypedArrayMethod$b('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
	  var length = arguments.length;
	  return apply$4($lastIndexOf, aTypedArray$a(this), length > 1 ? [searchElement, arguments[1]] : [searchElement]);
	});

	var ArrayBufferViewCore$a = arrayBufferViewCore;
	var $map = arrayIteration.map;
	var typedArraySpeciesConstructor$2 = typedArraySpeciesConstructor$4;

	var aTypedArray$9 = ArrayBufferViewCore$a.aTypedArray;
	var exportTypedArrayMethod$a = ArrayBufferViewCore$a.exportTypedArrayMethod;

	// `%TypedArray%.prototype.map` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.map
	exportTypedArrayMethod$a('map', function map(mapfn /* , thisArg */) {
	  return $map(aTypedArray$9(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
	    return new (typedArraySpeciesConstructor$2(O))(length);
	  });
	});

	var ArrayBufferViewCore$9 = arrayBufferViewCore;
	var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = typedArrayConstructorsRequireWrappers;

	var aTypedArrayConstructor = ArrayBufferViewCore$9.aTypedArrayConstructor;
	var exportTypedArrayStaticMethod = ArrayBufferViewCore$9.exportTypedArrayStaticMethod;

	// `%TypedArray%.of` method
	// https://tc39.es/ecma262/#sec-%typedarray%.of
	exportTypedArrayStaticMethod('of', function of(/* ...items */) {
	  var index = 0;
	  var length = arguments.length;
	  var result = new (aTypedArrayConstructor(this))(length);
	  while (length > index) result[index] = arguments[index++];
	  return result;
	}, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);

	var ArrayBufferViewCore$8 = arrayBufferViewCore;
	var $reduce = arrayReduce$2.left;

	var aTypedArray$8 = ArrayBufferViewCore$8.aTypedArray;
	var exportTypedArrayMethod$9 = ArrayBufferViewCore$8.exportTypedArrayMethod;

	// `%TypedArray%.prototype.reduce` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce
	exportTypedArrayMethod$9('reduce', function reduce(callbackfn /* , initialValue */) {
	  var length = arguments.length;
	  return $reduce(aTypedArray$8(this), callbackfn, length, length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$7 = arrayBufferViewCore;
	var $reduceRight = arrayReduce$2.right;

	var aTypedArray$7 = ArrayBufferViewCore$7.aTypedArray;
	var exportTypedArrayMethod$8 = ArrayBufferViewCore$7.exportTypedArrayMethod;

	// `%TypedArray%.prototype.reduceRicht` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright
	exportTypedArrayMethod$8('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
	  var length = arguments.length;
	  return $reduceRight(aTypedArray$7(this), callbackfn, length, length > 1 ? arguments[1] : undefined);
	});

	var ArrayBufferViewCore$6 = arrayBufferViewCore;

	var aTypedArray$6 = ArrayBufferViewCore$6.aTypedArray;
	var exportTypedArrayMethod$7 = ArrayBufferViewCore$6.exportTypedArrayMethod;
	var floor$2 = Math.floor;

	// `%TypedArray%.prototype.reverse` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse
	exportTypedArrayMethod$7('reverse', function reverse() {
	  var that = this;
	  var length = aTypedArray$6(that).length;
	  var middle = floor$2(length / 2);
	  var index = 0;
	  var value;
	  while (index < middle) {
	    value = that[index];
	    that[index++] = that[--length];
	    that[length] = value;
	  } return that;
	});

	var global$f = global$1F;
	var call$2 = functionCall;
	var ArrayBufferViewCore$5 = arrayBufferViewCore;
	var lengthOfArrayLike$1 = lengthOfArrayLike$n;
	var toOffset = toOffset$2;
	var toIndexedObject = toObject$q;
	var fails$9 = fails$1f;

	var RangeError$2 = global$f.RangeError;
	var Int8Array$2 = global$f.Int8Array;
	var Int8ArrayPrototype = Int8Array$2 && Int8Array$2.prototype;
	var $set = Int8ArrayPrototype && Int8ArrayPrototype.set;
	var aTypedArray$5 = ArrayBufferViewCore$5.aTypedArray;
	var exportTypedArrayMethod$6 = ArrayBufferViewCore$5.exportTypedArrayMethod;

	var WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS = !fails$9(function () {
	  // eslint-disable-next-line es/no-typed-arrays -- required for testing
	  var array = new Uint8ClampedArray(2);
	  call$2($set, array, { length: 1, 0: 3 }, 1);
	  return array[1] !== 3;
	});

	// https://bugs.chromium.org/p/v8/issues/detail?id=11294 and other
	var TO_OBJECT_BUG = WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS && ArrayBufferViewCore$5.NATIVE_ARRAY_BUFFER_VIEWS && fails$9(function () {
	  var array = new Int8Array$2(2);
	  array.set(1);
	  array.set('2', 1);
	  return array[0] !== 0 || array[1] !== 2;
	});

	// `%TypedArray%.prototype.set` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.set
	exportTypedArrayMethod$6('set', function set(arrayLike /* , offset */) {
	  aTypedArray$5(this);
	  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
	  var src = toIndexedObject(arrayLike);
	  if (WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS) return call$2($set, this, src, offset);
	  var length = this.length;
	  var len = lengthOfArrayLike$1(src);
	  var index = 0;
	  if (len + offset > length) throw RangeError$2('Wrong length');
	  while (index < len) this[offset + index] = src[index++];
	}, !WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS || TO_OBJECT_BUG);

	var ArrayBufferViewCore$4 = arrayBufferViewCore;
	var typedArraySpeciesConstructor$1 = typedArraySpeciesConstructor$4;
	var fails$8 = fails$1f;
	var arraySlice$3 = arraySlice$b;

	var aTypedArray$4 = ArrayBufferViewCore$4.aTypedArray;
	var exportTypedArrayMethod$5 = ArrayBufferViewCore$4.exportTypedArrayMethod;

	var FORCED$2 = fails$8(function () {
	  // eslint-disable-next-line es/no-typed-arrays -- required for testing
	  new Int8Array(1).slice();
	});

	// `%TypedArray%.prototype.slice` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice
	exportTypedArrayMethod$5('slice', function slice(start, end) {
	  var list = arraySlice$3(aTypedArray$4(this), start, end);
	  var C = typedArraySpeciesConstructor$1(this);
	  var index = 0;
	  var length = list.length;
	  var result = new C(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	}, FORCED$2);

	var ArrayBufferViewCore$3 = arrayBufferViewCore;
	var $some = arrayIteration.some;

	var aTypedArray$3 = ArrayBufferViewCore$3.aTypedArray;
	var exportTypedArrayMethod$4 = ArrayBufferViewCore$3.exportTypedArrayMethod;

	// `%TypedArray%.prototype.some` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.some
	exportTypedArrayMethod$4('some', function some(callbackfn /* , thisArg */) {
	  return $some(aTypedArray$3(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var global$e = global$1F;
	var uncurryThis$b = functionUncurryThis;
	var fails$7 = fails$1f;
	var aCallable$1 = aCallable$g;
	var internalSort = arraySort$1;
	var ArrayBufferViewCore$2 = arrayBufferViewCore;
	var FF = engineFfVersion;
	var IE_OR_EDGE = engineIsIeOrEdge;
	var V8 = engineV8Version;
	var WEBKIT = engineWebkitVersion;

	var Array$1 = global$e.Array;
	var aTypedArray$2 = ArrayBufferViewCore$2.aTypedArray;
	var exportTypedArrayMethod$3 = ArrayBufferViewCore$2.exportTypedArrayMethod;
	var Uint16Array = global$e.Uint16Array;
	var un$Sort = Uint16Array && uncurryThis$b(Uint16Array.prototype.sort);

	// WebKit
	var ACCEPT_INCORRECT_ARGUMENTS = !!un$Sort && !(fails$7(function () {
	  un$Sort(new Uint16Array(2), null);
	}) && fails$7(function () {
	  un$Sort(new Uint16Array(2), {});
	}));

	var STABLE_SORT = !!un$Sort && !fails$7(function () {
	  // feature detection can be too slow, so check engines versions
	  if (V8) return V8 < 74;
	  if (FF) return FF < 67;
	  if (IE_OR_EDGE) return true;
	  if (WEBKIT) return WEBKIT < 602;

	  var array = new Uint16Array(516);
	  var expected = Array$1(516);
	  var index, mod;

	  for (index = 0; index < 516; index++) {
	    mod = index % 4;
	    array[index] = 515 - index;
	    expected[index] = index - 2 * mod + 3;
	  }

	  un$Sort(array, function (a, b) {
	    return (a / 4 | 0) - (b / 4 | 0);
	  });

	  for (index = 0; index < 516; index++) {
	    if (array[index] !== expected[index]) return true;
	  }
	});

	var getSortCompare = function (comparefn) {
	  return function (x, y) {
	    if (comparefn !== undefined) return +comparefn(x, y) || 0;
	    // eslint-disable-next-line no-self-compare -- NaN check
	    if (y !== y) return -1;
	    // eslint-disable-next-line no-self-compare -- NaN check
	    if (x !== x) return 1;
	    if (x === 0 && y === 0) return 1 / x > 0 && 1 / y < 0 ? 1 : -1;
	    return x > y;
	  };
	};

	// `%TypedArray%.prototype.sort` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort
	exportTypedArrayMethod$3('sort', function sort(comparefn) {
	  if (comparefn !== undefined) aCallable$1(comparefn);
	  if (STABLE_SORT) return un$Sort(this, comparefn);

	  return internalSort(aTypedArray$2(this), getSortCompare(comparefn));
	}, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);

	var ArrayBufferViewCore$1 = arrayBufferViewCore;
	var toLength = toLength$d;
	var toAbsoluteIndex = toAbsoluteIndex$9;
	var typedArraySpeciesConstructor = typedArraySpeciesConstructor$4;

	var aTypedArray$1 = ArrayBufferViewCore$1.aTypedArray;
	var exportTypedArrayMethod$2 = ArrayBufferViewCore$1.exportTypedArrayMethod;

	// `%TypedArray%.prototype.subarray` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray
	exportTypedArrayMethod$2('subarray', function subarray(begin, end) {
	  var O = aTypedArray$1(this);
	  var length = O.length;
	  var beginIndex = toAbsoluteIndex(begin, length);
	  var C = typedArraySpeciesConstructor(O);
	  return new C(
	    O.buffer,
	    O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
	    toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex)
	  );
	});

	var global$d = global$1F;
	var apply$3 = functionApply$1;
	var ArrayBufferViewCore = arrayBufferViewCore;
	var fails$6 = fails$1f;
	var arraySlice$2 = arraySlice$b;

	var Int8Array$1 = global$d.Int8Array;
	var aTypedArray = ArrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$1 = ArrayBufferViewCore.exportTypedArrayMethod;
	var $toLocaleString = [].toLocaleString;

	// iOS Safari 6.x fails here
	var TO_LOCALE_STRING_BUG = !!Int8Array$1 && fails$6(function () {
	  $toLocaleString.call(new Int8Array$1(1));
	});

	var FORCED$1 = fails$6(function () {
	  return [1, 2].toLocaleString() != new Int8Array$1([1, 2]).toLocaleString();
	}) || !fails$6(function () {
	  Int8Array$1.prototype.toLocaleString.call([1, 2]);
	});

	// `%TypedArray%.prototype.toLocaleString` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring
	exportTypedArrayMethod$1('toLocaleString', function toLocaleString() {
	  return apply$3(
	    $toLocaleString,
	    TO_LOCALE_STRING_BUG ? arraySlice$2(aTypedArray(this)) : aTypedArray(this),
	    arraySlice$2(arguments)
	  );
	}, FORCED$1);

	var exportTypedArrayMethod = arrayBufferViewCore.exportTypedArrayMethod;
	var fails$5 = fails$1f;
	var global$c = global$1F;
	var uncurryThis$a = functionUncurryThis;

	var Uint8Array$4 = global$c.Uint8Array;
	var Uint8ArrayPrototype = Uint8Array$4 && Uint8Array$4.prototype || {};
	var arrayToString = [].toString;
	var join$3 = uncurryThis$a([].join);

	if (fails$5(function () { arrayToString.call({}); })) {
	  arrayToString = function toString() {
	    return join$3(this);
	  };
	}

	var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

	// `%TypedArray%.prototype.toString` method
	// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tostring
	exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);

	var $$b = _export;
	var uncurryThis$9 = functionUncurryThis;
	var toString$a = toString$C;

	var fromCharCode$2 = String.fromCharCode;
	var charAt$4 = uncurryThis$9(''.charAt);
	var exec$3 = uncurryThis$9(/./.exec);
	var stringSlice$2 = uncurryThis$9(''.slice);

	var hex2 = /^[\da-f]{2}$/i;
	var hex4 = /^[\da-f]{4}$/i;

	// `unescape` method
	// https://tc39.es/ecma262/#sec-unescape-string
	$$b({ global: true }, {
	  unescape: function unescape(string) {
	    var str = toString$a(string);
	    var result = '';
	    var length = str.length;
	    var index = 0;
	    var chr, part;
	    while (index < length) {
	      chr = charAt$4(str, index++);
	      if (chr === '%') {
	        if (charAt$4(str, index) === 'u') {
	          part = stringSlice$2(str, index + 1, index + 5);
	          if (exec$3(hex4, part)) {
	            result += fromCharCode$2(parseInt(part, 16));
	            index += 5;
	            continue;
	          }
	        } else {
	          part = stringSlice$2(str, index, index + 2);
	          if (exec$3(hex2, part)) {
	            result += fromCharCode$2(parseInt(part, 16));
	            index += 2;
	            continue;
	          }
	        }
	      }
	      result += chr;
	    } return result;
	  }
	});

	var uncurryThis$8 = functionUncurryThis;
	var redefineAll$2 = redefineAll$6;
	var getWeakData = internalMetadataExports.getWeakData;
	var anObject$3 = anObject$C;
	var isObject$c = isObject$I;
	var anInstance$4 = anInstance$a;
	var iterate$1 = iterate$9;
	var ArrayIterationModule = arrayIteration;
	var hasOwn$6 = hasOwnProperty_1;
	var InternalStateModule$3 = internalState;

	var setInternalState$3 = InternalStateModule$3.set;
	var internalStateGetterFor = InternalStateModule$3.getterFor;
	var find$1 = ArrayIterationModule.find;
	var findIndex = ArrayIterationModule.findIndex;
	var splice$2 = uncurryThis$8([].splice);
	var id = 0;

	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function (store) {
	  return store.frozen || (store.frozen = new UncaughtFrozenStore());
	};

	var UncaughtFrozenStore = function () {
	  this.entries = [];
	};

	var findUncaughtFrozen = function (store, key) {
	  return find$1(store.entries, function (it) {
	    return it[0] === key;
	  });
	};

	UncaughtFrozenStore.prototype = {
	  get: function (key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function (key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function (key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;
	    else this.entries.push([key, value]);
	  },
	  'delete': function (key) {
	    var index = findIndex(this.entries, function (it) {
	      return it[0] === key;
	    });
	    if (~index) splice$2(this.entries, index, 1);
	    return !!~index;
	  }
	};

	var collectionWeak$2 = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var Constructor = wrapper(function (that, iterable) {
	      anInstance$4(that, Prototype);
	      setInternalState$3(that, {
	        type: CONSTRUCTOR_NAME,
	        id: id++,
	        frozen: undefined
	      });
	      if (iterable != undefined) iterate$1(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
	    });

	    var Prototype = Constructor.prototype;

	    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var data = getWeakData(anObject$3(key), true);
	      if (data === true) uncaughtFrozenStore(state).set(key, value);
	      else data[state.id] = value;
	      return that;
	    };

	    redefineAll$2(Prototype, {
	      // `{ WeakMap, WeakSet }.prototype.delete(key)` methods
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.delete
	      // https://tc39.es/ecma262/#sec-weakset.prototype.delete
	      'delete': function (key) {
	        var state = getInternalState(this);
	        if (!isObject$c(key)) return false;
	        var data = getWeakData(key);
	        if (data === true) return uncaughtFrozenStore(state)['delete'](key);
	        return data && hasOwn$6(data, state.id) && delete data[state.id];
	      },
	      // `{ WeakMap, WeakSet }.prototype.has(key)` methods
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.has
	      // https://tc39.es/ecma262/#sec-weakset.prototype.has
	      has: function has(key) {
	        var state = getInternalState(this);
	        if (!isObject$c(key)) return false;
	        var data = getWeakData(key);
	        if (data === true) return uncaughtFrozenStore(state).has(key);
	        return data && hasOwn$6(data, state.id);
	      }
	    });

	    redefineAll$2(Prototype, IS_MAP ? {
	      // `WeakMap.prototype.get(key)` method
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.get
	      get: function get(key) {
	        var state = getInternalState(this);
	        if (isObject$c(key)) {
	          var data = getWeakData(key);
	          if (data === true) return uncaughtFrozenStore(state).get(key);
	          return data ? data[state.id] : undefined;
	        }
	      },
	      // `WeakMap.prototype.set(key, value)` method
	      // https://tc39.es/ecma262/#sec-weakmap.prototype.set
	      set: function set(key, value) {
	        return define(this, key, value);
	      }
	    } : {
	      // `WeakSet.prototype.add(value)` method
	      // https://tc39.es/ecma262/#sec-weakset.prototype.add
	      add: function add(value) {
	        return define(this, value, true);
	      }
	    });

	    return Constructor;
	  }
	};

	var global$b = global$1F;
	var uncurryThis$7 = functionUncurryThis;
	var redefineAll$1 = redefineAll$6;
	var InternalMetadataModule = internalMetadataExports;
	var collection$1 = collection$4;
	var collectionWeak$1 = collectionWeak$2;
	var isObject$b = isObject$I;
	var isExtensible = objectIsExtensible;
	var enforceInternalState = internalState.enforce;
	var NATIVE_WEAK_MAP = nativeWeakMap;

	var IS_IE11 = !global$b.ActiveXObject && 'ActiveXObject' in global$b;
	var InternalWeakMap;

	var wrapper = function (init) {
	  return function WeakMap() {
	    return init(this, arguments.length ? arguments[0] : undefined);
	  };
	};

	// `WeakMap` constructor
	// https://tc39.es/ecma262/#sec-weakmap-constructor
	var $WeakMap = collection$1('WeakMap', wrapper, collectionWeak$1);

	// IE11 WeakMap frozen keys fix
	// We can't use feature detection because it crash some old IE builds
	// https://github.com/zloirock/core-js/issues/485
	if (NATIVE_WEAK_MAP && IS_IE11) {
	  InternalWeakMap = collectionWeak$1.getConstructor(wrapper, 'WeakMap', true);
	  InternalMetadataModule.enable();
	  var WeakMapPrototype = $WeakMap.prototype;
	  var nativeDelete = uncurryThis$7(WeakMapPrototype['delete']);
	  var nativeHas = uncurryThis$7(WeakMapPrototype.has);
	  var nativeGet = uncurryThis$7(WeakMapPrototype.get);
	  var nativeSet = uncurryThis$7(WeakMapPrototype.set);
	  redefineAll$1(WeakMapPrototype, {
	    'delete': function (key) {
	      if (isObject$b(key) && !isExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeDelete(this, key) || state.frozen['delete'](key);
	      } return nativeDelete(this, key);
	    },
	    has: function has(key) {
	      if (isObject$b(key) && !isExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeHas(this, key) || state.frozen.has(key);
	      } return nativeHas(this, key);
	    },
	    get: function get(key) {
	      if (isObject$b(key) && !isExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
	      } return nativeGet(this, key);
	    },
	    set: function set(key, value) {
	      if (isObject$b(key) && !isExtensible(key)) {
	        var state = enforceInternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
	      } else nativeSet(this, key, value);
	      return this;
	    }
	  });
	}

	var collection = collection$4;
	var collectionWeak = collectionWeak$2;

	// `WeakSet` constructor
	// https://tc39.es/ecma262/#sec-weakset-constructor
	collection('WeakSet', function (init) {
	  return function WeakSet() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionWeak);

	var itoc$1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	var ctoi$1 = {};

	for (var index = 0; index < 66; index++) ctoi$1[itoc$1.charAt(index)] = index;

	var base64Map = {
	  itoc: itoc$1,
	  ctoi: ctoi$1
	};

	var $$a = _export;
	var getBuiltIn$5 = getBuiltIn$l;
	var uncurryThis$6 = functionUncurryThis;
	var fails$4 = fails$1f;
	var toString$9 = toString$C;
	var hasOwn$5 = hasOwnProperty_1;
	var validateArgumentsLength$6 = validateArgumentsLength$8;
	var ctoi = base64Map.ctoi;

	var disallowed = /[^\d+/a-z]/i;
	var whitespaces = /[\t\n\f\r ]+/g;
	var finalEq = /[=]+$/;

	var $atob = getBuiltIn$5('atob');
	var fromCharCode$1 = String.fromCharCode;
	var charAt$3 = uncurryThis$6(''.charAt);
	var replace$3 = uncurryThis$6(''.replace);
	var exec$2 = uncurryThis$6(disallowed.exec);

	var NO_SPACES_IGNORE = fails$4(function () {
	  return atob(' ') !== '';
	});

	var NO_ARG_RECEIVING_CHECK$1 = !NO_SPACES_IGNORE && !fails$4(function () {
	  $atob();
	});

	// `atob` method
	// https://html.spec.whatwg.org/multipage/webappapis.html#dom-atob
	$$a({ global: true, enumerable: true, forced: NO_SPACES_IGNORE || NO_ARG_RECEIVING_CHECK$1 }, {
	  atob: function atob(data) {
	    validateArgumentsLength$6(arguments.length, 1);
	    if (NO_ARG_RECEIVING_CHECK$1) return $atob(data);
	    var string = replace$3(toString$9(data), whitespaces, '');
	    var output = '';
	    var position = 0;
	    var bc = 0;
	    var chr, bs;
	    if (string.length % 4 == 0) {
	      string = replace$3(string, finalEq, '');
	    }
	    if (string.length % 4 == 1 || exec$2(disallowed, string)) {
	      throw new (getBuiltIn$5('DOMException'))('The string is not correctly encoded', 'InvalidCharacterError');
	    }
	    while (chr = charAt$3(string, position++)) {
	      if (hasOwn$5(ctoi, chr)) {
	        bs = bc % 4 ? bs * 64 + ctoi[chr] : ctoi[chr];
	        if (bc++ % 4) output += fromCharCode$1(255 & bs >> (-2 * bc & 6));
	      }
	    } return output;
	  }
	});

	var $$9 = _export;
	var getBuiltIn$4 = getBuiltIn$l;
	var uncurryThis$5 = functionUncurryThis;
	var fails$3 = fails$1f;
	var toString$8 = toString$C;
	var validateArgumentsLength$5 = validateArgumentsLength$8;
	var itoc = base64Map.itoc;

	var $btoa = getBuiltIn$4('btoa');
	var charAt$2 = uncurryThis$5(''.charAt);
	var charCodeAt$1 = uncurryThis$5(''.charCodeAt);

	var NO_ARG_RECEIVING_CHECK = !!$btoa && !fails$3(function () {
	  $btoa();
	});

	// `btoa` method
	// https://html.spec.whatwg.org/multipage/webappapis.html#dom-btoa
	$$9({ global: true, enumerable: true, forced: NO_ARG_RECEIVING_CHECK }, {
	  btoa: function btoa(data) {
	    validateArgumentsLength$5(arguments.length, 1);
	    if (NO_ARG_RECEIVING_CHECK) return $btoa(data);
	    var string = toString$8(data);
	    var output = '';
	    var position = 0;
	    var map = itoc;
	    var block, charCode;
	    while (charAt$2(string, position) || (map = '=', position % 1)) {
	      charCode = charCodeAt$1(string, position += 3 / 4);
	      if (charCode > 0xFF) {
	        throw new (getBuiltIn$4('DOMException'))('The string contains characters outside of the Latin1 range', 'InvalidCharacterError');
	      }
	      block = block << 8 | charCode;
	      output += charAt$2(map, 63 & block >> 8 - position % 1 * 8);
	    } return output;
	  }
	});

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
	var documentCreateElement = documentCreateElement$2;

	var classList = documentCreateElement('span').classList;
	var DOMTokenListPrototype$2 = classList && classList.constructor && classList.constructor.prototype;

	var domTokenListPrototype = DOMTokenListPrototype$2 === Object.prototype ? undefined : DOMTokenListPrototype$2;

	var global$a = global$1F;
	var DOMIterables$1 = domIterables;
	var DOMTokenListPrototype$1 = domTokenListPrototype;
	var forEach = arrayForEach;
	var createNonEnumerableProperty$2 = createNonEnumerableProperty$f;

	var handlePrototype$1 = function (CollectionPrototype) {
	  // some Chrome versions have non-configurable methods on DOMTokenList
	  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
	    createNonEnumerableProperty$2(CollectionPrototype, 'forEach', forEach);
	  } catch (error) {
	    CollectionPrototype.forEach = forEach;
	  }
	};

	for (var COLLECTION_NAME$1 in DOMIterables$1) {
	  if (DOMIterables$1[COLLECTION_NAME$1]) {
	    handlePrototype$1(global$a[COLLECTION_NAME$1] && global$a[COLLECTION_NAME$1].prototype);
	  }
	}

	handlePrototype$1(DOMTokenListPrototype$1);

	var global$9 = global$1F;
	var DOMIterables = domIterables;
	var DOMTokenListPrototype = domTokenListPrototype;
	var ArrayIteratorMethods = es_array_iterator;
	var createNonEnumerableProperty$1 = createNonEnumerableProperty$f;
	var wellKnownSymbol$2 = wellKnownSymbol$y;

	var ITERATOR$2 = wellKnownSymbol$2('iterator');
	var TO_STRING_TAG = wellKnownSymbol$2('toStringTag');
	var ArrayValues = ArrayIteratorMethods.values;

	var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
	  if (CollectionPrototype) {
	    // some Chrome versions have non-configurable methods on DOMTokenList
	    if (CollectionPrototype[ITERATOR$2] !== ArrayValues) try {
	      createNonEnumerableProperty$1(CollectionPrototype, ITERATOR$2, ArrayValues);
	    } catch (error) {
	      CollectionPrototype[ITERATOR$2] = ArrayValues;
	    }
	    if (!CollectionPrototype[TO_STRING_TAG]) {
	      createNonEnumerableProperty$1(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
	    }
	    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
	      // some Chrome versions have non-configurable methods on DOMTokenList
	      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
	        createNonEnumerableProperty$1(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
	      } catch (error) {
	        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
	      }
	    }
	  }
	};

	for (var COLLECTION_NAME in DOMIterables) {
	  handlePrototype(global$9[COLLECTION_NAME] && global$9[COLLECTION_NAME].prototype, COLLECTION_NAME);
	}

	handlePrototype(DOMTokenListPrototype, 'DOMTokenList');

	var IS_NODE$1 = engineIsNode;

	var tryNodeRequire$1 = function (name) {
	  try {
	    // eslint-disable-next-line no-new-func -- safe
	    if (IS_NODE$1) return Function('return require("' + name + '")')();
	  } catch (error) { /* empty */ }
	};

	var domExceptionConstants = {
	  IndexSizeError: { s: 'INDEX_SIZE_ERR', c: 1, m: 1 },
	  DOMStringSizeError: { s: 'DOMSTRING_SIZE_ERR', c: 2, m: 0 },
	  HierarchyRequestError: { s: 'HIERARCHY_REQUEST_ERR', c: 3, m: 1 },
	  WrongDocumentError: { s: 'WRONG_DOCUMENT_ERR', c: 4, m: 1 },
	  InvalidCharacterError: { s: 'INVALID_CHARACTER_ERR', c: 5, m: 1 },
	  NoDataAllowedError: { s: 'NO_DATA_ALLOWED_ERR', c: 6, m: 0 },
	  NoModificationAllowedError: { s: 'NO_MODIFICATION_ALLOWED_ERR', c: 7, m: 1 },
	  NotFoundError: { s: 'NOT_FOUND_ERR', c: 8, m: 1 },
	  NotSupportedError: { s: 'NOT_SUPPORTED_ERR', c: 9, m: 1 },
	  InUseAttributeError: { s: 'INUSE_ATTRIBUTE_ERR', c: 10, m: 1 },
	  InvalidStateError: { s: 'INVALID_STATE_ERR', c: 11, m: 1 },
	  SyntaxError: { s: 'SYNTAX_ERR', c: 12, m: 1 },
	  InvalidModificationError: { s: 'INVALID_MODIFICATION_ERR', c: 13, m: 1 },
	  NamespaceError: { s: 'NAMESPACE_ERR', c: 14, m: 1 },
	  InvalidAccessError: { s: 'INVALID_ACCESS_ERR', c: 15, m: 1 },
	  ValidationError: { s: 'VALIDATION_ERR', c: 16, m: 0 },
	  TypeMismatchError: { s: 'TYPE_MISMATCH_ERR', c: 17, m: 1 },
	  SecurityError: { s: 'SECURITY_ERR', c: 18, m: 1 },
	  NetworkError: { s: 'NETWORK_ERR', c: 19, m: 1 },
	  AbortError: { s: 'ABORT_ERR', c: 20, m: 1 },
	  URLMismatchError: { s: 'URL_MISMATCH_ERR', c: 21, m: 1 },
	  QuotaExceededError: { s: 'QUOTA_EXCEEDED_ERR', c: 22, m: 1 },
	  TimeoutError: { s: 'TIMEOUT_ERR', c: 23, m: 1 },
	  InvalidNodeTypeError: { s: 'INVALID_NODE_TYPE_ERR', c: 24, m: 1 },
	  DataCloneError: { s: 'DATA_CLONE_ERR', c: 25, m: 1 }
	};

	var $$8 = _export;
	var tryNodeRequire = tryNodeRequire$1;
	var getBuiltIn$3 = getBuiltIn$l;
	var fails$2 = fails$1f;
	var create$1 = objectCreate$1;
	var createPropertyDescriptor$2 = createPropertyDescriptor$c;
	var defineProperty$4 = objectDefineProperty.f;
	var defineProperties$1 = objectDefineProperties.f;
	var redefine$2 = redefineExports;
	var hasOwn$4 = hasOwnProperty_1;
	var anInstance$3 = anInstance$a;
	var anObject$2 = anObject$C;
	var errorToString = errorToString$2;
	var normalizeStringArgument$1 = normalizeStringArgument$5;
	var DOMExceptionConstants$1 = domExceptionConstants;
	var clearErrorStack$1 = clearErrorStack$4;
	var InternalStateModule$2 = internalState;
	var DESCRIPTORS$1 = descriptors;

	var DOM_EXCEPTION$2 = 'DOMException';
	var DATA_CLONE_ERR = 'DATA_CLONE_ERR';
	var Error$3 = getBuiltIn$3('Error');
	// NodeJS < 17.0 does not expose `DOMException` to global
	var NativeDOMException$1 = getBuiltIn$3(DOM_EXCEPTION$2) || (function () {
	  try {
	    // NodeJS < 15.0 does not expose `MessageChannel` to global
	    var MessageChannel = getBuiltIn$3('MessageChannel') || tryNodeRequire('worker_threads').MessageChannel;
	    // eslint-disable-next-line es/no-weak-map, unicorn/require-post-message-target-origin -- safe
	    new MessageChannel().port1.postMessage(new WeakMap());
	  } catch (error) {
	    if (error.name == DATA_CLONE_ERR && error.code == 25) return error.constructor;
	  }
	})();
	var ErrorPrototype = Error$3.prototype;
	var setInternalState$2 = InternalStateModule$2.set;
	var getInternalState = InternalStateModule$2.getterFor(DOM_EXCEPTION$2);
	var HAS_STACK = 'stack' in Error$3(DOM_EXCEPTION$2);

	var codeFor = function (name) {
	  return hasOwn$4(DOMExceptionConstants$1, name) && DOMExceptionConstants$1[name].m ? DOMExceptionConstants$1[name].c : 0;
	};

	var $DOMException$1 = function DOMException() {
	  anInstance$3(this, DOMExceptionPrototype$1);
	  var argumentsLength = arguments.length;
	  var message = normalizeStringArgument$1(argumentsLength < 1 ? undefined : arguments[0]);
	  var name = normalizeStringArgument$1(argumentsLength < 2 ? undefined : arguments[1], 'Error');
	  var code = codeFor(name);
	  setInternalState$2(this, {
	    type: DOM_EXCEPTION$2,
	    name: name,
	    message: message,
	    code: code
	  });
	  if (!DESCRIPTORS$1) {
	    this.name = name;
	    this.message = message;
	    this.code = code;
	  }
	  if (HAS_STACK) {
	    var error = Error$3(message);
	    error.name = DOM_EXCEPTION$2;
	    defineProperty$4(this, 'stack', createPropertyDescriptor$2(1, clearErrorStack$1(error.stack, 1)));
	  }
	};

	var DOMExceptionPrototype$1 = $DOMException$1.prototype = create$1(ErrorPrototype);

	var createGetterDescriptor = function (get) {
	  return { enumerable: true, configurable: true, get: get };
	};

	var getterFor = function (key) {
	  return createGetterDescriptor(function () {
	    return getInternalState(this)[key];
	  });
	};

	if (DESCRIPTORS$1) defineProperties$1(DOMExceptionPrototype$1, {
	  name: getterFor('name'),
	  message: getterFor('message'),
	  code: getterFor('code')
	});

	defineProperty$4(DOMExceptionPrototype$1, 'constructor', createPropertyDescriptor$2(1, $DOMException$1));

	// FF36- DOMException is a function, but can't be constructed
	var INCORRECT_CONSTRUCTOR = fails$2(function () {
	  return !(new NativeDOMException$1() instanceof Error$3);
	});

	// Safari 10.1 / Chrome 32- / IE8- DOMException.prototype.toString bugs
	var INCORRECT_TO_STRING = INCORRECT_CONSTRUCTOR || fails$2(function () {
	  return ErrorPrototype.toString !== errorToString || String(new NativeDOMException$1(1, 2)) !== '2: 1';
	});

	// Deno 1.6.3- DOMException.prototype.code just missed
	var INCORRECT_CODE = INCORRECT_CONSTRUCTOR || fails$2(function () {
	  return new NativeDOMException$1(1, 'DataCloneError').code !== 25;
	});

	var FORCED_CONSTRUCTOR$1 = INCORRECT_CONSTRUCTOR;

	// `DOMException` constructor
	// https://webidl.spec.whatwg.org/#idl-DOMException
	$$8({ global: true, forced: FORCED_CONSTRUCTOR$1 }, {
	  DOMException: FORCED_CONSTRUCTOR$1 ? $DOMException$1 : NativeDOMException$1
	});

	var PolyfilledDOMException$1 = getBuiltIn$3(DOM_EXCEPTION$2);
	var PolyfilledDOMExceptionPrototype$1 = PolyfilledDOMException$1.prototype;

	if (INCORRECT_TO_STRING && (NativeDOMException$1 === PolyfilledDOMException$1)) {
	  redefine$2(PolyfilledDOMExceptionPrototype$1, 'toString', errorToString);
	}

	if (INCORRECT_CODE && DESCRIPTORS$1 && NativeDOMException$1 === PolyfilledDOMException$1) {
	  defineProperty$4(PolyfilledDOMExceptionPrototype$1, 'code', createGetterDescriptor(function () {
	    return codeFor(anObject$2(this).name);
	  }));
	}

	for (var key$1 in DOMExceptionConstants$1) if (hasOwn$4(DOMExceptionConstants$1, key$1)) {
	  var constant$3 = DOMExceptionConstants$1[key$1];
	  var constantName$1 = constant$3.s;
	  var descriptor = createPropertyDescriptor$2(6, constant$3.c);
	  if (!hasOwn$4(PolyfilledDOMException$1, constantName$1)) {
	    defineProperty$4(PolyfilledDOMException$1, constantName$1, descriptor);
	  }
	  if (!hasOwn$4(PolyfilledDOMExceptionPrototype$1, constantName$1)) {
	    defineProperty$4(PolyfilledDOMExceptionPrototype$1, constantName$1, descriptor);
	  }
	}

	var $$7 = _export;
	var getBuiltIn$2 = getBuiltIn$l;
	var createPropertyDescriptor$1 = createPropertyDescriptor$c;
	var defineProperty$3 = objectDefineProperty.f;
	var hasOwn$3 = hasOwnProperty_1;
	var anInstance$2 = anInstance$a;
	var inheritIfRequired = inheritIfRequired$6;
	var normalizeStringArgument = normalizeStringArgument$5;
	var DOMExceptionConstants = domExceptionConstants;
	var clearErrorStack = clearErrorStack$4;

	var DOM_EXCEPTION$1 = 'DOMException';
	var Error$2 = getBuiltIn$2('Error');
	var NativeDOMException = getBuiltIn$2(DOM_EXCEPTION$1);

	var $DOMException = function DOMException() {
	  anInstance$2(this, DOMExceptionPrototype);
	  var argumentsLength = arguments.length;
	  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);
	  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');
	  var that = new NativeDOMException(message, name);
	  var error = Error$2(message);
	  error.name = DOM_EXCEPTION$1;
	  defineProperty$3(that, 'stack', createPropertyDescriptor$1(1, clearErrorStack(error.stack, 1)));
	  inheritIfRequired(that, this, $DOMException);
	  return that;
	};

	var DOMExceptionPrototype = $DOMException.prototype = NativeDOMException.prototype;

	var ERROR_HAS_STACK = 'stack' in Error$2(DOM_EXCEPTION$1);
	var DOM_EXCEPTION_HAS_STACK = 'stack' in new NativeDOMException(1, 2);
	var FORCED_CONSTRUCTOR = ERROR_HAS_STACK && !DOM_EXCEPTION_HAS_STACK;

	// `DOMException` constructor patch for `.stack` where it's required
	// https://webidl.spec.whatwg.org/#es-DOMException-specialness
	$$7({ global: true, forced: FORCED_CONSTRUCTOR }, { // TODO: fix export logic
	  DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException
	});

	var PolyfilledDOMException = getBuiltIn$2(DOM_EXCEPTION$1);
	var PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;

	if (PolyfilledDOMExceptionPrototype.constructor !== PolyfilledDOMException) {
	  {
	    defineProperty$3(PolyfilledDOMExceptionPrototype, 'constructor', createPropertyDescriptor$1(1, PolyfilledDOMException));
	  }

	  for (var key in DOMExceptionConstants) if (hasOwn$3(DOMExceptionConstants, key)) {
	    var constant$2 = DOMExceptionConstants[key];
	    var constantName = constant$2.s;
	    if (!hasOwn$3(PolyfilledDOMException, constantName)) {
	      defineProperty$3(PolyfilledDOMException, constantName, createPropertyDescriptor$1(6, constant$2.c));
	    }
	  }
	}

	var getBuiltIn$1 = getBuiltIn$l;
	var setToStringTag$2 = setToStringTag$c;

	var DOM_EXCEPTION = 'DOMException';

	setToStringTag$2(getBuiltIn$1(DOM_EXCEPTION), DOM_EXCEPTION);

	var $$6 = _export;
	var global$8 = global$1F;
	var task = task$2;

	var FORCED = !global$8.setImmediate || !global$8.clearImmediate;

	// http://w3c.github.io/setImmediate/
	$$6({ global: true, bind: true, enumerable: true, forced: FORCED }, {
	  // `setImmediate` method
	  // http://w3c.github.io/setImmediate/#si-setImmediate
	  setImmediate: task.set,
	  // `clearImmediate` method
	  // http://w3c.github.io/setImmediate/#si-clearImmediate
	  clearImmediate: task.clear
	});

	var $$5 = _export;
	var global$7 = global$1F;
	var microtask = microtask$2;
	var aCallable = aCallable$g;
	var validateArgumentsLength$4 = validateArgumentsLength$8;
	var IS_NODE = engineIsNode;

	var process = global$7.process;

	// `queueMicrotask` method
	// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask
	$$5({ global: true, enumerable: true, noTargetGet: true }, {
	  queueMicrotask: function queueMicrotask(fn) {
	    validateArgumentsLength$4(arguments.length, 1);
	    aCallable(fn);
	    var domain = IS_NODE && process.domain;
	    microtask(domain ? domain.bind(fn) : fn);
	  }
	});

	var $$4 = _export;
	var global$6 = global$1F;
	var getBuiltin = getBuiltIn$l;
	var uncurryThis$4 = functionUncurryThis;
	var fails$1 = fails$1f;
	var uid = uid$6;
	var isCallable$2 = isCallable$v;
	var isConstructor = isConstructor$6;
	var isObject$a = isObject$I;
	var isSymbol$5 = isSymbol$b;
	var iterate = iterate$9;
	var anObject$1 = anObject$C;
	var classof$1 = classof$i;
	var hasOwn$2 = hasOwnProperty_1;
	var createProperty = createProperty$9;
	var createNonEnumerableProperty = createNonEnumerableProperty$f;
	var lengthOfArrayLike = lengthOfArrayLike$n;
	var validateArgumentsLength$3 = validateArgumentsLength$8;
	var regExpFlags = regexpFlags$1;
	var ERROR_STACK_INSTALLABLE = errorStackInstallable;

	var Object$1 = global$6.Object;
	var Date$1 = global$6.Date;
	var Error$1 = global$6.Error;
	var EvalError = global$6.EvalError;
	var RangeError$1 = global$6.RangeError;
	var ReferenceError$1 = global$6.ReferenceError;
	var SyntaxError = global$6.SyntaxError;
	var TypeError$3 = global$6.TypeError;
	var URIError = global$6.URIError;
	var PerformanceMark = global$6.PerformanceMark;
	var WebAssembly = global$6.WebAssembly;
	var CompileError = WebAssembly && WebAssembly.CompileError || Error$1;
	var LinkError = WebAssembly && WebAssembly.LinkError || Error$1;
	var RuntimeError = WebAssembly && WebAssembly.RuntimeError || Error$1;
	var DOMException = getBuiltin('DOMException');
	var Set$3 = getBuiltin('Set');
	var Map$4 = getBuiltin('Map');
	var MapPrototype = Map$4.prototype;
	var mapHas = uncurryThis$4(MapPrototype.has);
	var mapGet = uncurryThis$4(MapPrototype.get);
	var mapSet = uncurryThis$4(MapPrototype.set);
	var setAdd = uncurryThis$4(Set$3.prototype.add);
	var objectKeys = getBuiltin('Object', 'keys');
	var push$3 = uncurryThis$4([].push);
	var booleanValueOf = uncurryThis$4(true.valueOf);
	var numberValueOf = uncurryThis$4(1.0.valueOf);
	var stringValueOf = uncurryThis$4(''.valueOf);
	var getFlags = uncurryThis$4(regExpFlags);
	var getTime$1 = uncurryThis$4(Date$1.prototype.getTime);
	var PERFORMANCE_MARK = uid('structuredClone');
	var DATA_CLONE_ERROR = 'DataCloneError';
	var TRANSFERRING = 'Transferring';

	var checkBasicSemantic = function (structuredCloneImplementation) {
	  return !fails$1(function () {
	    var set1 = new global$6.Set([7]);
	    var set2 = structuredCloneImplementation(set1);
	    var number = structuredCloneImplementation(Object$1(7));
	    return set2 == set1 || !set2.has(7) || typeof number != 'object' || number != 7;
	  }) && structuredCloneImplementation;
	};

	// https://github.com/whatwg/html/pull/5749
	var checkNewErrorsSemantic = function (structuredCloneImplementation) {
	  return !fails$1(function () {
	    var test = structuredCloneImplementation(new global$6.AggregateError([1], PERFORMANCE_MARK, { cause: 3 }));
	    return test.name != 'AggregateError' || test.errors[0] != 1 || test.message != PERFORMANCE_MARK || test.cause != 3;
	  }) && structuredCloneImplementation;
	};

	// FF94+, Safari TP134+, Chrome Canary 98+, NodeJS 17.0+, Deno 1.13+
	// current FF and Safari implementations can't clone errors
	// https://bugzilla.mozilla.org/show_bug.cgi?id=1556604
	// no one of current implementations supports new (html/5749) error cloning semantic
	var nativeStructuredClone = global$6.structuredClone;

	var FORCED_REPLACEMENT = !checkNewErrorsSemantic(nativeStructuredClone);

	// Chrome 82+, Safari 14.1+, Deno 1.11+
	// Chrome 78-81 implementation swaps `.name` and `.message` of cloned `DOMException`
	// Safari 14.1 implementation doesn't clone some `RegExp` flags, so requires a workaround
	// current Safari implementation can't clone errors
	// Deno 1.2-1.10 implementations too naive
	// NodeJS 16.0+ does not have `PerformanceMark` constructor, structured cloning implementation
	//   from `performance.mark` is too naive and can't clone, for example, `RegExp` or some boxed primitives
	//   https://github.com/nodejs/node/issues/40840
	// no one of current implementations supports new (html/5749) error cloning semantic
	var structuredCloneFromMark = !nativeStructuredClone && checkBasicSemantic(function (value) {
	  return new PerformanceMark(PERFORMANCE_MARK, { detail: value }).detail;
	});

	var nativeRestrictedStructuredClone = checkBasicSemantic(nativeStructuredClone) || structuredCloneFromMark;

	var throwUncloneable = function (type) {
	  throw new DOMException('Uncloneable type: ' + type, DATA_CLONE_ERROR);
	};

	var throwUnpolyfillable = function (type, kind) {
	  throw new DOMException((kind || 'Cloning') + ' of ' + type + ' cannot be properly polyfilled in this engine', DATA_CLONE_ERROR);
	};

	var structuredCloneInternal = function (value, map) {
	  if (isSymbol$5(value)) throwUncloneable('Symbol');
	  if (!isObject$a(value)) return value;
	  // effectively preserves circular references
	  if (map) {
	    if (mapHas(map, value)) return mapGet(map, value);
	  } else map = new Map$4();

	  var type = classof$1(value);
	  var deep = false;
	  var C, name, cloned, dataTransfer, i, length, keys, key, source, target;

	  switch (type) {
	    case 'Array':
	      cloned = [];
	      deep = true;
	      break;
	    case 'Object':
	      cloned = {};
	      deep = true;
	      break;
	    case 'Map':
	      cloned = new Map$4();
	      deep = true;
	      break;
	    case 'Set':
	      cloned = new Set$3();
	      deep = true;
	      break;
	    case 'RegExp':
	      // in this block because of a Safari 14.1 bug
	      // old FF does not clone regexes passed to the constructor, so get the source and flags directly
	      cloned = new RegExp(value.source, 'flags' in value ? value.flags : getFlags(value));
	      break;
	    case 'Error':
	      name = value.name;
	      switch (name) {
	        case 'AggregateError':
	          cloned = getBuiltin('AggregateError')([]);
	          break;
	        case 'EvalError':
	          cloned = EvalError();
	          break;
	        case 'RangeError':
	          cloned = RangeError$1();
	          break;
	        case 'ReferenceError':
	          cloned = ReferenceError$1();
	          break;
	        case 'SyntaxError':
	          cloned = SyntaxError();
	          break;
	        case 'TypeError':
	          cloned = TypeError$3();
	          break;
	        case 'URIError':
	          cloned = URIError();
	          break;
	        case 'CompileError':
	          cloned = CompileError();
	          break;
	        case 'LinkError':
	          cloned = LinkError();
	          break;
	        case 'RuntimeError':
	          cloned = RuntimeError();
	          break;
	        default:
	          cloned = Error$1();
	      }
	      deep = true;
	      break;
	    case 'DOMException':
	      cloned = new DOMException(value.message, value.name);
	      deep = true;
	      break;
	    case 'DataView':
	    case 'Int8Array':
	    case 'Uint8Array':
	    case 'Uint8ClampedArray':
	    case 'Int16Array':
	    case 'Uint16Array':
	    case 'Int32Array':
	    case 'Uint32Array':
	    case 'Float32Array':
	    case 'Float64Array':
	    case 'BigInt64Array':
	    case 'BigUint64Array':
	      C = global$6[type];
	      // in some old engines like Safari 9, typeof C is 'object'
	      // on Uint8ClampedArray or some other constructors
	      if (!isObject$a(C)) throwUnpolyfillable(type);
	      cloned = new C(
	        // this is safe, since arraybuffer cannot have circular references
	        structuredCloneInternal(value.buffer, map),
	        value.byteOffset,
	        type === 'DataView' ? value.byteLength : value.length
	      );
	      break;
	    case 'DOMQuad':
	      try {
	        cloned = new DOMQuad(
	          structuredCloneInternal(value.p1, map),
	          structuredCloneInternal(value.p2, map),
	          structuredCloneInternal(value.p3, map),
	          structuredCloneInternal(value.p4, map)
	        );
	      } catch (error) {
	        if (nativeRestrictedStructuredClone) {
	          cloned = nativeRestrictedStructuredClone(value);
	        } else throwUnpolyfillable(type);
	      }
	      break;
	    case 'FileList':
	      C = global$6.DataTransfer;
	      if (isConstructor(C)) {
	        dataTransfer = new C();
	        for (i = 0, length = lengthOfArrayLike(value); i < length; i++) {
	          dataTransfer.items.add(structuredCloneInternal(value[i], map));
	        }
	        cloned = dataTransfer.files;
	      } else if (nativeRestrictedStructuredClone) {
	        cloned = nativeRestrictedStructuredClone(value);
	      } else throwUnpolyfillable(type);
	      break;
	    case 'ImageData':
	      // Safari 9 ImageData is a constructor, but typeof ImageData is 'object'
	      try {
	        cloned = new ImageData(
	          structuredCloneInternal(value.data, map),
	          value.width,
	          value.height,
	          { colorSpace: value.colorSpace }
	        );
	      } catch (error) {
	        if (nativeRestrictedStructuredClone) {
	          cloned = nativeRestrictedStructuredClone(value);
	        } else throwUnpolyfillable(type);
	      } break;
	    default:
	      if (nativeRestrictedStructuredClone) {
	        cloned = nativeRestrictedStructuredClone(value);
	      } else switch (type) {
	        case 'BigInt':
	          // can be a 3rd party polyfill
	          cloned = Object$1(value.valueOf());
	          break;
	        case 'Boolean':
	          cloned = Object$1(booleanValueOf(value));
	          break;
	        case 'Number':
	          cloned = Object$1(numberValueOf(value));
	          break;
	        case 'String':
	          cloned = Object$1(stringValueOf(value));
	          break;
	        case 'Date':
	          cloned = new Date$1(getTime$1(value));
	          break;
	        case 'ArrayBuffer':
	          C = global$6.DataView;
	          // `ArrayBuffer#slice` is not available in IE10
	          // `ArrayBuffer#slice` and `DataView` are not available in old FF
	          if (!C && typeof value.slice != 'function') throwUnpolyfillable(type);
	          // detached buffers throws in `DataView` and `.slice`
	          try {
	            if (typeof value.slice == 'function') {
	              cloned = value.slice(0);
	            } else {
	              length = value.byteLength;
	              cloned = new ArrayBuffer(length);
	              source = new C(value);
	              target = new C(cloned);
	              for (i = 0; i < length; i++) {
	                target.setUint8(i, source.getUint8(i));
	              }
	            }
	          } catch (error) {
	            throw new DOMException('ArrayBuffer is detached', DATA_CLONE_ERROR);
	          } break;
	        case 'SharedArrayBuffer':
	          // SharedArrayBuffer should use shared memory, we can't polyfill it, so return the original
	          cloned = value;
	          break;
	        case 'Blob':
	          try {
	            cloned = value.slice(0, value.size, value.type);
	          } catch (error) {
	            throwUnpolyfillable(type);
	          } break;
	        case 'DOMPoint':
	        case 'DOMPointReadOnly':
	          C = global$6[type];
	          try {
	            cloned = C.fromPoint
	              ? C.fromPoint(value)
	              : new C(value.x, value.y, value.z, value.w);
	          } catch (error) {
	            throwUnpolyfillable(type);
	          } break;
	        case 'DOMRect':
	        case 'DOMRectReadOnly':
	          C = global$6[type];
	          try {
	            cloned = C.fromRect
	              ? C.fromRect(value)
	              : new C(value.x, value.y, value.width, value.height);
	          } catch (error) {
	            throwUnpolyfillable(type);
	          } break;
	        case 'DOMMatrix':
	        case 'DOMMatrixReadOnly':
	          C = global$6[type];
	          try {
	            cloned = C.fromMatrix
	              ? C.fromMatrix(value)
	              : new C(value);
	          } catch (error) {
	            throwUnpolyfillable(type);
	          } break;
	        case 'AudioData':
	        case 'VideoFrame':
	          if (!isCallable$2(value.clone)) throwUnpolyfillable(type);
	          try {
	            cloned = value.clone();
	          } catch (error) {
	            throwUncloneable(type);
	          } break;
	        case 'File':
	          try {
	            cloned = new File([value], value.name, value);
	          } catch (error) {
	            throwUnpolyfillable(type);
	          } break;
	        case 'CryptoKey':
	        case 'GPUCompilationMessage':
	        case 'GPUCompilationInfo':
	        case 'ImageBitmap':
	        case 'RTCCertificate':
	        case 'WebAssembly.Module':
	          throwUnpolyfillable(type);
	          // break omitted
	        default:
	          throwUncloneable(type);
	      }
	  }

	  mapSet(map, value, cloned);

	  if (deep) switch (type) {
	    case 'Array':
	    case 'Object':
	      keys = objectKeys(value);
	      for (i = 0, length = lengthOfArrayLike(keys); i < length; i++) {
	        key = keys[i];
	        createProperty(cloned, key, structuredCloneInternal(value[key], map));
	      } break;
	    case 'Map':
	      value.forEach(function (v, k) {
	        mapSet(cloned, structuredCloneInternal(k, map), structuredCloneInternal(v, map));
	      });
	      break;
	    case 'Set':
	      value.forEach(function (v) {
	        setAdd(cloned, structuredCloneInternal(v, map));
	      });
	      break;
	    case 'Error':
	      createNonEnumerableProperty(cloned, 'message', structuredCloneInternal(value.message, map));
	      if (hasOwn$2(value, 'cause')) {
	        createNonEnumerableProperty(cloned, 'cause', structuredCloneInternal(value.cause, map));
	      }
	      if (name == 'AggregateError') {
	        cloned.errors = structuredCloneInternal(value.errors, map);
	      } // break omitted
	    case 'DOMException':
	      if (ERROR_STACK_INSTALLABLE) {
	        createNonEnumerableProperty(cloned, 'stack', structuredCloneInternal(value.stack, map));
	      }
	  }

	  return cloned;
	};

	var PROPER_TRANSFER = nativeStructuredClone && !fails$1(function () {
	  var buffer = new ArrayBuffer(8);
	  var clone = nativeStructuredClone(buffer, { transfer: [buffer] });
	  return buffer.byteLength != 0 || clone.byteLength != 8;
	});

	var tryToTransfer = function (rawTransfer, map) {
	  if (!isObject$a(rawTransfer)) throw TypeError$3('Transfer option cannot be converted to a sequence');

	  var transfer = [];

	  iterate(rawTransfer, function (value) {
	    push$3(transfer, anObject$1(value));
	  });

	  var i = 0;
	  var length = lengthOfArrayLike(transfer);
	  var value, type, C, transferredArray, transferred, canvas, context;

	  if (PROPER_TRANSFER) {
	    transferredArray = nativeStructuredClone(transfer, { transfer: transfer });
	    while (i < length) mapSet(map, transfer[i], transferredArray[i++]);
	  } else while (i < length) {
	    value = transfer[i++];
	    if (mapHas(map, value)) throw new DOMException('Duplicate transferable', DATA_CLONE_ERROR);

	    type = classof$1(value);

	    switch (type) {
	      case 'ImageBitmap':
	        C = global$6.OffscreenCanvas;
	        if (!isConstructor(C)) throwUnpolyfillable(type, TRANSFERRING);
	        try {
	          canvas = new C(value.width, value.height);
	          context = canvas.getContext('bitmaprenderer');
	          context.transferFromImageBitmap(value);
	          transferred = canvas.transferToImageBitmap();
	        } catch (error) { /* empty */ }
	        break;
	      case 'AudioData':
	      case 'VideoFrame':
	        if (!isCallable$2(value.clone) || !isCallable$2(value.close)) throwUnpolyfillable(type, TRANSFERRING);
	        try {
	          transferred = value.clone();
	          value.close();
	        } catch (error) { /* empty */ }
	        break;
	      case 'ArrayBuffer':
	      case 'MessagePort':
	      case 'OffscreenCanvas':
	      case 'ReadableStream':
	      case 'TransformStream':
	      case 'WritableStream':
	        throwUnpolyfillable(type, TRANSFERRING);
	    }

	    if (transferred === undefined) throw new DOMException('This object cannot be transferred: ' + type, DATA_CLONE_ERROR);
	    mapSet(map, value, transferred);
	  }
	};

	$$4({ global: true, enumerable: true, sham: !PROPER_TRANSFER, forced: FORCED_REPLACEMENT }, {
	  structuredClone: function structuredClone(value /* , { transfer } */) {
	    var options = validateArgumentsLength$3(arguments.length, 1) > 1 ? anObject$1(arguments[1]) : undefined;
	    var transfer = options ? options.transfer : undefined;
	    var map;

	    if (transfer !== undefined) {
	      map = new Map$4();
	      tryToTransfer(transfer, map);
	    }

	    return structuredCloneInternal(value, map);
	  }
	});

	var $$3 = _export;
	var global$5 = global$1F;
	var apply$2 = functionApply$1;
	var isCallable$1 = isCallable$v;
	var userAgent = engineUserAgent;
	var arraySlice$1 = arraySlice$b;
	var validateArgumentsLength$2 = validateArgumentsLength$8;

	var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
	var Function$1 = global$5.Function;

	var wrap = function (scheduler) {
	  return function (handler, timeout /* , ...arguments */) {
	    var boundArgs = validateArgumentsLength$2(arguments.length, 1) > 2;
	    var fn = isCallable$1(handler) ? handler : Function$1(handler);
	    var args = boundArgs ? arraySlice$1(arguments, 2) : undefined;
	    return scheduler(boundArgs ? function () {
	      apply$2(fn, this, args);
	    } : fn, timeout);
	  };
	};

	// ie9- setTimeout & setInterval additional parameters fix
	// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
	$$3({ global: true, bind: true, forced: MSIE }, {
	  // `setTimeout` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
	  setTimeout: wrap(global$5.setTimeout),
	  // `setInterval` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
	  setInterval: wrap(global$5.setInterval)
	});

	var fails = fails$1f;
	var wellKnownSymbol$1 = wellKnownSymbol$y;

	var ITERATOR$1 = wellKnownSymbol$1('iterator');

	var nativeUrl = !fails(function () {
	  // eslint-disable-next-line unicorn/relative-url-style -- required for testing
	  var url = new URL('b?a=1&b=2&c=3', 'http://a');
	  var searchParams = url.searchParams;
	  var result = '';
	  url.pathname = 'c%20d';
	  searchParams.forEach(function (value, key) {
	    searchParams['delete']('b');
	    result += key + value;
	  });
	  return !searchParams.sort
	    || url.href !== 'http://a/c%20d?a=1&c=3'
	    || searchParams.get('c') !== '3'
	    || String(new URLSearchParams('?a=1')) !== 'a=1'
	    || !searchParams[ITERATOR$1]
	    // throws in Edge
	    || new URL('https://a@b').username !== 'a'
	    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
	    // not punycoded in Edge
	    || new URL('http://тест').host !== 'xn--e1aybc'
	    // not escaped in Chrome 62-
	    || new URL('http://a#б').hash !== '#%D0%B1'
	    // fails in Chrome 66-
	    || result !== 'a1c3'
	    // throws in Safari
	    || new URL('http://x', undefined).host !== 'x';
	});

	// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
	var global$4 = global$1F;
	var uncurryThis$3 = functionUncurryThis;

	var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
	var base = 36;
	var tMin = 1;
	var tMax = 26;
	var skew = 38;
	var damp = 700;
	var initialBias = 72;
	var initialN = 128; // 0x80
	var delimiter = '-'; // '\x2D'
	var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
	var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
	var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
	var baseMinusTMin = base - tMin;

	var RangeError = global$4.RangeError;
	var exec$1 = uncurryThis$3(regexSeparators.exec);
	var floor$1 = Math.floor;
	var fromCharCode = String.fromCharCode;
	var charCodeAt = uncurryThis$3(''.charCodeAt);
	var join$2 = uncurryThis$3([].join);
	var push$2 = uncurryThis$3([].push);
	var replace$2 = uncurryThis$3(''.replace);
	var split$2 = uncurryThis$3(''.split);
	var toLowerCase$1 = uncurryThis$3(''.toLowerCase);

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 */
	var ucs2decode = function (string) {
	  var output = [];
	  var counter = 0;
	  var length = string.length;
	  while (counter < length) {
	    var value = charCodeAt(string, counter++);
	    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
	      // It's a high surrogate, and there is a next character.
	      var extra = charCodeAt(string, counter++);
	      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
	        push$2(output, ((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
	      } else {
	        // It's an unmatched surrogate; only append this code unit, in case the
	        // next code unit is the high surrogate of a surrogate pair.
	        push$2(output, value);
	        counter--;
	      }
	    } else {
	      push$2(output, value);
	    }
	  }
	  return output;
	};

	/**
	 * Converts a digit/integer into a basic code point.
	 */
	var digitToBasic = function (digit) {
	  //  0..25 map to ASCII a..z or A..Z
	  // 26..35 map to ASCII 0..9
	  return digit + 22 + 75 * (digit < 26);
	};

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 */
	var adapt = function (delta, numPoints, firstTime) {
	  var k = 0;
	  delta = firstTime ? floor$1(delta / damp) : delta >> 1;
	  delta += floor$1(delta / numPoints);
	  while (delta > baseMinusTMin * tMax >> 1) {
	    delta = floor$1(delta / baseMinusTMin);
	    k += base;
	  }
	  return floor$1(k + (baseMinusTMin + 1) * delta / (delta + skew));
	};

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 */
	var encode = function (input) {
	  var output = [];

	  // Convert the input in UCS-2 to an array of Unicode code points.
	  input = ucs2decode(input);

	  // Cache the length.
	  var inputLength = input.length;

	  // Initialize the state.
	  var n = initialN;
	  var delta = 0;
	  var bias = initialBias;
	  var i, currentValue;

	  // Handle the basic code points.
	  for (i = 0; i < input.length; i++) {
	    currentValue = input[i];
	    if (currentValue < 0x80) {
	      push$2(output, fromCharCode(currentValue));
	    }
	  }

	  var basicLength = output.length; // number of basic code points.
	  var handledCPCount = basicLength; // number of code points that have been handled;

	  // Finish the basic string with a delimiter unless it's empty.
	  if (basicLength) {
	    push$2(output, delimiter);
	  }

	  // Main encoding loop:
	  while (handledCPCount < inputLength) {
	    // All non-basic code points < n have been handled already. Find the next larger one:
	    var m = maxInt;
	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];
	      if (currentValue >= n && currentValue < m) {
	        m = currentValue;
	      }
	    }

	    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
	    var handledCPCountPlusOne = handledCPCount + 1;
	    if (m - n > floor$1((maxInt - delta) / handledCPCountPlusOne)) {
	      throw RangeError(OVERFLOW_ERROR);
	    }

	    delta += (m - n) * handledCPCountPlusOne;
	    n = m;

	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];
	      if (currentValue < n && ++delta > maxInt) {
	        throw RangeError(OVERFLOW_ERROR);
	      }
	      if (currentValue == n) {
	        // Represent delta as a generalized variable-length integer.
	        var q = delta;
	        var k = base;
	        while (true) {
	          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	          if (q < t) break;
	          var qMinusT = q - t;
	          var baseMinusT = base - t;
	          push$2(output, fromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
	          q = floor$1(qMinusT / baseMinusT);
	          k += base;
	        }

	        push$2(output, fromCharCode(digitToBasic(q)));
	        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
	        delta = 0;
	        handledCPCount++;
	      }
	    }

	    delta++;
	    n++;
	  }
	  return join$2(output, '');
	};

	var stringPunycodeToAscii = function (input) {
	  var encoded = [];
	  var labels = split$2(replace$2(toLowerCase$1(input), regexSeparators, '\u002E'), '.');
	  var i, label;
	  for (i = 0; i < labels.length; i++) {
	    label = labels[i];
	    push$2(encoded, exec$1(regexNonASCII, label) ? 'xn--' + encode(label) : label);
	  }
	  return join$2(encoded, '.');
	};

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`

	var $$2 = _export;
	var global$3 = global$1F;
	var getBuiltIn = getBuiltIn$l;
	var call$1 = functionCall;
	var uncurryThis$2 = functionUncurryThis;
	var USE_NATIVE_URL$1 = nativeUrl;
	var redefine$1 = redefineExports;
	var redefineAll = redefineAll$6;
	var setToStringTag$1 = setToStringTag$c;
	var createIteratorConstructor = createIteratorConstructor$3;
	var InternalStateModule$1 = internalState;
	var anInstance$1 = anInstance$a;
	var isCallable = isCallable$v;
	var hasOwn$1 = hasOwnProperty_1;
	var bind$1 = functionBindContext;
	var classof = classof$i;
	var anObject = anObject$C;
	var isObject$9 = isObject$I;
	var $toString$1 = toString$C;
	var create = objectCreate$1;
	var createPropertyDescriptor = createPropertyDescriptor$c;
	var getIterator = getIterator$4;
	var getIteratorMethod = getIteratorMethod$5;
	var validateArgumentsLength$1 = validateArgumentsLength$8;
	var wellKnownSymbol = wellKnownSymbol$y;
	var arraySort = arraySort$1;

	var ITERATOR = wellKnownSymbol('iterator');
	var URL_SEARCH_PARAMS = 'URLSearchParams';
	var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
	var setInternalState$1 = InternalStateModule$1.set;
	var getInternalParamsState = InternalStateModule$1.getterFor(URL_SEARCH_PARAMS);
	var getInternalIteratorState = InternalStateModule$1.getterFor(URL_SEARCH_PARAMS_ITERATOR);

	var n$Fetch = getBuiltIn('fetch');
	var N$Request = getBuiltIn('Request');
	var Headers = getBuiltIn('Headers');
	var RequestPrototype = N$Request && N$Request.prototype;
	var HeadersPrototype = Headers && Headers.prototype;
	var RegExp$1 = global$3.RegExp;
	var TypeError$2 = global$3.TypeError;
	var decodeURIComponent$1 = global$3.decodeURIComponent;
	var encodeURIComponent$1 = global$3.encodeURIComponent;
	var charAt$1 = uncurryThis$2(''.charAt);
	var join$1 = uncurryThis$2([].join);
	var push$1 = uncurryThis$2([].push);
	var replace$1 = uncurryThis$2(''.replace);
	var shift$1 = uncurryThis$2([].shift);
	var splice$1 = uncurryThis$2([].splice);
	var split$1 = uncurryThis$2(''.split);
	var stringSlice$1 = uncurryThis$2(''.slice);

	var plus = /\+/g;
	var sequences = Array(4);

	var percentSequence = function (bytes) {
	  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp$1('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
	};

	var percentDecode = function (sequence) {
	  try {
	    return decodeURIComponent$1(sequence);
	  } catch (error) {
	    return sequence;
	  }
	};

	var deserialize = function (it) {
	  var result = replace$1(it, plus, ' ');
	  var bytes = 4;
	  try {
	    return decodeURIComponent$1(result);
	  } catch (error) {
	    while (bytes) {
	      result = replace$1(result, percentSequence(bytes--), percentDecode);
	    }
	    return result;
	  }
	};

	var find = /[!'()~]|%20/g;

	var replacements = {
	  '!': '%21',
	  "'": '%27',
	  '(': '%28',
	  ')': '%29',
	  '~': '%7E',
	  '%20': '+'
	};

	var replacer = function (match) {
	  return replacements[match];
	};

	var serialize = function (it) {
	  return replace$1(encodeURIComponent$1(it), find, replacer);
	};

	var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
	  setInternalState$1(this, {
	    type: URL_SEARCH_PARAMS_ITERATOR,
	    iterator: getIterator(getInternalParamsState(params).entries),
	    kind: kind
	  });
	}, 'Iterator', function next() {
	  var state = getInternalIteratorState(this);
	  var kind = state.kind;
	  var step = state.iterator.next();
	  var entry = step.value;
	  if (!step.done) {
	    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
	  } return step;
	}, true);

	var URLSearchParamsState = function (init) {
	  this.entries = [];
	  this.url = null;

	  if (init !== undefined) {
	    if (isObject$9(init)) this.parseObject(init);
	    else this.parseQuery(typeof init == 'string' ? charAt$1(init, 0) === '?' ? stringSlice$1(init, 1) : init : $toString$1(init));
	  }
	};

	URLSearchParamsState.prototype = {
	  type: URL_SEARCH_PARAMS,
	  bindURL: function (url) {
	    this.url = url;
	    this.update();
	  },
	  parseObject: function (object) {
	    var iteratorMethod = getIteratorMethod(object);
	    var iterator, next, step, entryIterator, entryNext, first, second;

	    if (iteratorMethod) {
	      iterator = getIterator(object, iteratorMethod);
	      next = iterator.next;
	      while (!(step = call$1(next, iterator)).done) {
	        entryIterator = getIterator(anObject(step.value));
	        entryNext = entryIterator.next;
	        if (
	          (first = call$1(entryNext, entryIterator)).done ||
	          (second = call$1(entryNext, entryIterator)).done ||
	          !call$1(entryNext, entryIterator).done
	        ) throw TypeError$2('Expected sequence with length 2');
	        push$1(this.entries, { key: $toString$1(first.value), value: $toString$1(second.value) });
	      }
	    } else for (var key in object) if (hasOwn$1(object, key)) {
	      push$1(this.entries, { key: key, value: $toString$1(object[key]) });
	    }
	  },
	  parseQuery: function (query) {
	    if (query) {
	      var attributes = split$1(query, '&');
	      var index = 0;
	      var attribute, entry;
	      while (index < attributes.length) {
	        attribute = attributes[index++];
	        if (attribute.length) {
	          entry = split$1(attribute, '=');
	          push$1(this.entries, {
	            key: deserialize(shift$1(entry)),
	            value: deserialize(join$1(entry, '='))
	          });
	        }
	      }
	    }
	  },
	  serialize: function () {
	    var entries = this.entries;
	    var result = [];
	    var index = 0;
	    var entry;
	    while (index < entries.length) {
	      entry = entries[index++];
	      push$1(result, serialize(entry.key) + '=' + serialize(entry.value));
	    } return join$1(result, '&');
	  },
	  update: function () {
	    this.entries.length = 0;
	    this.parseQuery(this.url.query);
	  },
	  updateURL: function () {
	    if (this.url) this.url.update();
	  }
	};

	// `URLSearchParams` constructor
	// https://url.spec.whatwg.org/#interface-urlsearchparams
	var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
	  anInstance$1(this, URLSearchParamsPrototype);
	  var init = arguments.length > 0 ? arguments[0] : undefined;
	  setInternalState$1(this, new URLSearchParamsState(init));
	};

	var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

	redefineAll(URLSearchParamsPrototype, {
	  // `URLSearchParams.prototype.append` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
	  append: function append(name, value) {
	    validateArgumentsLength$1(arguments.length, 2);
	    var state = getInternalParamsState(this);
	    push$1(state.entries, { key: $toString$1(name), value: $toString$1(value) });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.delete` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
	  'delete': function (name) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var key = $toString$1(name);
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index].key === key) splice$1(entries, index, 1);
	      else index++;
	    }
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.get` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
	  get: function get(name) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = $toString$1(name);
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) return entries[index].value;
	    }
	    return null;
	  },
	  // `URLSearchParams.prototype.getAll` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
	  getAll: function getAll(name) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = $toString$1(name);
	    var result = [];
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) push$1(result, entries[index].value);
	    }
	    return result;
	  },
	  // `URLSearchParams.prototype.has` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
	  has: function has(name) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = $toString$1(name);
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index++].key === key) return true;
	    }
	    return false;
	  },
	  // `URLSearchParams.prototype.set` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
	  set: function set(name, value) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var found = false;
	    var key = $toString$1(name);
	    var val = $toString$1(value);
	    var index = 0;
	    var entry;
	    for (; index < entries.length; index++) {
	      entry = entries[index];
	      if (entry.key === key) {
	        if (found) splice$1(entries, index--, 1);
	        else {
	          found = true;
	          entry.value = val;
	        }
	      }
	    }
	    if (!found) push$1(entries, { key: key, value: val });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.sort` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
	  sort: function sort() {
	    var state = getInternalParamsState(this);
	    arraySort(state.entries, function (a, b) {
	      return a.key > b.key ? 1 : -1;
	    });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.forEach` method
	  forEach: function forEach(callback /* , thisArg */) {
	    var entries = getInternalParamsState(this).entries;
	    var boundFunction = bind$1(callback, arguments.length > 1 ? arguments[1] : undefined);
	    var index = 0;
	    var entry;
	    while (index < entries.length) {
	      entry = entries[index++];
	      boundFunction(entry.value, entry.key, this);
	    }
	  },
	  // `URLSearchParams.prototype.keys` method
	  keys: function keys() {
	    return new URLSearchParamsIterator(this, 'keys');
	  },
	  // `URLSearchParams.prototype.values` method
	  values: function values() {
	    return new URLSearchParamsIterator(this, 'values');
	  },
	  // `URLSearchParams.prototype.entries` method
	  entries: function entries() {
	    return new URLSearchParamsIterator(this, 'entries');
	  }
	}, { enumerable: true });

	// `URLSearchParams.prototype[@@iterator]` method
	redefine$1(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries, { name: 'entries' });

	// `URLSearchParams.prototype.toString` method
	// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
	redefine$1(URLSearchParamsPrototype, 'toString', function toString() {
	  return getInternalParamsState(this).serialize();
	}, { enumerable: true });

	setToStringTag$1(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

	$$2({ global: true, forced: !USE_NATIVE_URL$1 }, {
	  URLSearchParams: URLSearchParamsConstructor
	});

	// Wrap `fetch` and `Request` for correct work with polyfilled `URLSearchParams`
	if (!USE_NATIVE_URL$1 && isCallable(Headers)) {
	  var headersHas = uncurryThis$2(HeadersPrototype.has);
	  var headersSet = uncurryThis$2(HeadersPrototype.set);

	  var wrapRequestOptions = function (init) {
	    if (isObject$9(init)) {
	      var body = init.body;
	      var headers;
	      if (classof(body) === URL_SEARCH_PARAMS) {
	        headers = init.headers ? new Headers(init.headers) : new Headers();
	        if (!headersHas(headers, 'content-type')) {
	          headersSet(headers, 'content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	        }
	        return create(init, {
	          body: createPropertyDescriptor(0, $toString$1(body)),
	          headers: createPropertyDescriptor(0, headers)
	        });
	      }
	    } return init;
	  };

	  if (isCallable(n$Fetch)) {
	    $$2({ global: true, enumerable: true, forced: true }, {
	      fetch: function fetch(input /* , init */) {
	        return n$Fetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
	      }
	    });
	  }

	  if (isCallable(N$Request)) {
	    var RequestConstructor = function Request(input /* , init */) {
	      anInstance$1(this, RequestPrototype);
	      return new N$Request(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
	    };

	    RequestPrototype.constructor = RequestConstructor;
	    RequestConstructor.prototype = RequestPrototype;

	    $$2({ global: true, forced: true }, {
	      Request: RequestConstructor
	    });
	  }
	}

	var web_urlSearchParams = {
	  URLSearchParams: URLSearchParamsConstructor,
	  getState: getInternalParamsState
	};

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`

	var $$1 = _export;
	var DESCRIPTORS = descriptors;
	var USE_NATIVE_URL = nativeUrl;
	var global$2 = global$1F;
	var bind = functionBindContext;
	var uncurryThis$1 = functionUncurryThis;
	var defineProperties = objectDefineProperties.f;
	var redefine = redefineExports;
	var anInstance = anInstance$a;
	var hasOwn = hasOwnProperty_1;
	var assign = objectAssign;
	var arrayFrom = arrayFrom$1;
	var arraySlice = arraySliceSimple;
	var codeAt = stringMultibyte.codeAt;
	var toASCII = stringPunycodeToAscii;
	var $toString = toString$C;
	var setToStringTag = setToStringTag$c;
	var validateArgumentsLength = validateArgumentsLength$8;
	var URLSearchParamsModule = web_urlSearchParams;
	var InternalStateModule = internalState;

	var setInternalState = InternalStateModule.set;
	var getInternalURLState = InternalStateModule.getterFor('URL');
	var URLSearchParams$1 = URLSearchParamsModule.URLSearchParams;
	var getInternalSearchParamsState = URLSearchParamsModule.getState;

	var NativeURL = global$2.URL;
	var TypeError$1 = global$2.TypeError;
	var parseInt$1 = global$2.parseInt;
	var floor = Math.floor;
	var pow = Math.pow;
	var charAt = uncurryThis$1(''.charAt);
	var exec = uncurryThis$1(/./.exec);
	var join = uncurryThis$1([].join);
	var numberToString = uncurryThis$1(1.0.toString);
	var pop = uncurryThis$1([].pop);
	var push = uncurryThis$1([].push);
	var replace = uncurryThis$1(''.replace);
	var shift = uncurryThis$1([].shift);
	var split = uncurryThis$1(''.split);
	var stringSlice = uncurryThis$1(''.slice);
	var toLowerCase = uncurryThis$1(''.toLowerCase);
	var unshift = uncurryThis$1([].unshift);

	var INVALID_AUTHORITY = 'Invalid authority';
	var INVALID_SCHEME = 'Invalid scheme';
	var INVALID_HOST = 'Invalid host';
	var INVALID_PORT = 'Invalid port';

	var ALPHA = /[a-z]/i;
	// eslint-disable-next-line regexp/no-obscure-range -- safe
	var ALPHANUMERIC = /[\d+-.a-z]/i;
	var DIGIT = /\d/;
	var HEX_START = /^0x/i;
	var OCT = /^[0-7]+$/;
	var DEC = /^\d+$/;
	var HEX = /^[\da-f]+$/i;
	/* eslint-disable regexp/no-control-character -- safe */
	var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
	var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
	var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g;
	var TAB_AND_NEW_LINE = /[\t\n\r]/g;
	/* eslint-enable regexp/no-control-character -- safe */
	var EOF;

	// https://url.spec.whatwg.org/#ipv4-number-parser
	var parseIPv4 = function (input) {
	  var parts = split(input, '.');
	  var partsLength, numbers, index, part, radix, number, ipv4;
	  if (parts.length && parts[parts.length - 1] == '') {
	    parts.length--;
	  }
	  partsLength = parts.length;
	  if (partsLength > 4) return input;
	  numbers = [];
	  for (index = 0; index < partsLength; index++) {
	    part = parts[index];
	    if (part == '') return input;
	    radix = 10;
	    if (part.length > 1 && charAt(part, 0) == '0') {
	      radix = exec(HEX_START, part) ? 16 : 8;
	      part = stringSlice(part, radix == 8 ? 1 : 2);
	    }
	    if (part === '') {
	      number = 0;
	    } else {
	      if (!exec(radix == 10 ? DEC : radix == 8 ? OCT : HEX, part)) return input;
	      number = parseInt$1(part, radix);
	    }
	    push(numbers, number);
	  }
	  for (index = 0; index < partsLength; index++) {
	    number = numbers[index];
	    if (index == partsLength - 1) {
	      if (number >= pow(256, 5 - partsLength)) return null;
	    } else if (number > 255) return null;
	  }
	  ipv4 = pop(numbers);
	  for (index = 0; index < numbers.length; index++) {
	    ipv4 += numbers[index] * pow(256, 3 - index);
	  }
	  return ipv4;
	};

	// https://url.spec.whatwg.org/#concept-ipv6-parser
	// eslint-disable-next-line max-statements -- TODO
	var parseIPv6 = function (input) {
	  var address = [0, 0, 0, 0, 0, 0, 0, 0];
	  var pieceIndex = 0;
	  var compress = null;
	  var pointer = 0;
	  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

	  var chr = function () {
	    return charAt(input, pointer);
	  };

	  if (chr() == ':') {
	    if (charAt(input, 1) != ':') return;
	    pointer += 2;
	    pieceIndex++;
	    compress = pieceIndex;
	  }
	  while (chr()) {
	    if (pieceIndex == 8) return;
	    if (chr() == ':') {
	      if (compress !== null) return;
	      pointer++;
	      pieceIndex++;
	      compress = pieceIndex;
	      continue;
	    }
	    value = length = 0;
	    while (length < 4 && exec(HEX, chr())) {
	      value = value * 16 + parseInt$1(chr(), 16);
	      pointer++;
	      length++;
	    }
	    if (chr() == '.') {
	      if (length == 0) return;
	      pointer -= length;
	      if (pieceIndex > 6) return;
	      numbersSeen = 0;
	      while (chr()) {
	        ipv4Piece = null;
	        if (numbersSeen > 0) {
	          if (chr() == '.' && numbersSeen < 4) pointer++;
	          else return;
	        }
	        if (!exec(DIGIT, chr())) return;
	        while (exec(DIGIT, chr())) {
	          number = parseInt$1(chr(), 10);
	          if (ipv4Piece === null) ipv4Piece = number;
	          else if (ipv4Piece == 0) return;
	          else ipv4Piece = ipv4Piece * 10 + number;
	          if (ipv4Piece > 255) return;
	          pointer++;
	        }
	        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
	        numbersSeen++;
	        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
	      }
	      if (numbersSeen != 4) return;
	      break;
	    } else if (chr() == ':') {
	      pointer++;
	      if (!chr()) return;
	    } else if (chr()) return;
	    address[pieceIndex++] = value;
	  }
	  if (compress !== null) {
	    swaps = pieceIndex - compress;
	    pieceIndex = 7;
	    while (pieceIndex != 0 && swaps > 0) {
	      swap = address[pieceIndex];
	      address[pieceIndex--] = address[compress + swaps - 1];
	      address[compress + --swaps] = swap;
	    }
	  } else if (pieceIndex != 8) return;
	  return address;
	};

	var findLongestZeroSequence = function (ipv6) {
	  var maxIndex = null;
	  var maxLength = 1;
	  var currStart = null;
	  var currLength = 0;
	  var index = 0;
	  for (; index < 8; index++) {
	    if (ipv6[index] !== 0) {
	      if (currLength > maxLength) {
	        maxIndex = currStart;
	        maxLength = currLength;
	      }
	      currStart = null;
	      currLength = 0;
	    } else {
	      if (currStart === null) currStart = index;
	      ++currLength;
	    }
	  }
	  if (currLength > maxLength) {
	    maxIndex = currStart;
	    maxLength = currLength;
	  }
	  return maxIndex;
	};

	// https://url.spec.whatwg.org/#host-serializing
	var serializeHost = function (host) {
	  var result, index, compress, ignore0;
	  // ipv4
	  if (typeof host == 'number') {
	    result = [];
	    for (index = 0; index < 4; index++) {
	      unshift(result, host % 256);
	      host = floor(host / 256);
	    } return join(result, '.');
	  // ipv6
	  } else if (typeof host == 'object') {
	    result = '';
	    compress = findLongestZeroSequence(host);
	    for (index = 0; index < 8; index++) {
	      if (ignore0 && host[index] === 0) continue;
	      if (ignore0) ignore0 = false;
	      if (compress === index) {
	        result += index ? ':' : '::';
	        ignore0 = true;
	      } else {
	        result += numberToString(host[index], 16);
	        if (index < 7) result += ':';
	      }
	    }
	    return '[' + result + ']';
	  } return host;
	};

	var C0ControlPercentEncodeSet = {};
	var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
	  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
	});
	var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
	  '#': 1, '?': 1, '{': 1, '}': 1
	});
	var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
	  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
	});

	var percentEncode = function (chr, set) {
	  var code = codeAt(chr, 0);
	  return code > 0x20 && code < 0x7F && !hasOwn(set, chr) ? chr : encodeURIComponent(chr);
	};

	// https://url.spec.whatwg.org/#special-scheme
	var specialSchemes = {
	  ftp: 21,
	  file: null,
	  http: 80,
	  https: 443,
	  ws: 80,
	  wss: 443
	};

	// https://url.spec.whatwg.org/#windows-drive-letter
	var isWindowsDriveLetter = function (string, normalized) {
	  var second;
	  return string.length == 2 && exec(ALPHA, charAt(string, 0))
	    && ((second = charAt(string, 1)) == ':' || (!normalized && second == '|'));
	};

	// https://url.spec.whatwg.org/#start-with-a-windows-drive-letter
	var startsWithWindowsDriveLetter = function (string) {
	  var third;
	  return string.length > 1 && isWindowsDriveLetter(stringSlice(string, 0, 2)) && (
	    string.length == 2 ||
	    ((third = charAt(string, 2)) === '/' || third === '\\' || third === '?' || third === '#')
	  );
	};

	// https://url.spec.whatwg.org/#single-dot-path-segment
	var isSingleDot = function (segment) {
	  return segment === '.' || toLowerCase(segment) === '%2e';
	};

	// https://url.spec.whatwg.org/#double-dot-path-segment
	var isDoubleDot = function (segment) {
	  segment = toLowerCase(segment);
	  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
	};

	// States:
	var SCHEME_START = {};
	var SCHEME = {};
	var NO_SCHEME = {};
	var SPECIAL_RELATIVE_OR_AUTHORITY = {};
	var PATH_OR_AUTHORITY = {};
	var RELATIVE = {};
	var RELATIVE_SLASH = {};
	var SPECIAL_AUTHORITY_SLASHES = {};
	var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
	var AUTHORITY = {};
	var HOST = {};
	var HOSTNAME = {};
	var PORT = {};
	var FILE = {};
	var FILE_SLASH = {};
	var FILE_HOST = {};
	var PATH_START = {};
	var PATH = {};
	var CANNOT_BE_A_BASE_URL_PATH = {};
	var QUERY = {};
	var FRAGMENT = {};

	var URLState = function (url, isBase, base) {
	  var urlString = $toString(url);
	  var baseState, failure, searchParams;
	  if (isBase) {
	    failure = this.parse(urlString);
	    if (failure) throw TypeError$1(failure);
	    this.searchParams = null;
	  } else {
	    if (base !== undefined) baseState = new URLState(base, true);
	    failure = this.parse(urlString, null, baseState);
	    if (failure) throw TypeError$1(failure);
	    searchParams = getInternalSearchParamsState(new URLSearchParams$1());
	    searchParams.bindURL(this);
	    this.searchParams = searchParams;
	  }
	};

	URLState.prototype = {
	  type: 'URL',
	  // https://url.spec.whatwg.org/#url-parsing
	  // eslint-disable-next-line max-statements -- TODO
	  parse: function (input, stateOverride, base) {
	    var url = this;
	    var state = stateOverride || SCHEME_START;
	    var pointer = 0;
	    var buffer = '';
	    var seenAt = false;
	    var seenBracket = false;
	    var seenPasswordToken = false;
	    var codePoints, chr, bufferCodePoints, failure;

	    input = $toString(input);

	    if (!stateOverride) {
	      url.scheme = '';
	      url.username = '';
	      url.password = '';
	      url.host = null;
	      url.port = null;
	      url.path = [];
	      url.query = null;
	      url.fragment = null;
	      url.cannotBeABaseURL = false;
	      input = replace(input, LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
	    }

	    input = replace(input, TAB_AND_NEW_LINE, '');

	    codePoints = arrayFrom(input);

	    while (pointer <= codePoints.length) {
	      chr = codePoints[pointer];
	      switch (state) {
	        case SCHEME_START:
	          if (chr && exec(ALPHA, chr)) {
	            buffer += toLowerCase(chr);
	            state = SCHEME;
	          } else if (!stateOverride) {
	            state = NO_SCHEME;
	            continue;
	          } else return INVALID_SCHEME;
	          break;

	        case SCHEME:
	          if (chr && (exec(ALPHANUMERIC, chr) || chr == '+' || chr == '-' || chr == '.')) {
	            buffer += toLowerCase(chr);
	          } else if (chr == ':') {
	            if (stateOverride && (
	              (url.isSpecial() != hasOwn(specialSchemes, buffer)) ||
	              (buffer == 'file' && (url.includesCredentials() || url.port !== null)) ||
	              (url.scheme == 'file' && !url.host)
	            )) return;
	            url.scheme = buffer;
	            if (stateOverride) {
	              if (url.isSpecial() && specialSchemes[url.scheme] == url.port) url.port = null;
	              return;
	            }
	            buffer = '';
	            if (url.scheme == 'file') {
	              state = FILE;
	            } else if (url.isSpecial() && base && base.scheme == url.scheme) {
	              state = SPECIAL_RELATIVE_OR_AUTHORITY;
	            } else if (url.isSpecial()) {
	              state = SPECIAL_AUTHORITY_SLASHES;
	            } else if (codePoints[pointer + 1] == '/') {
	              state = PATH_OR_AUTHORITY;
	              pointer++;
	            } else {
	              url.cannotBeABaseURL = true;
	              push(url.path, '');
	              state = CANNOT_BE_A_BASE_URL_PATH;
	            }
	          } else if (!stateOverride) {
	            buffer = '';
	            state = NO_SCHEME;
	            pointer = 0;
	            continue;
	          } else return INVALID_SCHEME;
	          break;

	        case NO_SCHEME:
	          if (!base || (base.cannotBeABaseURL && chr != '#')) return INVALID_SCHEME;
	          if (base.cannotBeABaseURL && chr == '#') {
	            url.scheme = base.scheme;
	            url.path = arraySlice(base.path);
	            url.query = base.query;
	            url.fragment = '';
	            url.cannotBeABaseURL = true;
	            state = FRAGMENT;
	            break;
	          }
	          state = base.scheme == 'file' ? FILE : RELATIVE;
	          continue;

	        case SPECIAL_RELATIVE_OR_AUTHORITY:
	          if (chr == '/' && codePoints[pointer + 1] == '/') {
	            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	            pointer++;
	          } else {
	            state = RELATIVE;
	            continue;
	          } break;

	        case PATH_OR_AUTHORITY:
	          if (chr == '/') {
	            state = AUTHORITY;
	            break;
	          } else {
	            state = PATH;
	            continue;
	          }

	        case RELATIVE:
	          url.scheme = base.scheme;
	          if (chr == EOF) {
	            url.username = base.username;
	            url.password = base.password;
	            url.host = base.host;
	            url.port = base.port;
	            url.path = arraySlice(base.path);
	            url.query = base.query;
	          } else if (chr == '/' || (chr == '\\' && url.isSpecial())) {
	            state = RELATIVE_SLASH;
	          } else if (chr == '?') {
	            url.username = base.username;
	            url.password = base.password;
	            url.host = base.host;
	            url.port = base.port;
	            url.path = arraySlice(base.path);
	            url.query = '';
	            state = QUERY;
	          } else if (chr == '#') {
	            url.username = base.username;
	            url.password = base.password;
	            url.host = base.host;
	            url.port = base.port;
	            url.path = arraySlice(base.path);
	            url.query = base.query;
	            url.fragment = '';
	            state = FRAGMENT;
	          } else {
	            url.username = base.username;
	            url.password = base.password;
	            url.host = base.host;
	            url.port = base.port;
	            url.path = arraySlice(base.path);
	            url.path.length--;
	            state = PATH;
	            continue;
	          } break;

	        case RELATIVE_SLASH:
	          if (url.isSpecial() && (chr == '/' || chr == '\\')) {
	            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	          } else if (chr == '/') {
	            state = AUTHORITY;
	          } else {
	            url.username = base.username;
	            url.password = base.password;
	            url.host = base.host;
	            url.port = base.port;
	            state = PATH;
	            continue;
	          } break;

	        case SPECIAL_AUTHORITY_SLASHES:
	          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	          if (chr != '/' || charAt(buffer, pointer + 1) != '/') continue;
	          pointer++;
	          break;

	        case SPECIAL_AUTHORITY_IGNORE_SLASHES:
	          if (chr != '/' && chr != '\\') {
	            state = AUTHORITY;
	            continue;
	          } break;

	        case AUTHORITY:
	          if (chr == '@') {
	            if (seenAt) buffer = '%40' + buffer;
	            seenAt = true;
	            bufferCodePoints = arrayFrom(buffer);
	            for (var i = 0; i < bufferCodePoints.length; i++) {
	              var codePoint = bufferCodePoints[i];
	              if (codePoint == ':' && !seenPasswordToken) {
	                seenPasswordToken = true;
	                continue;
	              }
	              var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
	              if (seenPasswordToken) url.password += encodedCodePoints;
	              else url.username += encodedCodePoints;
	            }
	            buffer = '';
	          } else if (
	            chr == EOF || chr == '/' || chr == '?' || chr == '#' ||
	            (chr == '\\' && url.isSpecial())
	          ) {
	            if (seenAt && buffer == '') return INVALID_AUTHORITY;
	            pointer -= arrayFrom(buffer).length + 1;
	            buffer = '';
	            state = HOST;
	          } else buffer += chr;
	          break;

	        case HOST:
	        case HOSTNAME:
	          if (stateOverride && url.scheme == 'file') {
	            state = FILE_HOST;
	            continue;
	          } else if (chr == ':' && !seenBracket) {
	            if (buffer == '') return INVALID_HOST;
	            failure = url.parseHost(buffer);
	            if (failure) return failure;
	            buffer = '';
	            state = PORT;
	            if (stateOverride == HOSTNAME) return;
	          } else if (
	            chr == EOF || chr == '/' || chr == '?' || chr == '#' ||
	            (chr == '\\' && url.isSpecial())
	          ) {
	            if (url.isSpecial() && buffer == '') return INVALID_HOST;
	            if (stateOverride && buffer == '' && (url.includesCredentials() || url.port !== null)) return;
	            failure = url.parseHost(buffer);
	            if (failure) return failure;
	            buffer = '';
	            state = PATH_START;
	            if (stateOverride) return;
	            continue;
	          } else {
	            if (chr == '[') seenBracket = true;
	            else if (chr == ']') seenBracket = false;
	            buffer += chr;
	          } break;

	        case PORT:
	          if (exec(DIGIT, chr)) {
	            buffer += chr;
	          } else if (
	            chr == EOF || chr == '/' || chr == '?' || chr == '#' ||
	            (chr == '\\' && url.isSpecial()) ||
	            stateOverride
	          ) {
	            if (buffer != '') {
	              var port = parseInt$1(buffer, 10);
	              if (port > 0xFFFF) return INVALID_PORT;
	              url.port = (url.isSpecial() && port === specialSchemes[url.scheme]) ? null : port;
	              buffer = '';
	            }
	            if (stateOverride) return;
	            state = PATH_START;
	            continue;
	          } else return INVALID_PORT;
	          break;

	        case FILE:
	          url.scheme = 'file';
	          if (chr == '/' || chr == '\\') state = FILE_SLASH;
	          else if (base && base.scheme == 'file') {
	            if (chr == EOF) {
	              url.host = base.host;
	              url.path = arraySlice(base.path);
	              url.query = base.query;
	            } else if (chr == '?') {
	              url.host = base.host;
	              url.path = arraySlice(base.path);
	              url.query = '';
	              state = QUERY;
	            } else if (chr == '#') {
	              url.host = base.host;
	              url.path = arraySlice(base.path);
	              url.query = base.query;
	              url.fragment = '';
	              state = FRAGMENT;
	            } else {
	              if (!startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ''))) {
	                url.host = base.host;
	                url.path = arraySlice(base.path);
	                url.shortenPath();
	              }
	              state = PATH;
	              continue;
	            }
	          } else {
	            state = PATH;
	            continue;
	          } break;

	        case FILE_SLASH:
	          if (chr == '/' || chr == '\\') {
	            state = FILE_HOST;
	            break;
	          }
	          if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ''))) {
	            if (isWindowsDriveLetter(base.path[0], true)) push(url.path, base.path[0]);
	            else url.host = base.host;
	          }
	          state = PATH;
	          continue;

	        case FILE_HOST:
	          if (chr == EOF || chr == '/' || chr == '\\' || chr == '?' || chr == '#') {
	            if (!stateOverride && isWindowsDriveLetter(buffer)) {
	              state = PATH;
	            } else if (buffer == '') {
	              url.host = '';
	              if (stateOverride) return;
	              state = PATH_START;
	            } else {
	              failure = url.parseHost(buffer);
	              if (failure) return failure;
	              if (url.host == 'localhost') url.host = '';
	              if (stateOverride) return;
	              buffer = '';
	              state = PATH_START;
	            } continue;
	          } else buffer += chr;
	          break;

	        case PATH_START:
	          if (url.isSpecial()) {
	            state = PATH;
	            if (chr != '/' && chr != '\\') continue;
	          } else if (!stateOverride && chr == '?') {
	            url.query = '';
	            state = QUERY;
	          } else if (!stateOverride && chr == '#') {
	            url.fragment = '';
	            state = FRAGMENT;
	          } else if (chr != EOF) {
	            state = PATH;
	            if (chr != '/') continue;
	          } break;

	        case PATH:
	          if (
	            chr == EOF || chr == '/' ||
	            (chr == '\\' && url.isSpecial()) ||
	            (!stateOverride && (chr == '?' || chr == '#'))
	          ) {
	            if (isDoubleDot(buffer)) {
	              url.shortenPath();
	              if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
	                push(url.path, '');
	              }
	            } else if (isSingleDot(buffer)) {
	              if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
	                push(url.path, '');
	              }
	            } else {
	              if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
	                if (url.host) url.host = '';
	                buffer = charAt(buffer, 0) + ':'; // normalize windows drive letter
	              }
	              push(url.path, buffer);
	            }
	            buffer = '';
	            if (url.scheme == 'file' && (chr == EOF || chr == '?' || chr == '#')) {
	              while (url.path.length > 1 && url.path[0] === '') {
	                shift(url.path);
	              }
	            }
	            if (chr == '?') {
	              url.query = '';
	              state = QUERY;
	            } else if (chr == '#') {
	              url.fragment = '';
	              state = FRAGMENT;
	            }
	          } else {
	            buffer += percentEncode(chr, pathPercentEncodeSet);
	          } break;

	        case CANNOT_BE_A_BASE_URL_PATH:
	          if (chr == '?') {
	            url.query = '';
	            state = QUERY;
	          } else if (chr == '#') {
	            url.fragment = '';
	            state = FRAGMENT;
	          } else if (chr != EOF) {
	            url.path[0] += percentEncode(chr, C0ControlPercentEncodeSet);
	          } break;

	        case QUERY:
	          if (!stateOverride && chr == '#') {
	            url.fragment = '';
	            state = FRAGMENT;
	          } else if (chr != EOF) {
	            if (chr == "'" && url.isSpecial()) url.query += '%27';
	            else if (chr == '#') url.query += '%23';
	            else url.query += percentEncode(chr, C0ControlPercentEncodeSet);
	          } break;

	        case FRAGMENT:
	          if (chr != EOF) url.fragment += percentEncode(chr, fragmentPercentEncodeSet);
	          break;
	      }

	      pointer++;
	    }
	  },
	  // https://url.spec.whatwg.org/#host-parsing
	  parseHost: function (input) {
	    var result, codePoints, index;
	    if (charAt(input, 0) == '[') {
	      if (charAt(input, input.length - 1) != ']') return INVALID_HOST;
	      result = parseIPv6(stringSlice(input, 1, -1));
	      if (!result) return INVALID_HOST;
	      this.host = result;
	    // opaque host
	    } else if (!this.isSpecial()) {
	      if (exec(FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT, input)) return INVALID_HOST;
	      result = '';
	      codePoints = arrayFrom(input);
	      for (index = 0; index < codePoints.length; index++) {
	        result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
	      }
	      this.host = result;
	    } else {
	      input = toASCII(input);
	      if (exec(FORBIDDEN_HOST_CODE_POINT, input)) return INVALID_HOST;
	      result = parseIPv4(input);
	      if (result === null) return INVALID_HOST;
	      this.host = result;
	    }
	  },
	  // https://url.spec.whatwg.org/#cannot-have-a-username-password-port
	  cannotHaveUsernamePasswordPort: function () {
	    return !this.host || this.cannotBeABaseURL || this.scheme == 'file';
	  },
	  // https://url.spec.whatwg.org/#include-credentials
	  includesCredentials: function () {
	    return this.username != '' || this.password != '';
	  },
	  // https://url.spec.whatwg.org/#is-special
	  isSpecial: function () {
	    return hasOwn(specialSchemes, this.scheme);
	  },
	  // https://url.spec.whatwg.org/#shorten-a-urls-path
	  shortenPath: function () {
	    var path = this.path;
	    var pathSize = path.length;
	    if (pathSize && (this.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
	      path.length--;
	    }
	  },
	  // https://url.spec.whatwg.org/#concept-url-serializer
	  serialize: function () {
	    var url = this;
	    var scheme = url.scheme;
	    var username = url.username;
	    var password = url.password;
	    var host = url.host;
	    var port = url.port;
	    var path = url.path;
	    var query = url.query;
	    var fragment = url.fragment;
	    var output = scheme + ':';
	    if (host !== null) {
	      output += '//';
	      if (url.includesCredentials()) {
	        output += username + (password ? ':' + password : '') + '@';
	      }
	      output += serializeHost(host);
	      if (port !== null) output += ':' + port;
	    } else if (scheme == 'file') output += '//';
	    output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
	    if (query !== null) output += '?' + query;
	    if (fragment !== null) output += '#' + fragment;
	    return output;
	  },
	  // https://url.spec.whatwg.org/#dom-url-href
	  setHref: function (href) {
	    var failure = this.parse(href);
	    if (failure) throw TypeError$1(failure);
	    this.searchParams.update();
	  },
	  // https://url.spec.whatwg.org/#dom-url-origin
	  getOrigin: function () {
	    var scheme = this.scheme;
	    var port = this.port;
	    if (scheme == 'blob') try {
	      return new URLConstructor(scheme.path[0]).origin;
	    } catch (error) {
	      return 'null';
	    }
	    if (scheme == 'file' || !this.isSpecial()) return 'null';
	    return scheme + '://' + serializeHost(this.host) + (port !== null ? ':' + port : '');
	  },
	  // https://url.spec.whatwg.org/#dom-url-protocol
	  getProtocol: function () {
	    return this.scheme + ':';
	  },
	  setProtocol: function (protocol) {
	    this.parse($toString(protocol) + ':', SCHEME_START);
	  },
	  // https://url.spec.whatwg.org/#dom-url-username
	  getUsername: function () {
	    return this.username;
	  },
	  setUsername: function (username) {
	    var codePoints = arrayFrom($toString(username));
	    if (this.cannotHaveUsernamePasswordPort()) return;
	    this.username = '';
	    for (var i = 0; i < codePoints.length; i++) {
	      this.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	    }
	  },
	  // https://url.spec.whatwg.org/#dom-url-password
	  getPassword: function () {
	    return this.password;
	  },
	  setPassword: function (password) {
	    var codePoints = arrayFrom($toString(password));
	    if (this.cannotHaveUsernamePasswordPort()) return;
	    this.password = '';
	    for (var i = 0; i < codePoints.length; i++) {
	      this.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	    }
	  },
	  // https://url.spec.whatwg.org/#dom-url-host
	  getHost: function () {
	    var host = this.host;
	    var port = this.port;
	    return host === null ? ''
	      : port === null ? serializeHost(host)
	      : serializeHost(host) + ':' + port;
	  },
	  setHost: function (host) {
	    if (this.cannotBeABaseURL) return;
	    this.parse(host, HOST);
	  },
	  // https://url.spec.whatwg.org/#dom-url-hostname
	  getHostname: function () {
	    var host = this.host;
	    return host === null ? '' : serializeHost(host);
	  },
	  setHostname: function (hostname) {
	    if (this.cannotBeABaseURL) return;
	    this.parse(hostname, HOSTNAME);
	  },
	  // https://url.spec.whatwg.org/#dom-url-port
	  getPort: function () {
	    var port = this.port;
	    return port === null ? '' : $toString(port);
	  },
	  setPort: function (port) {
	    if (this.cannotHaveUsernamePasswordPort()) return;
	    port = $toString(port);
	    if (port == '') this.port = null;
	    else this.parse(port, PORT);
	  },
	  // https://url.spec.whatwg.org/#dom-url-pathname
	  getPathname: function () {
	    var path = this.path;
	    return this.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
	  },
	  setPathname: function (pathname) {
	    if (this.cannotBeABaseURL) return;
	    this.path = [];
	    this.parse(pathname, PATH_START);
	  },
	  // https://url.spec.whatwg.org/#dom-url-search
	  getSearch: function () {
	    var query = this.query;
	    return query ? '?' + query : '';
	  },
	  setSearch: function (search) {
	    search = $toString(search);
	    if (search == '') {
	      this.query = null;
	    } else {
	      if ('?' == charAt(search, 0)) search = stringSlice(search, 1);
	      this.query = '';
	      this.parse(search, QUERY);
	    }
	    this.searchParams.update();
	  },
	  // https://url.spec.whatwg.org/#dom-url-searchparams
	  getSearchParams: function () {
	    return this.searchParams.facade;
	  },
	  // https://url.spec.whatwg.org/#dom-url-hash
	  getHash: function () {
	    var fragment = this.fragment;
	    return fragment ? '#' + fragment : '';
	  },
	  setHash: function (hash) {
	    hash = $toString(hash);
	    if (hash == '') {
	      this.fragment = null;
	      return;
	    }
	    if ('#' == charAt(hash, 0)) hash = stringSlice(hash, 1);
	    this.fragment = '';
	    this.parse(hash, FRAGMENT);
	  },
	  update: function () {
	    this.query = this.searchParams.serialize() || null;
	  }
	};

	// `URL` constructor
	// https://url.spec.whatwg.org/#url-class
	var URLConstructor = function URL(url /* , base */) {
	  var that = anInstance(this, URLPrototype);
	  var base = validateArgumentsLength(arguments.length, 1) > 1 ? arguments[1] : undefined;
	  var state = setInternalState(that, new URLState(url, false, base));
	  if (!DESCRIPTORS) {
	    that.href = state.serialize();
	    that.origin = state.getOrigin();
	    that.protocol = state.getProtocol();
	    that.username = state.getUsername();
	    that.password = state.getPassword();
	    that.host = state.getHost();
	    that.hostname = state.getHostname();
	    that.port = state.getPort();
	    that.pathname = state.getPathname();
	    that.search = state.getSearch();
	    that.searchParams = state.getSearchParams();
	    that.hash = state.getHash();
	  }
	};

	var URLPrototype = URLConstructor.prototype;

	var accessorDescriptor = function (getter, setter) {
	  return {
	    get: function () {
	      return getInternalURLState(this)[getter]();
	    },
	    set: setter && function (value) {
	      return getInternalURLState(this)[setter](value);
	    },
	    configurable: true,
	    enumerable: true
	  };
	};

	if (DESCRIPTORS) {
	  defineProperties(URLPrototype, {
	    // `URL.prototype.href` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-href
	    href: accessorDescriptor('serialize', 'setHref'),
	    // `URL.prototype.origin` getter
	    // https://url.spec.whatwg.org/#dom-url-origin
	    origin: accessorDescriptor('getOrigin'),
	    // `URL.prototype.protocol` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-protocol
	    protocol: accessorDescriptor('getProtocol', 'setProtocol'),
	    // `URL.prototype.username` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-username
	    username: accessorDescriptor('getUsername', 'setUsername'),
	    // `URL.prototype.password` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-password
	    password: accessorDescriptor('getPassword', 'setPassword'),
	    // `URL.prototype.host` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-host
	    host: accessorDescriptor('getHost', 'setHost'),
	    // `URL.prototype.hostname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hostname
	    hostname: accessorDescriptor('getHostname', 'setHostname'),
	    // `URL.prototype.port` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-port
	    port: accessorDescriptor('getPort', 'setPort'),
	    // `URL.prototype.pathname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-pathname
	    pathname: accessorDescriptor('getPathname', 'setPathname'),
	    // `URL.prototype.search` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-search
	    search: accessorDescriptor('getSearch', 'setSearch'),
	    // `URL.prototype.searchParams` getter
	    // https://url.spec.whatwg.org/#dom-url-searchparams
	    searchParams: accessorDescriptor('getSearchParams'),
	    // `URL.prototype.hash` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hash
	    hash: accessorDescriptor('getHash', 'setHash')
	  });
	}

	// `URL.prototype.toJSON` method
	// https://url.spec.whatwg.org/#dom-url-tojson
	redefine(URLPrototype, 'toJSON', function toJSON() {
	  return getInternalURLState(this).serialize();
	}, { enumerable: true });

	// `URL.prototype.toString` method
	// https://url.spec.whatwg.org/#URL-stringification-behavior
	redefine(URLPrototype, 'toString', function toString() {
	  return getInternalURLState(this).serialize();
	}, { enumerable: true });

	if (NativeURL) {
	  var nativeCreateObjectURL = NativeURL.createObjectURL;
	  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
	  // `URL.createObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
	  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', bind(nativeCreateObjectURL, NativeURL));
	  // `URL.revokeObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
	  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', bind(nativeRevokeObjectURL, NativeURL));
	}

	setToStringTag(URLConstructor, 'URL');

	$$1({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
	  URL: URLConstructor
	});

	var $ = _export;
	var call = functionCall;

	// `URL.prototype.toJSON` method
	// https://url.spec.whatwg.org/#dom-url-tojson
	$({ target: 'URL', proto: true, enumerable: true }, {
	  toJSON: function toJSON() {
	    return call(URL.prototype.toString, this);
	  }
	});

	var runtime = {exports: {}};

	(function (module) {
	  var runtime = function (exports) {

	    var Op = Object.prototype;
	    var hasOwn = Op.hasOwnProperty;
	    var defineProperty = Object.defineProperty || function (obj, key, desc) {
	      obj[key] = desc.value;
	    };
	    var undefined$1;
	    var $Symbol = typeof Symbol === "function" ? Symbol : {};
	    var iteratorSymbol = $Symbol.iterator || "@@iterator";
	    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	    function define(obj, key, value) {
	      Object.defineProperty(obj, key, {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	      return obj[key];
	    }
	    try {
	      define({}, "");
	    } catch (err) {
	      define = function define(obj, key, value) {
	        return obj[key] = value;
	      };
	    }
	    function wrap(innerFn, outerFn, self, tryLocsList) {
	      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	      var generator = Object.create(protoGenerator.prototype);
	      var context = new Context(tryLocsList || []);
	      defineProperty(generator, "_invoke", {
	        value: makeInvokeMethod(innerFn, self, context)
	      });
	      return generator;
	    }
	    exports.wrap = wrap;
	    function tryCatch(fn, obj, arg) {
	      try {
	        return {
	          type: "normal",
	          arg: fn.call(obj, arg)
	        };
	      } catch (err) {
	        return {
	          type: "throw",
	          arg: err
	        };
	      }
	    }
	    var GenStateSuspendedStart = "suspendedStart";
	    var GenStateSuspendedYield = "suspendedYield";
	    var GenStateExecuting = "executing";
	    var GenStateCompleted = "completed";
	    var ContinueSentinel = {};
	    function Generator() {}
	    function GeneratorFunction() {}
	    function GeneratorFunctionPrototype() {}
	    var IteratorPrototype = {};
	    define(IteratorPrototype, iteratorSymbol, function () {
	      return this;
	    });
	    var getProto = Object.getPrototypeOf;
	    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	      IteratorPrototype = NativeIteratorPrototype;
	    }
	    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
	    GeneratorFunction.prototype = GeneratorFunctionPrototype;
	    defineProperty(Gp, "constructor", {
	      value: GeneratorFunctionPrototype,
	      configurable: true
	    });
	    defineProperty(GeneratorFunctionPrototype, "constructor", {
	      value: GeneratorFunction,
	      configurable: true
	    });
	    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
	    function defineIteratorMethods(prototype) {
	      ["next", "throw", "return"].forEach(function (method) {
	        define(prototype, method, function (arg) {
	          return this._invoke(method, arg);
	        });
	      });
	    }
	    exports.isGeneratorFunction = function (genFun) {
	      var ctor = typeof genFun === "function" && genFun.constructor;
	      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
	    };
	    exports.mark = function (genFun) {
	      if (Object.setPrototypeOf) {
	        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	      } else {
	        genFun.__proto__ = GeneratorFunctionPrototype;
	        define(genFun, toStringTagSymbol, "GeneratorFunction");
	      }
	      genFun.prototype = Object.create(Gp);
	      return genFun;
	    };
	    exports.awrap = function (arg) {
	      return {
	        __await: arg
	      };
	    };
	    function AsyncIterator(generator, PromiseImpl) {
	      function invoke(method, arg, resolve, reject) {
	        var record = tryCatch(generator[method], generator, arg);
	        if (record.type === "throw") {
	          reject(record.arg);
	        } else {
	          var result = record.arg;
	          var value = result.value;
	          if (value && _typeof$1(value) === "object" && hasOwn.call(value, "__await")) {
	            return PromiseImpl.resolve(value.__await).then(function (value) {
	              invoke("next", value, resolve, reject);
	            }, function (err) {
	              invoke("throw", err, resolve, reject);
	            });
	          }
	          return PromiseImpl.resolve(value).then(function (unwrapped) {
	            result.value = unwrapped;
	            resolve(result);
	          }, function (error) {
	            return invoke("throw", error, resolve, reject);
	          });
	        }
	      }
	      var previousPromise;
	      function enqueue(method, arg) {
	        function callInvokeWithMethodAndArg() {
	          return new PromiseImpl(function (resolve, reject) {
	            invoke(method, arg, resolve, reject);
	          });
	        }
	        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      }
	      defineProperty(this, "_invoke", {
	        value: enqueue
	      });
	    }
	    defineIteratorMethods(AsyncIterator.prototype);
	    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
	      return this;
	    });
	    exports.AsyncIterator = AsyncIterator;
	    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	      if (PromiseImpl === void 0) PromiseImpl = Promise;
	      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
	      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
	        return result.done ? result.value : iter.next();
	      });
	    };
	    function makeInvokeMethod(innerFn, self, context) {
	      var state = GenStateSuspendedStart;
	      return function invoke(method, arg) {
	        if (state === GenStateExecuting) {
	          throw new Error("Generator is already running");
	        }
	        if (state === GenStateCompleted) {
	          if (method === "throw") {
	            throw arg;
	          }
	          return doneResult();
	        }
	        context.method = method;
	        context.arg = arg;
	        while (true) {
	          var delegate = context.delegate;
	          if (delegate) {
	            var delegateResult = maybeInvokeDelegate(delegate, context);
	            if (delegateResult) {
	              if (delegateResult === ContinueSentinel) continue;
	              return delegateResult;
	            }
	          }
	          if (context.method === "next") {
	            context.sent = context._sent = context.arg;
	          } else if (context.method === "throw") {
	            if (state === GenStateSuspendedStart) {
	              state = GenStateCompleted;
	              throw context.arg;
	            }
	            context.dispatchException(context.arg);
	          } else if (context.method === "return") {
	            context.abrupt("return", context.arg);
	          }
	          state = GenStateExecuting;
	          var record = tryCatch(innerFn, self, context);
	          if (record.type === "normal") {
	            state = context.done ? GenStateCompleted : GenStateSuspendedYield;
	            if (record.arg === ContinueSentinel) {
	              continue;
	            }
	            return {
	              value: record.arg,
	              done: context.done
	            };
	          } else if (record.type === "throw") {
	            state = GenStateCompleted;
	            context.method = "throw";
	            context.arg = record.arg;
	          }
	        }
	      };
	    }
	    function maybeInvokeDelegate(delegate, context) {
	      var methodName = context.method;
	      var method = delegate.iterator[methodName];
	      if (method === undefined$1) {
	        context.delegate = null;
	        if (methodName === "throw" && delegate.iterator["return"]) {
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);
	          if (context.method === "throw") {
	            return ContinueSentinel;
	          }
	        }
	        if (methodName !== "return") {
	          context.method = "throw";
	          context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method");
	        }
	        return ContinueSentinel;
	      }
	      var record = tryCatch(method, delegate.iterator, context.arg);
	      if (record.type === "throw") {
	        context.method = "throw";
	        context.arg = record.arg;
	        context.delegate = null;
	        return ContinueSentinel;
	      }
	      var info = record.arg;
	      if (!info) {
	        context.method = "throw";
	        context.arg = new TypeError("iterator result is not an object");
	        context.delegate = null;
	        return ContinueSentinel;
	      }
	      if (info.done) {
	        context[delegate.resultName] = info.value;
	        context.next = delegate.nextLoc;
	        if (context.method !== "return") {
	          context.method = "next";
	          context.arg = undefined$1;
	        }
	      } else {
	        return info;
	      }
	      context.delegate = null;
	      return ContinueSentinel;
	    }
	    defineIteratorMethods(Gp);
	    define(Gp, toStringTagSymbol, "Generator");
	    define(Gp, iteratorSymbol, function () {
	      return this;
	    });
	    define(Gp, "toString", function () {
	      return "[object Generator]";
	    });
	    function pushTryEntry(locs) {
	      var entry = {
	        tryLoc: locs[0]
	      };
	      if (1 in locs) {
	        entry.catchLoc = locs[1];
	      }
	      if (2 in locs) {
	        entry.finallyLoc = locs[2];
	        entry.afterLoc = locs[3];
	      }
	      this.tryEntries.push(entry);
	    }
	    function resetTryEntry(entry) {
	      var record = entry.completion || {};
	      record.type = "normal";
	      delete record.arg;
	      entry.completion = record;
	    }
	    function Context(tryLocsList) {
	      this.tryEntries = [{
	        tryLoc: "root"
	      }];
	      tryLocsList.forEach(pushTryEntry, this);
	      this.reset(true);
	    }
	    exports.keys = function (val) {
	      var object = Object(val);
	      var keys = [];
	      for (var key in object) {
	        keys.push(key);
	      }
	      keys.reverse();
	      return function next() {
	        while (keys.length) {
	          var key = keys.pop();
	          if (key in object) {
	            next.value = key;
	            next.done = false;
	            return next;
	          }
	        }
	        next.done = true;
	        return next;
	      };
	    };
	    function values(iterable) {
	      if (iterable) {
	        var iteratorMethod = iterable[iteratorSymbol];
	        if (iteratorMethod) {
	          return iteratorMethod.call(iterable);
	        }
	        if (typeof iterable.next === "function") {
	          return iterable;
	        }
	        if (!isNaN(iterable.length)) {
	          var i = -1,
	            next = function next() {
	              while (++i < iterable.length) {
	                if (hasOwn.call(iterable, i)) {
	                  next.value = iterable[i];
	                  next.done = false;
	                  return next;
	                }
	              }
	              next.value = undefined$1;
	              next.done = true;
	              return next;
	            };
	          return next.next = next;
	        }
	      }
	      return {
	        next: doneResult
	      };
	    }
	    exports.values = values;
	    function doneResult() {
	      return {
	        value: undefined$1,
	        done: true
	      };
	    }
	    Context.prototype = {
	      constructor: Context,
	      reset: function reset(skipTempReset) {
	        this.prev = 0;
	        this.next = 0;
	        this.sent = this._sent = undefined$1;
	        this.done = false;
	        this.delegate = null;
	        this.method = "next";
	        this.arg = undefined$1;
	        this.tryEntries.forEach(resetTryEntry);
	        if (!skipTempReset) {
	          for (var name in this) {
	            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
	              this[name] = undefined$1;
	            }
	          }
	        }
	      },
	      stop: function stop() {
	        this.done = true;
	        var rootEntry = this.tryEntries[0];
	        var rootRecord = rootEntry.completion;
	        if (rootRecord.type === "throw") {
	          throw rootRecord.arg;
	        }
	        return this.rval;
	      },
	      dispatchException: function dispatchException(exception) {
	        if (this.done) {
	          throw exception;
	        }
	        var context = this;
	        function handle(loc, caught) {
	          record.type = "throw";
	          record.arg = exception;
	          context.next = loc;
	          if (caught) {
	            context.method = "next";
	            context.arg = undefined$1;
	          }
	          return !!caught;
	        }
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          var record = entry.completion;
	          if (entry.tryLoc === "root") {
	            return handle("end");
	          }
	          if (entry.tryLoc <= this.prev) {
	            var hasCatch = hasOwn.call(entry, "catchLoc");
	            var hasFinally = hasOwn.call(entry, "finallyLoc");
	            if (hasCatch && hasFinally) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              } else if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else if (hasCatch) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              }
	            } else if (hasFinally) {
	              if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else {
	              throw new Error("try statement without catch or finally");
	            }
	          }
	        }
	      },
	      abrupt: function abrupt(type, arg) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	            var finallyEntry = entry;
	            break;
	          }
	        }
	        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
	          finallyEntry = null;
	        }
	        var record = finallyEntry ? finallyEntry.completion : {};
	        record.type = type;
	        record.arg = arg;
	        if (finallyEntry) {
	          this.method = "next";
	          this.next = finallyEntry.finallyLoc;
	          return ContinueSentinel;
	        }
	        return this.complete(record);
	      },
	      complete: function complete(record, afterLoc) {
	        if (record.type === "throw") {
	          throw record.arg;
	        }
	        if (record.type === "break" || record.type === "continue") {
	          this.next = record.arg;
	        } else if (record.type === "return") {
	          this.rval = this.arg = record.arg;
	          this.method = "return";
	          this.next = "end";
	        } else if (record.type === "normal" && afterLoc) {
	          this.next = afterLoc;
	        }
	        return ContinueSentinel;
	      },
	      finish: function finish(finallyLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          if (entry.finallyLoc === finallyLoc) {
	            this.complete(entry.completion, entry.afterLoc);
	            resetTryEntry(entry);
	            return ContinueSentinel;
	          }
	        }
	      },
	      "catch": function _catch(tryLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          if (entry.tryLoc === tryLoc) {
	            var record = entry.completion;
	            if (record.type === "throw") {
	              var thrown = record.arg;
	              resetTryEntry(entry);
	            }
	            return thrown;
	          }
	        }
	        throw new Error("illegal catch attempt");
	      },
	      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
	        this.delegate = {
	          iterator: values(iterable),
	          resultName: resultName,
	          nextLoc: nextLoc
	        };
	        if (this.method === "next") {
	          this.arg = undefined$1;
	        }
	        return ContinueSentinel;
	      }
	    };
	    return exports;
	  }(module.exports );
	  try {
	    regeneratorRuntime = runtime;
	  } catch (accidentalStrictMode) {
	    if ((typeof globalThis === "undefined" ? "undefined" : _typeof$1(globalThis)) === "object") {
	      globalThis.regeneratorRuntime = runtime;
	    } else {
	      Function("r", "regeneratorRuntime = r")(runtime);
	    }
	  }
	})(runtime);
	var runtimeExports = runtime.exports;
	getDefaultExportFromCjs(runtimeExports);

	var global$1 = global$1F;
	var uncurryThis = functionUncurryThis;

	var entryUnbind$1 = function (CONSTRUCTOR, METHOD) {
	  return uncurryThis(global$1[CONSTRUCTOR].prototype[METHOD]);
	};

	var entryUnbind = entryUnbind$1;

	entryUnbind('String', 'replaceAll');

	// spacing
	// base color
	var BLUE = '#0d61a0';
	/* gray
	 *
	 * as reference
	 * G10 - body background
	 * G20 - split line light
	 * G30 - split line dark
	 * G40 - border
	 * G50 - disabled font
	 * G60 - light font
	 * G70 - secondary font
	 * G80 - font
	 */
	var WHITE = '#FFFFFF';
	var G90 = '#181C32';
	// theme color
	var PRIMARY = BLUE;
	var FONT_FAMILY = '-apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"';

	var _a$2;
	var TenantManagementMode;
	(function (TenantManagementMode) {
	    TenantManagementMode["Team"] = "TEAM";
	    TenantManagementMode["Platform"] = "PLATFORM";
	})(TenantManagementMode || (TenantManagementMode = {}));
	var ControllerFacadeTypes;
	(function (ControllerFacadeTypes) {
	    ControllerFacadeTypes["DropdownList"] = "dropdownList";
	    ControllerFacadeTypes["MultiDropdownList"] = "multiDropdownList";
	    ControllerFacadeTypes["DropDownTree"] = "dropDownTree";
	    ControllerFacadeTypes["RadioGroup"] = "radioGroup";
	    ControllerFacadeTypes["CheckboxGroup"] = "checkboxGroup";
	    ControllerFacadeTypes["Text"] = "text";
	    ControllerFacadeTypes["Value"] = "value";
	    ControllerFacadeTypes["RangeValue"] = "rangeValue";
	    ControllerFacadeTypes["Slider"] = "slider";
	    ControllerFacadeTypes["RangeSlider"] = "rangeSlider";
	    ControllerFacadeTypes["Time"] = "time";
	    ControllerFacadeTypes["RangeTime"] = "rangeTime";
	    ControllerFacadeTypes["RangeTimePicker"] = "rangeTimePicker";
	    ControllerFacadeTypes["RecommendTime"] = "recommendTime";
	    ControllerFacadeTypes["Tree"] = "tree";
	})(ControllerFacadeTypes || (ControllerFacadeTypes = {}));
	var ControllerRadioFacadeTypes;
	(function (ControllerRadioFacadeTypes) {
	    ControllerRadioFacadeTypes["Default"] = "default";
	    ControllerRadioFacadeTypes["Button"] = "button";
	})(ControllerRadioFacadeTypes || (ControllerRadioFacadeTypes = {}));
	var TimeFilterValueCategory;
	(function (TimeFilterValueCategory) {
	    TimeFilterValueCategory["Relative"] = "relative";
	    TimeFilterValueCategory["Exact"] = "exact";
	})(TimeFilterValueCategory || (TimeFilterValueCategory = {}));
	var ControllerVisibilityTypes;
	(function (ControllerVisibilityTypes) {
	    ControllerVisibilityTypes["Hide"] = "hide";
	    ControllerVisibilityTypes["Show"] = "show";
	    ControllerVisibilityTypes["Condition"] = "condition";
	})(ControllerVisibilityTypes || (ControllerVisibilityTypes = {}));
	var ChartLifecycle;
	(function (ChartLifecycle) {
	    ChartLifecycle["Mounted"] = "mounted";
	    ChartLifecycle["Updated"] = "updated";
	    ChartLifecycle["Resize"] = "resize";
	    ChartLifecycle["UnMount"] = "unmount";
	})(ChartLifecycle || (ChartLifecycle = {}));
	var DataViewFieldType;
	(function (DataViewFieldType) {
	    DataViewFieldType["STRING"] = "STRING";
	    DataViewFieldType["NUMERIC"] = "NUMERIC";
	    DataViewFieldType["DATE"] = "DATE";
	})(DataViewFieldType || (DataViewFieldType = {}));
	var ChartDataViewSubType;
	(function (ChartDataViewSubType) {
	    ChartDataViewSubType["UnCategorized"] = "UNCATEGORIZED";
	    ChartDataViewSubType["Country"] = "COUNTRY";
	    ChartDataViewSubType["ProvinceOrState"] = "PROVINCEORSTATE";
	    ChartDataViewSubType["City"] = "CITY";
	    ChartDataViewSubType["County"] = "COUNTY";
	    ChartDataViewSubType["Lng"] = "LNG";
	    ChartDataViewSubType["Lat"] = "LAT";
	})(ChartDataViewSubType || (ChartDataViewSubType = {}));
	var ChartDataViewFieldCategory;
	(function (ChartDataViewFieldCategory) {
	    ChartDataViewFieldCategory["Field"] = "field";
	    ChartDataViewFieldCategory["Hierarchy"] = "hierarchy";
	    ChartDataViewFieldCategory["Variable"] = "variable";
	    ChartDataViewFieldCategory["ComputedField"] = "computedField";
	    ChartDataViewFieldCategory["AggregateComputedField"] = "aggregateComputedField";
	    ChartDataViewFieldCategory["Lng"] = "LNG";
	    ChartDataViewFieldCategory["Lat"] = "LAT";
	    ChartDataViewFieldCategory["DateLevelComputedField"] = "dateLevelComputedField";
	})(ChartDataViewFieldCategory || (ChartDataViewFieldCategory = {}));
	var SortActionType;
	(function (SortActionType) {
	    SortActionType["None"] = "NONE";
	    SortActionType["ASC"] = "ASC";
	    SortActionType["DESC"] = "DESC";
	    SortActionType["Customize"] = "CUSTOMIZE";
	})(SortActionType || (SortActionType = {}));
	var FieldFormatType;
	(function (FieldFormatType) {
	    FieldFormatType["Default"] = "default";
	    FieldFormatType["Numeric"] = "numeric";
	    FieldFormatType["Currency"] = "currency";
	    FieldFormatType["Percentage"] = "percentage";
	    FieldFormatType["Scientific"] = "scientificNotation";
	    FieldFormatType["Date"] = "date";
	    FieldFormatType["Custom"] = "custom";
	    FieldFormatType["Function"] = "function";
	})(FieldFormatType || (FieldFormatType = {}));
	var AggregateFieldActionType;
	(function (AggregateFieldActionType) {
	    AggregateFieldActionType["None"] = "NONE";
	    AggregateFieldActionType["Sum"] = "SUM";
	    AggregateFieldActionType["Avg"] = "AVG";
	    AggregateFieldActionType["Count"] = "COUNT";
	    AggregateFieldActionType["Count_Distinct"] = "COUNT_DISTINCT";
	    AggregateFieldActionType["Max"] = "MAX";
	    AggregateFieldActionType["Min"] = "MIN";
	})(AggregateFieldActionType || (AggregateFieldActionType = {}));
	var CalcFieldActionType;
	(function (CalcFieldActionType) {
	    CalcFieldActionType["None"] = "none";
	    CalcFieldActionType["DateRatio"] = "dateRatio";
	})(CalcFieldActionType || (CalcFieldActionType = {}));
	var ChartDataSectionType;
	(function (ChartDataSectionType) {
	    ChartDataSectionType["Group"] = "group";
	    ChartDataSectionType["Aggregate"] = "aggregate";
	    ChartDataSectionType["Mixed"] = "mixed";
	    ChartDataSectionType["Filter"] = "filter";
	    ChartDataSectionType["Color"] = "color";
	    ChartDataSectionType["Info"] = "info";
	    ChartDataSectionType["Size"] = "size";
	    ChartDataSectionType["Column"] = "column";
	    ChartDataSectionType["Row"] = "row";
	    ChartDataSectionType["Relation"] = "relation";
	    ChartDataSectionType["Lat"] = "latitude";
	    ChartDataSectionType["Lng"] = "longitude";
	    ChartDataSectionType["Source"] = "source";
	    ChartDataSectionType["Target"] = "target";
	    ChartDataSectionType["Date"] = "date";
	})(ChartDataSectionType || (ChartDataSectionType = {}));
	var FilterConditionType;
	(function (FilterConditionType) {
	    // Real Filters
	    FilterConditionType[FilterConditionType["List"] = 2] = "List";
	    FilterConditionType[FilterConditionType["Customize"] = 4] = "Customize";
	    FilterConditionType[FilterConditionType["Condition"] = 8] = "Condition";
	    FilterConditionType[FilterConditionType["RangeValue"] = 16] = "RangeValue";
	    FilterConditionType[FilterConditionType["Value"] = 32] = "Value";
	    FilterConditionType[FilterConditionType["RangeTime"] = 64] = "RangeTime";
	    FilterConditionType[FilterConditionType["RecommendTime"] = 128] = "RecommendTime";
	    FilterConditionType[FilterConditionType["Time"] = 256] = "Time";
	    FilterConditionType[FilterConditionType["Tree"] = 512] = "Tree";
	    // Logic Filters, and type of `Filter` includes all Real Filters
	    FilterConditionType[FilterConditionType["Filter"] = 1022] = "Filter";
	    FilterConditionType[FilterConditionType["Relation"] = 262144] = "Relation";
	})(FilterConditionType || (FilterConditionType = {}));
	var ChartDataSectionFieldActionType = {
	    Sortable: 'sortable',
	    Alias: 'alias',
	    Format: 'format',
	    Aggregate: 'aggregate',
	    AggregateLimit: 'aggregateLimit',
	    Filter: 'filter',
	    CategoryFilter: 'categoryFilter',
	    Colorize: 'colorize',
	    ColorRange: 'colorRange',
	    ColorizeSingle: 'colorSingle',
	    Size: 'size',
	    DateLevel: 'dateLevel',
	    DateRatio: 'dateRatio',
	    Calc: 'calc',
	};
	var FilterRelationType = {
	    AND: 'and',
	    OR: 'or',
	    BETWEEN: 'between',
	    IN: 'in',
	};
	(_a$2 = {},
	    _a$2[ChartDataSectionFieldActionType.Aggregate] = [
	        AggregateFieldActionType.Sum,
	        AggregateFieldActionType.Avg,
	        AggregateFieldActionType.Count,
	        AggregateFieldActionType.Count_Distinct,
	        AggregateFieldActionType.Max,
	        AggregateFieldActionType.Min,
	    ],
	    _a$2[ChartDataSectionFieldActionType.AggregateLimit] = [
	        AggregateFieldActionType.Count,
	        AggregateFieldActionType.Count_Distinct,
	    ],
	    _a$2);
	var DownloadFileType;
	(function (DownloadFileType) {
	    DownloadFileType["Pdf"] = "PDF";
	    DownloadFileType["Excel"] = "EXCEL";
	    DownloadFileType["Image"] = "IMAGE";
	    DownloadFileType["Template"] = "TEMPLATE";
	})(DownloadFileType || (DownloadFileType = {}));
	var RUNTIME_DATE_LEVEL_KEY = Symbol('DateLevel');
	var FONT_DEFAULT = {
	    fontFamily: FONT_FAMILY,
	    fontSize: '14',
	    fontWeight: 'normal',
	    fontStyle: 'normal',
	    color: G90,
	};
	var AuthorizationStatus;
	(function (AuthorizationStatus) {
	    AuthorizationStatus["Initialized"] = "initialized";
	    AuthorizationStatus["Pending"] = "pending";
	    AuthorizationStatus["Success"] = "success";
	    AuthorizationStatus["Error"] = "error";
	})(AuthorizationStatus || (AuthorizationStatus = {}));
	var ChartInteractionEvent;
	(function (ChartInteractionEvent) {
	    ChartInteractionEvent["Select"] = "select";
	    ChartInteractionEvent["UnSelect"] = "unSelect";
	    ChartInteractionEvent["Drilled"] = "drilled";
	    ChartInteractionEvent["PagingOrSort"] = "paging-sort-filter";
	    ChartInteractionEvent["ChangeContext"] = "rich-text-change-context";
	})(ChartInteractionEvent || (ChartInteractionEvent = {}));
	var DateFormat;
	(function (DateFormat) {
	    DateFormat["DateTime"] = "YYYY-MM-DD HH:mm:ss";
	    DateFormat["Date"] = "YYYY-MM-DD";
	})(DateFormat || (DateFormat = {}));
	var DateLevelType;
	(function (DateLevelType) {
	    DateLevelType["AggDateYear"] = "AGG_DATE_YEAR";
	    DateLevelType["AggDateQuarter"] = "AGG_DATE_QUARTER";
	    DateLevelType["AggDateMonth"] = "AGG_DATE_MONTH";
	    DateLevelType["AggDateWeek"] = "AGG_DATE_WEEK";
	    DateLevelType["AggDateDay"] = "AGG_DATE_DAY";
	    DateLevelType["AggDateHour"] = "AGG_DATE_HOUR";
	    DateLevelType["AggDateMinute"] = "AGG_DATE_MINUTE";
	})(DateLevelType || (DateLevelType = {}));
	var DateRatioType;
	(function (DateRatioType) {
	    DateRatioType["Year"] = "year";
	    DateRatioType["Last"] = "last";
	})(DateRatioType || (DateRatioType = {}));
	var DateRatioValueType;
	(function (DateRatioValueType) {
	    DateRatioValueType["Diff"] = "diff";
	    DateRatioValueType["Percent"] = "percent";
	})(DateRatioValueType || (DateRatioValueType = {}));

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var APP_VERSION_INIT = '0.0.0';
	var APP_VERSION_BETA_0 = '1.0.0-beta.0';
	var APP_VERSION_BETA_1 = '1.0.0-beta.1';
	var APP_VERSION_BETA_2 = '1.0.0-beta.2';
	var APP_VERSION_BETA_3 = '1.0.0-beta.3';
	var APP_VERSION_BETA_4 = '1.0.0-beta.4';
	var APP_VERSION_BETA_4_1 = '1.0.0-beta.4+1';
	var APP_VERSION_BETA_4_2 = '1.0.0-beta.4+2';
	var APP_VERSION_RC_0 = '1.0.0-RC.0';
	var APP_VERSION_RC_1 = '1.0.0-RC.1';
	var APP_VERSION_RC_2 = '1.0.0-RC.2';
	var APP_VERSION_RC_3 = '1.0.0-RC.3';
	var APP_SEMANTIC_VERSIONS = [
	    APP_VERSION_INIT,
	    APP_VERSION_BETA_0,
	    APP_VERSION_BETA_1,
	    APP_VERSION_BETA_2,
	    APP_VERSION_BETA_3,
	    APP_VERSION_BETA_4,
	    APP_VERSION_BETA_4_1,
	    APP_VERSION_BETA_4_2,
	    APP_VERSION_RC_0,
	    APP_VERSION_RC_1,
	    APP_VERSION_RC_2,
	    APP_VERSION_RC_3,
	];
	var APP_CURRENT_VERSION = APP_SEMANTIC_VERSIONS[APP_SEMANTIC_VERSIONS.length - 1];

	var _a$1;
	var RUNTIME_FILTER_KEY = Symbol('@filters@');
	var DATE_LEVEL_DELIMITER = '@date_level_delimiter@';
	var StorageKeys;
	(function (StorageKeys) {
	    StorageKeys["AuthorizationToken"] = "AUTHORIZATION_TOKEN";
	    StorageKeys["LoggedInUser"] = "LOGGED_IN_USER";
	    StorageKeys["ShareClientId"] = "SHARE_CLIENT_ID";
	    StorageKeys["AuthRedirectUrl"] = "AUTH_REDIRECT_URL";
	    StorageKeys["Locale"] = "LOCALE";
	    StorageKeys["Theme"] = "THEME";
	})(StorageKeys || (StorageKeys = {}));
	var CommonFormTypes;
	(function (CommonFormTypes) {
	    CommonFormTypes["Add"] = "add";
	    CommonFormTypes["Edit"] = "edit";
	    CommonFormTypes["Select"] = "select";
	    CommonFormTypes["Active"] = "active";
	    CommonFormTypes["SaveAs"] = "saveAs";
	})(CommonFormTypes || (CommonFormTypes = {}));
	(_a$1 = {},
	    _a$1[CommonFormTypes.Add] = '新建',
	    _a$1[CommonFormTypes.Edit] = '编辑',
	    _a$1[CommonFormTypes.Select] = '修改',
	    _a$1[CommonFormTypes.Active] = '执行',
	    _a$1);
	var RECOMMEND_TIME = {
	    TODAY: 'today',
	    YESTERDAY: 'yesterday',
	    THIS_WEEK: 'this_week',
	    LAST_7_DAYS: 'last_7_days',
	    LAST_30_DAYS: 'last_30_days',
	    LAST_90_DAYS: 'last_90_days',
	    LAST_1_MONTH: 'last_1_month',
	    LAST_1_YEAR: 'last_1_year',
	};
	var FilterSqlOperator;
	(function (FilterSqlOperator) {
	    FilterSqlOperator["Equal"] = "EQ";
	    FilterSqlOperator["NotEqual"] = "NE";
	    FilterSqlOperator["Null"] = "IS_NULL";
	    FilterSqlOperator["NotNull"] = "NOT_NULL";
	    FilterSqlOperator["Contain"] = "LIKE";
	    FilterSqlOperator["NotContain"] = "NOT_LIKE";
	    FilterSqlOperator["PrefixContain"] = "PREFIX_LIKE";
	    FilterSqlOperator["NotPrefixContain"] = "PREFIX_NOT_LIKE";
	    FilterSqlOperator["SuffixContain"] = "SUFFIX_LIKE";
	    FilterSqlOperator["NotSuffixContain"] = "SUFFIX_NOT_LIKE";
	    FilterSqlOperator["Between"] = "BETWEEN";
	    FilterSqlOperator["NotBetween"] = "NOT_BETWEEN";
	    FilterSqlOperator["In"] = "IN";
	    FilterSqlOperator["NotIn"] = "NOT_IN";
	    FilterSqlOperator["LessThan"] = "LT";
	    FilterSqlOperator["GreaterThan"] = "GT";
	    FilterSqlOperator["LessThanOrEqual"] = "LTE";
	    FilterSqlOperator["GreaterThanOrEqual"] = "GTE";
	})(FilterSqlOperator || (FilterSqlOperator = {}));
	var DATE_FORMATTER = 'YYYY-MM-DD';
	var TIME_FORMATTER = 'YYYY-MM-DD HH:mm:ss';
	var NumberUnitKey;
	(function (NumberUnitKey) {
	    NumberUnitKey["None"] = "none";
	    // English Unit
	    NumberUnitKey["Thousand"] = "thousand";
	    NumberUnitKey["Million"] = "million";
	    NumberUnitKey["Billion"] = "billion";
	    // Chinese Unit
	    NumberUnitKey["Wan"] = "wan";
	    NumberUnitKey["Yi"] = "yi";
	})(NumberUnitKey || (NumberUnitKey = {}));
	// .drt = datart template file
	// .drr = datart resources file
	var DatartFileSuffixes;
	(function (DatartFileSuffixes) {
	    DatartFileSuffixes["Template"] = ".drt";
	    DatartFileSuffixes["Resource"] = ".drr";
	})(DatartFileSuffixes || (DatartFileSuffixes = {}));
	var CalculationType;
	(function (CalculationType) {
	    CalculationType["ADD"] = "add";
	    CalculationType["SUBTRACT"] = "subtract";
	})(CalculationType || (CalculationType = {}));

	function _typeof(o) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
	    return typeof o;
	  } : function (o) {
	    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
	  }, _typeof(o);
	}

	function _toPrimitive(input, hint) {
	  if (_typeof(input) !== "object" || input === null) return input;
	  var prim = input[Symbol.toPrimitive];
	  if (prim !== undefined) {
	    var res = prim.call(input, hint || "default");
	    if (_typeof(res) !== "object") return res;
	    throw new TypeError("@@toPrimitive must return a primitive value.");
	  }
	  return (hint === "string" ? String : Number)(input);
	}

	function _toPropertyKey(arg) {
	  var key = _toPrimitive(arg, "string");
	  return _typeof(key) === "symbol" ? key : String(key);
	}

	function _defineProperty$1(obj, key, value) {
	  key = _toPropertyKey(key);
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? Object(arguments[i]) : {};
	    var ownKeys = Object.keys(source);
	    if (typeof Object.getOwnPropertySymbols === 'function') {
	      ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function (sym) {
	        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
	      }));
	    }
	    ownKeys.forEach(function (key) {
	      _defineProperty$1(target, key, source[key]);
	    });
	  }
	  return target;
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
	  }
	}
	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	  return self;
	}

	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
	    return call;
	  } else if (call !== void 0) {
	    throw new TypeError("Derived constructors may only return object or undefined");
	  }
	  return _assertThisInitialized(self);
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };
	  return _setPrototypeOf(o, p);
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }
	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  Object.defineProperty(subClass, "prototype", {
	    writable: false
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}

	var consoleLogger = {
	  type: 'logger',
	  log: function log(args) {
	    this.output('log', args);
	  },
	  warn: function warn(args) {
	    this.output('warn', args);
	  },
	  error: function error(args) {
	    this.output('error', args);
	  },
	  output: function output(type, args) {
	    if (console && console[type]) console[type].apply(console, args);
	  }
	};
	var Logger = function () {
	  function Logger(concreteLogger) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    _classCallCheck(this, Logger);
	    this.init(concreteLogger, options);
	  }
	  _createClass(Logger, [{
	    key: "init",
	    value: function init(concreteLogger) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      this.prefix = options.prefix || 'i18next:';
	      this.logger = concreteLogger || consoleLogger;
	      this.options = options;
	      this.debug = options.debug;
	    }
	  }, {
	    key: "setDebug",
	    value: function setDebug(bool) {
	      this.debug = bool;
	    }
	  }, {
	    key: "log",
	    value: function log() {
	      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }
	      return this.forward(args, 'log', '', true);
	    }
	  }, {
	    key: "warn",
	    value: function warn() {
	      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }
	      return this.forward(args, 'warn', '', true);
	    }
	  }, {
	    key: "error",
	    value: function error() {
	      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }
	      return this.forward(args, 'error', '');
	    }
	  }, {
	    key: "deprecate",
	    value: function deprecate() {
	      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	        args[_key4] = arguments[_key4];
	      }
	      return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
	    }
	  }, {
	    key: "forward",
	    value: function forward(args, lvl, prefix, debugOnly) {
	      if (debugOnly && !this.debug) return null;
	      if (typeof args[0] === 'string') args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
	      return this.logger[lvl](args);
	    }
	  }, {
	    key: "create",
	    value: function create(moduleName) {
	      return new Logger(this.logger, _objectSpread({}, {
	        prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
	      }, this.options));
	    }
	  }]);
	  return Logger;
	}();
	var baseLogger = new Logger();
	var EventEmitter = function () {
	  function EventEmitter() {
	    _classCallCheck(this, EventEmitter);
	    this.observers = {};
	  }
	  _createClass(EventEmitter, [{
	    key: "on",
	    value: function on(events, listener) {
	      var _this = this;
	      events.split(' ').forEach(function (event) {
	        _this.observers[event] = _this.observers[event] || [];
	        _this.observers[event].push(listener);
	      });
	      return this;
	    }
	  }, {
	    key: "off",
	    value: function off(event, listener) {
	      if (!this.observers[event]) return;
	      if (!listener) {
	        delete this.observers[event];
	        return;
	      }
	      this.observers[event] = this.observers[event].filter(function (l) {
	        return l !== listener;
	      });
	    }
	  }, {
	    key: "emit",
	    value: function emit(event) {
	      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	      if (this.observers[event]) {
	        var cloned = [].concat(this.observers[event]);
	        cloned.forEach(function (observer) {
	          observer.apply(void 0, args);
	        });
	      }
	      if (this.observers['*']) {
	        var _cloned = [].concat(this.observers['*']);
	        _cloned.forEach(function (observer) {
	          observer.apply(observer, [event].concat(args));
	        });
	      }
	    }
	  }]);
	  return EventEmitter;
	}();
	function defer() {
	  var res;
	  var rej;
	  var promise = new Promise(function (resolve, reject) {
	    res = resolve;
	    rej = reject;
	  });
	  promise.resolve = res;
	  promise.reject = rej;
	  return promise;
	}
	function makeString(object) {
	  if (object == null) return '';
	  return '' + object;
	}
	function copy(a, s, t) {
	  a.forEach(function (m) {
	    if (s[m]) t[m] = s[m];
	  });
	}
	function getLastOfPath(object, path, Empty) {
	  function cleanKey(key) {
	    return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
	  }
	  function canNotTraverseDeeper() {
	    return !object || typeof object === 'string';
	  }
	  var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');
	  while (stack.length > 1) {
	    if (canNotTraverseDeeper()) return {};
	    var key = cleanKey(stack.shift());
	    if (!object[key] && Empty) object[key] = new Empty();
	    if (Object.prototype.hasOwnProperty.call(object, key)) {
	      object = object[key];
	    } else {
	      object = {};
	    }
	  }
	  if (canNotTraverseDeeper()) return {};
	  return {
	    obj: object,
	    k: cleanKey(stack.shift())
	  };
	}
	function setPath(object, path, newValue) {
	  var _getLastOfPath = getLastOfPath(object, path, Object),
	    obj = _getLastOfPath.obj,
	    k = _getLastOfPath.k;
	  obj[k] = newValue;
	}
	function pushPath(object, path, newValue, concat) {
	  var _getLastOfPath2 = getLastOfPath(object, path, Object),
	    obj = _getLastOfPath2.obj,
	    k = _getLastOfPath2.k;
	  obj[k] = obj[k] || [];
	  if (concat) obj[k] = obj[k].concat(newValue);
	  if (!concat) obj[k].push(newValue);
	}
	function getPath(object, path) {
	  var _getLastOfPath3 = getLastOfPath(object, path),
	    obj = _getLastOfPath3.obj,
	    k = _getLastOfPath3.k;
	  if (!obj) return undefined;
	  return obj[k];
	}
	function getPathWithDefaults(data, defaultData, key) {
	  var value = getPath(data, key);
	  if (value !== undefined) {
	    return value;
	  }
	  return getPath(defaultData, key);
	}
	function deepExtend(target, source, overwrite) {
	  for (var prop in source) {
	    if (prop !== '__proto__' && prop !== 'constructor') {
	      if (prop in target) {
	        if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
	          if (overwrite) target[prop] = source[prop];
	        } else {
	          deepExtend(target[prop], source[prop], overwrite);
	        }
	      } else {
	        target[prop] = source[prop];
	      }
	    }
	  }
	  return target;
	}
	function regexEscape$1(str) {
	  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
	}
	var _entityMap = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  "'": '&#39;',
	  '/': '&#x2F;'
	};
	function escape$2(data) {
	  if (typeof data === 'string') {
	    return data.replace(/[&<>"'\/]/g, function (s) {
	      return _entityMap[s];
	    });
	  }
	  return data;
	}
	var isIE10 = typeof window !== 'undefined' && window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;
	var ResourceStore = function (_EventEmitter) {
	  _inherits(ResourceStore, _EventEmitter);
	  function ResourceStore(data) {
	    var _this;
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
	      ns: ['translation'],
	      defaultNS: 'translation'
	    };
	    _classCallCheck(this, ResourceStore);
	    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResourceStore).call(this));
	    if (isIE10) {
	      EventEmitter.call(_assertThisInitialized(_this));
	    }
	    _this.data = data || {};
	    _this.options = options;
	    if (_this.options.keySeparator === undefined) {
	      _this.options.keySeparator = '.';
	    }
	    return _this;
	  }
	  _createClass(ResourceStore, [{
	    key: "addNamespaces",
	    value: function addNamespaces(ns) {
	      if (this.options.ns.indexOf(ns) < 0) {
	        this.options.ns.push(ns);
	      }
	    }
	  }, {
	    key: "removeNamespaces",
	    value: function removeNamespaces(ns) {
	      var index = this.options.ns.indexOf(ns);
	      if (index > -1) {
	        this.options.ns.splice(index, 1);
	      }
	    }
	  }, {
	    key: "getResource",
	    value: function getResource(lng, ns, key) {
	      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
	      var path = [lng, ns];
	      if (key && typeof key !== 'string') path = path.concat(key);
	      if (key && typeof key === 'string') path = path.concat(keySeparator ? key.split(keySeparator) : key);
	      if (lng.indexOf('.') > -1) {
	        path = lng.split('.');
	      }
	      return getPath(this.data, path);
	    }
	  }, {
	    key: "addResource",
	    value: function addResource(lng, ns, key, value) {
	      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
	        silent: false
	      };
	      var keySeparator = this.options.keySeparator;
	      if (keySeparator === undefined) keySeparator = '.';
	      var path = [lng, ns];
	      if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
	      if (lng.indexOf('.') > -1) {
	        path = lng.split('.');
	        value = ns;
	        ns = path[1];
	      }
	      this.addNamespaces(ns);
	      setPath(this.data, path, value);
	      if (!options.silent) this.emit('added', lng, ns, key, value);
	    }
	  }, {
	    key: "addResources",
	    value: function addResources(lng, ns, resources) {
	      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
	        silent: false
	      };
	      for (var m in resources) {
	        if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]') this.addResource(lng, ns, m, resources[m], {
	          silent: true
	        });
	      }
	      if (!options.silent) this.emit('added', lng, ns, resources);
	    }
	  }, {
	    key: "addResourceBundle",
	    value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
	      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
	        silent: false
	      };
	      var path = [lng, ns];
	      if (lng.indexOf('.') > -1) {
	        path = lng.split('.');
	        deep = resources;
	        resources = ns;
	        ns = path[1];
	      }
	      this.addNamespaces(ns);
	      var pack = getPath(this.data, path) || {};
	      if (deep) {
	        deepExtend(pack, resources, overwrite);
	      } else {
	        pack = _objectSpread({}, pack, resources);
	      }
	      setPath(this.data, path, pack);
	      if (!options.silent) this.emit('added', lng, ns, resources);
	    }
	  }, {
	    key: "removeResourceBundle",
	    value: function removeResourceBundle(lng, ns) {
	      if (this.hasResourceBundle(lng, ns)) {
	        delete this.data[lng][ns];
	      }
	      this.removeNamespaces(ns);
	      this.emit('removed', lng, ns);
	    }
	  }, {
	    key: "hasResourceBundle",
	    value: function hasResourceBundle(lng, ns) {
	      return this.getResource(lng, ns) !== undefined;
	    }
	  }, {
	    key: "getResourceBundle",
	    value: function getResourceBundle(lng, ns) {
	      if (!ns) ns = this.options.defaultNS;
	      if (this.options.compatibilityAPI === 'v1') return _objectSpread({}, {}, this.getResource(lng, ns));
	      return this.getResource(lng, ns);
	    }
	  }, {
	    key: "getDataByLanguage",
	    value: function getDataByLanguage(lng) {
	      return this.data[lng];
	    }
	  }, {
	    key: "toJSON",
	    value: function toJSON() {
	      return this.data;
	    }
	  }]);
	  return ResourceStore;
	}(EventEmitter);
	var postProcessor = {
	  processors: {},
	  addPostProcessor: function addPostProcessor(module) {
	    this.processors[module.name] = module;
	  },
	  handle: function handle(processors, value, key, options, translator) {
	    var _this = this;
	    processors.forEach(function (processor) {
	      if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);
	    });
	    return value;
	  }
	};
	var checkedLoadedFor = {};
	var Translator = function (_EventEmitter) {
	  _inherits(Translator, _EventEmitter);
	  function Translator(services) {
	    var _this;
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    _classCallCheck(this, Translator);
	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Translator).call(this));
	    if (isIE10) {
	      EventEmitter.call(_assertThisInitialized(_this));
	    }
	    copy(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, _assertThisInitialized(_this));
	    _this.options = options;
	    if (_this.options.keySeparator === undefined) {
	      _this.options.keySeparator = '.';
	    }
	    _this.logger = baseLogger.create('translator');
	    return _this;
	  }
	  _createClass(Translator, [{
	    key: "changeLanguage",
	    value: function changeLanguage(lng) {
	      if (lng) this.language = lng;
	    }
	  }, {
	    key: "exists",
	    value: function exists(key) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
	        interpolation: {}
	      };
	      var resolved = this.resolve(key, options);
	      return resolved && resolved.res !== undefined;
	    }
	  }, {
	    key: "extractFromKey",
	    value: function extractFromKey(key, options) {
	      var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
	      if (nsSeparator === undefined) nsSeparator = ':';
	      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
	      var namespaces = options.ns || this.options.defaultNS;
	      if (nsSeparator && key.indexOf(nsSeparator) > -1) {
	        var m = key.match(this.interpolator.nestingRegexp);
	        if (m && m.length > 0) {
	          return {
	            key: key,
	            namespaces: namespaces
	          };
	        }
	        var parts = key.split(nsSeparator);
	        if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
	        key = parts.join(keySeparator);
	      }
	      if (typeof namespaces === 'string') namespaces = [namespaces];
	      return {
	        key: key,
	        namespaces: namespaces
	      };
	    }
	  }, {
	    key: "translate",
	    value: function translate(keys, options, lastKey) {
	      var _this2 = this;
	      if (_typeof(options) !== 'object' && this.options.overloadTranslationOptionHandler) {
	        options = this.options.overloadTranslationOptionHandler(arguments);
	      }
	      if (!options) options = {};
	      if (keys === undefined || keys === null) return '';
	      if (!Array.isArray(keys)) keys = [String(keys)];
	      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
	      var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options),
	        key = _this$extractFromKey.key,
	        namespaces = _this$extractFromKey.namespaces;
	      var namespace = namespaces[namespaces.length - 1];
	      var lng = options.lng || this.language;
	      var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
	      if (lng && lng.toLowerCase() === 'cimode') {
	        if (appendNamespaceToCIMode) {
	          var nsSeparator = options.nsSeparator || this.options.nsSeparator;
	          return namespace + nsSeparator + key;
	        }
	        return key;
	      }
	      var resolved = this.resolve(keys, options);
	      var res = resolved && resolved.res;
	      var resUsedKey = resolved && resolved.usedKey || key;
	      var resExactUsedKey = resolved && resolved.exactUsedKey || key;
	      var resType = Object.prototype.toString.apply(res);
	      var noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
	      var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
	      var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
	      var handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';
	      if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {
	        if (!options.returnObjects && !this.options.returnObjects) {
	          this.logger.warn('accessing an object - but returnObjects options is not enabled!');
	          return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, options) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
	        }
	        if (keySeparator) {
	          var resTypeIsArray = resType === '[object Array]';
	          var copy = resTypeIsArray ? [] : {};
	          var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
	          for (var m in res) {
	            if (Object.prototype.hasOwnProperty.call(res, m)) {
	              var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
	              copy[m] = this.translate(deepKey, _objectSpread({}, options, {
	                joinArrays: false,
	                ns: namespaces
	              }));
	              if (copy[m] === deepKey) copy[m] = res[m];
	            }
	          }
	          res = copy;
	        }
	      } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {
	        res = res.join(joinArrays);
	        if (res) res = this.extendTranslation(res, keys, options, lastKey);
	      } else {
	        var usedDefault = false;
	        var usedKey = false;
	        var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
	        var hasDefaultValue = Translator.hasDefaultValue(options);
	        var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count) : '';
	        var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;
	        if (!this.isValidLookup(res) && hasDefaultValue) {
	          usedDefault = true;
	          res = defaultValue;
	        }
	        if (!this.isValidLookup(res)) {
	          usedKey = true;
	          res = key;
	        }
	        var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
	        if (usedKey || usedDefault || updateMissing) {
	          this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);
	          if (keySeparator) {
	            var fk = this.resolve(key, _objectSpread({}, options, {
	              keySeparator: false
	            }));
	            if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
	          }
	          var lngs = [];
	          var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
	          if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
	            for (var i = 0; i < fallbackLngs.length; i++) {
	              lngs.push(fallbackLngs[i]);
	            }
	          } else if (this.options.saveMissingTo === 'all') {
	            lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
	          } else {
	            lngs.push(options.lng || this.language);
	          }
	          var send = function send(l, k, fallbackValue) {
	            if (_this2.options.missingKeyHandler) {
	              _this2.options.missingKeyHandler(l, namespace, k, updateMissing ? fallbackValue : res, updateMissing, options);
	            } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
	              _this2.backendConnector.saveMissing(l, namespace, k, updateMissing ? fallbackValue : res, updateMissing, options);
	            }
	            _this2.emit('missingKey', l, namespace, k, res);
	          };
	          if (this.options.saveMissing) {
	            if (this.options.saveMissingPlurals && needsPluralHandling) {
	              lngs.forEach(function (language) {
	                _this2.pluralResolver.getSuffixes(language).forEach(function (suffix) {
	                  send([language], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
	                });
	              });
	            } else {
	              send(lngs, key, defaultValue);
	            }
	          }
	        }
	        res = this.extendTranslation(res, keys, options, resolved, lastKey);
	        if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);
	        if (usedKey && this.options.parseMissingKeyHandler) res = this.options.parseMissingKeyHandler(res);
	      }
	      return res;
	    }
	  }, {
	    key: "extendTranslation",
	    value: function extendTranslation(res, key, options, resolved, lastKey) {
	      var _this3 = this;
	      if (this.i18nFormat && this.i18nFormat.parse) {
	        res = this.i18nFormat.parse(res, options, resolved.usedLng, resolved.usedNS, resolved.usedKey, {
	          resolved: resolved
	        });
	      } else if (!options.skipInterpolation) {
	        if (options.interpolation) this.interpolator.init(_objectSpread({}, options, {
	          interpolation: _objectSpread({}, this.options.interpolation, options.interpolation)
	        }));
	        var skipOnVariables = options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
	        var nestBef;
	        if (skipOnVariables) {
	          var nb = res.match(this.interpolator.nestingRegexp);
	          nestBef = nb && nb.length;
	        }
	        var data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
	        if (this.options.interpolation.defaultVariables) data = _objectSpread({}, this.options.interpolation.defaultVariables, data);
	        res = this.interpolator.interpolate(res, data, options.lng || this.language, options);
	        if (skipOnVariables) {
	          var na = res.match(this.interpolator.nestingRegexp);
	          var nestAft = na && na.length;
	          if (nestBef < nestAft) options.nest = false;
	        }
	        if (options.nest !== false) res = this.interpolator.nest(res, function () {
	          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	          }
	          if (lastKey && lastKey[0] === args[0] && !options.context) {
	            _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));
	            return null;
	          }
	          return _this3.translate.apply(_this3, args.concat([key]));
	        }, options);
	        if (options.interpolation) this.interpolator.reset();
	      }
	      var postProcess = options.postProcess || this.options.postProcess;
	      var postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;
	      if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
	        res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread({
	          i18nResolved: resolved
	        }, options) : options, this);
	      }
	      return res;
	    }
	  }, {
	    key: "resolve",
	    value: function resolve(keys) {
	      var _this4 = this;
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      var found;
	      var usedKey;
	      var exactUsedKey;
	      var usedLng;
	      var usedNS;
	      if (typeof keys === 'string') keys = [keys];
	      keys.forEach(function (k) {
	        if (_this4.isValidLookup(found)) return;
	        var extracted = _this4.extractFromKey(k, options);
	        var key = extracted.key;
	        usedKey = key;
	        var namespaces = extracted.namespaces;
	        if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
	        var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
	        var needsContextHandling = options.context !== undefined && typeof options.context === 'string' && options.context !== '';
	        var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
	        namespaces.forEach(function (ns) {
	          if (_this4.isValidLookup(found)) return;
	          usedNS = ns;
	          if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
	            checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;
	            _this4.logger.warn("key \"".concat(usedKey, "\" for languages \"").concat(codes.join(', '), "\" won't get resolved as namespace \"").concat(usedNS, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
	          }
	          codes.forEach(function (code) {
	            if (_this4.isValidLookup(found)) return;
	            usedLng = code;
	            var finalKey = key;
	            var finalKeys = [finalKey];
	            if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
	              _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
	            } else {
	              var pluralSuffix;
	              if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count);
	              if (needsPluralHandling && needsContextHandling) finalKeys.push(finalKey + pluralSuffix);
	              if (needsContextHandling) finalKeys.push(finalKey += "".concat(_this4.options.contextSeparator).concat(options.context));
	              if (needsPluralHandling) finalKeys.push(finalKey += pluralSuffix);
	            }
	            var possibleKey;
	            while (possibleKey = finalKeys.pop()) {
	              if (!_this4.isValidLookup(found)) {
	                exactUsedKey = possibleKey;
	                found = _this4.getResource(code, ns, possibleKey, options);
	              }
	            }
	          });
	        });
	      });
	      return {
	        res: found,
	        usedKey: usedKey,
	        exactUsedKey: exactUsedKey,
	        usedLng: usedLng,
	        usedNS: usedNS
	      };
	    }
	  }, {
	    key: "isValidLookup",
	    value: function isValidLookup(res) {
	      return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
	    }
	  }, {
	    key: "getResource",
	    value: function getResource(code, ns, key) {
	      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	      if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
	      return this.resourceStore.getResource(code, ns, key, options);
	    }
	  }], [{
	    key: "hasDefaultValue",
	    value: function hasDefaultValue(options) {
	      var prefix = 'defaultValue';
	      for (var option in options) {
	        if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {
	          return true;
	        }
	      }
	      return false;
	    }
	  }]);
	  return Translator;
	}(EventEmitter);
	function capitalize$2(string) {
	  return string.charAt(0).toUpperCase() + string.slice(1);
	}
	var LanguageUtil = function () {
	  function LanguageUtil(options) {
	    _classCallCheck(this, LanguageUtil);
	    this.options = options;
	    this.whitelist = this.options.supportedLngs || false;
	    this.supportedLngs = this.options.supportedLngs || false;
	    this.logger = baseLogger.create('languageUtils');
	  }
	  _createClass(LanguageUtil, [{
	    key: "getScriptPartFromCode",
	    value: function getScriptPartFromCode(code) {
	      if (!code || code.indexOf('-') < 0) return null;
	      var p = code.split('-');
	      if (p.length === 2) return null;
	      p.pop();
	      if (p[p.length - 1].toLowerCase() === 'x') return null;
	      return this.formatLanguageCode(p.join('-'));
	    }
	  }, {
	    key: "getLanguagePartFromCode",
	    value: function getLanguagePartFromCode(code) {
	      if (!code || code.indexOf('-') < 0) return code;
	      var p = code.split('-');
	      return this.formatLanguageCode(p[0]);
	    }
	  }, {
	    key: "formatLanguageCode",
	    value: function formatLanguageCode(code) {
	      if (typeof code === 'string' && code.indexOf('-') > -1) {
	        var specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
	        var p = code.split('-');
	        if (this.options.lowerCaseLng) {
	          p = p.map(function (part) {
	            return part.toLowerCase();
	          });
	        } else if (p.length === 2) {
	          p[0] = p[0].toLowerCase();
	          p[1] = p[1].toUpperCase();
	          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize$2(p[1].toLowerCase());
	        } else if (p.length === 3) {
	          p[0] = p[0].toLowerCase();
	          if (p[1].length === 2) p[1] = p[1].toUpperCase();
	          if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
	          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize$2(p[1].toLowerCase());
	          if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize$2(p[2].toLowerCase());
	        }
	        return p.join('-');
	      }
	      return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
	    }
	  }, {
	    key: "isWhitelisted",
	    value: function isWhitelisted(code) {
	      this.logger.deprecate('languageUtils.isWhitelisted', 'function "isWhitelisted" will be renamed to "isSupportedCode" in the next major - please make sure to rename it\'s usage asap.');
	      return this.isSupportedCode(code);
	    }
	  }, {
	    key: "isSupportedCode",
	    value: function isSupportedCode(code) {
	      if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
	        code = this.getLanguagePartFromCode(code);
	      }
	      return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
	    }
	  }, {
	    key: "getBestMatchFromCodes",
	    value: function getBestMatchFromCodes(codes) {
	      var _this = this;
	      if (!codes) return null;
	      var found;
	      codes.forEach(function (code) {
	        if (found) return;
	        var cleanedLng = _this.formatLanguageCode(code);
	        if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
	      });
	      if (!found && this.options.supportedLngs) {
	        codes.forEach(function (code) {
	          if (found) return;
	          var lngOnly = _this.getLanguagePartFromCode(code);
	          if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
	          found = _this.options.supportedLngs.find(function (supportedLng) {
	            if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
	          });
	        });
	      }
	      if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
	      return found;
	    }
	  }, {
	    key: "getFallbackCodes",
	    value: function getFallbackCodes(fallbacks, code) {
	      if (!fallbacks) return [];
	      if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
	      if (typeof fallbacks === 'string') fallbacks = [fallbacks];
	      if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;
	      if (!code) return fallbacks["default"] || [];
	      var found = fallbacks[code];
	      if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
	      if (!found) found = fallbacks[this.formatLanguageCode(code)];
	      if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
	      if (!found) found = fallbacks["default"];
	      return found || [];
	    }
	  }, {
	    key: "toResolveHierarchy",
	    value: function toResolveHierarchy(code, fallbackCode) {
	      var _this2 = this;
	      var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
	      var codes = [];
	      var addCode = function addCode(c) {
	        if (!c) return;
	        if (_this2.isSupportedCode(c)) {
	          codes.push(c);
	        } else {
	          _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
	        }
	      };
	      if (typeof code === 'string' && code.indexOf('-') > -1) {
	        if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
	        if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
	        if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
	      } else if (typeof code === 'string') {
	        addCode(this.formatLanguageCode(code));
	      }
	      fallbackCodes.forEach(function (fc) {
	        if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
	      });
	      return codes;
	    }
	  }]);
	  return LanguageUtil;
	}();
	var sets = [{
	  lngs: ['ach', 'ak', 'am', 'arn', 'br', 'fil', 'gun', 'ln', 'mfe', 'mg', 'mi', 'oc', 'pt', 'pt-BR', 'tg', 'tl', 'ti', 'tr', 'uz', 'wa'],
	  nr: [1, 2],
	  fc: 1
	}, {
	  lngs: ['af', 'an', 'ast', 'az', 'bg', 'bn', 'ca', 'da', 'de', 'dev', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fi', 'fo', 'fur', 'fy', 'gl', 'gu', 'ha', 'hi', 'hu', 'hy', 'ia', 'it', 'kn', 'ku', 'lb', 'mai', 'ml', 'mn', 'mr', 'nah', 'nap', 'nb', 'ne', 'nl', 'nn', 'no', 'nso', 'pa', 'pap', 'pms', 'ps', 'pt-PT', 'rm', 'sco', 'se', 'si', 'so', 'son', 'sq', 'sv', 'sw', 'ta', 'te', 'tk', 'ur', 'yo'],
	  nr: [1, 2],
	  fc: 2
	}, {
	  lngs: ['ay', 'bo', 'cgg', 'fa', 'ht', 'id', 'ja', 'jbo', 'ka', 'kk', 'km', 'ko', 'ky', 'lo', 'ms', 'sah', 'su', 'th', 'tt', 'ug', 'vi', 'wo', 'zh'],
	  nr: [1],
	  fc: 3
	}, {
	  lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],
	  nr: [1, 2, 5],
	  fc: 4
	}, {
	  lngs: ['ar'],
	  nr: [0, 1, 2, 3, 11, 100],
	  fc: 5
	}, {
	  lngs: ['cs', 'sk'],
	  nr: [1, 2, 5],
	  fc: 6
	}, {
	  lngs: ['csb', 'pl'],
	  nr: [1, 2, 5],
	  fc: 7
	}, {
	  lngs: ['cy'],
	  nr: [1, 2, 3, 8],
	  fc: 8
	}, {
	  lngs: ['fr'],
	  nr: [1, 2],
	  fc: 9
	}, {
	  lngs: ['ga'],
	  nr: [1, 2, 3, 7, 11],
	  fc: 10
	}, {
	  lngs: ['gd'],
	  nr: [1, 2, 3, 20],
	  fc: 11
	}, {
	  lngs: ['is'],
	  nr: [1, 2],
	  fc: 12
	}, {
	  lngs: ['jv'],
	  nr: [0, 1],
	  fc: 13
	}, {
	  lngs: ['kw'],
	  nr: [1, 2, 3, 4],
	  fc: 14
	}, {
	  lngs: ['lt'],
	  nr: [1, 2, 10],
	  fc: 15
	}, {
	  lngs: ['lv'],
	  nr: [1, 2, 0],
	  fc: 16
	}, {
	  lngs: ['mk'],
	  nr: [1, 2],
	  fc: 17
	}, {
	  lngs: ['mnk'],
	  nr: [0, 1, 2],
	  fc: 18
	}, {
	  lngs: ['mt'],
	  nr: [1, 2, 11, 20],
	  fc: 19
	}, {
	  lngs: ['or'],
	  nr: [2, 1],
	  fc: 2
	}, {
	  lngs: ['ro'],
	  nr: [1, 2, 20],
	  fc: 20
	}, {
	  lngs: ['sl'],
	  nr: [5, 1, 2, 3],
	  fc: 21
	}, {
	  lngs: ['he', 'iw'],
	  nr: [1, 2, 20, 21],
	  fc: 22
	}];
	var _rulesPluralsTypes = {
	  1: function _(n) {
	    return Number(n > 1);
	  },
	  2: function _(n) {
	    return Number(n != 1);
	  },
	  3: function _(n) {
	    return 0;
	  },
	  4: function _(n) {
	    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
	  },
	  5: function _(n) {
	    return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
	  },
	  6: function _(n) {
	    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
	  },
	  7: function _(n) {
	    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
	  },
	  8: function _(n) {
	    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
	  },
	  9: function _(n) {
	    return Number(n >= 2);
	  },
	  10: function _(n) {
	    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
	  },
	  11: function _(n) {
	    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
	  },
	  12: function _(n) {
	    return Number(n % 10 != 1 || n % 100 == 11);
	  },
	  13: function _(n) {
	    return Number(n !== 0);
	  },
	  14: function _(n) {
	    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
	  },
	  15: function _(n) {
	    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
	  },
	  16: function _(n) {
	    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
	  },
	  17: function _(n) {
	    return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
	  },
	  18: function _(n) {
	    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
	  },
	  19: function _(n) {
	    return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
	  },
	  20: function _(n) {
	    return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
	  },
	  21: function _(n) {
	    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
	  },
	  22: function _(n) {
	    return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
	  }
	};
	function createRules() {
	  var rules = {};
	  sets.forEach(function (set) {
	    set.lngs.forEach(function (l) {
	      rules[l] = {
	        numbers: set.nr,
	        plurals: _rulesPluralsTypes[set.fc]
	      };
	    });
	  });
	  return rules;
	}
	var PluralResolver = function () {
	  function PluralResolver(languageUtils) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    _classCallCheck(this, PluralResolver);
	    this.languageUtils = languageUtils;
	    this.options = options;
	    this.logger = baseLogger.create('pluralResolver');
	    this.rules = createRules();
	  }
	  _createClass(PluralResolver, [{
	    key: "addRule",
	    value: function addRule(lng, obj) {
	      this.rules[lng] = obj;
	    }
	  }, {
	    key: "getRule",
	    value: function getRule(code) {
	      return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
	    }
	  }, {
	    key: "needsPlural",
	    value: function needsPlural(code) {
	      var rule = this.getRule(code);
	      return rule && rule.numbers.length > 1;
	    }
	  }, {
	    key: "getPluralFormsOfKey",
	    value: function getPluralFormsOfKey(code, key) {
	      return this.getSuffixes(code).map(function (suffix) {
	        return key + suffix;
	      });
	    }
	  }, {
	    key: "getSuffixes",
	    value: function getSuffixes(code) {
	      var _this = this;
	      var rule = this.getRule(code);
	      if (!rule) {
	        return [];
	      }
	      return rule.numbers.map(function (number) {
	        return _this.getSuffix(code, number);
	      });
	    }
	  }, {
	    key: "getSuffix",
	    value: function getSuffix(code, count) {
	      var _this2 = this;
	      var rule = this.getRule(code);
	      if (rule) {
	        var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
	        var suffix = rule.numbers[idx];
	        if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
	          if (suffix === 2) {
	            suffix = 'plural';
	          } else if (suffix === 1) {
	            suffix = '';
	          }
	        }
	        var returnSuffix = function returnSuffix() {
	          return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
	        };
	        if (this.options.compatibilityJSON === 'v1') {
	          if (suffix === 1) return '';
	          if (typeof suffix === 'number') return "_plural_".concat(suffix.toString());
	          return returnSuffix();
	        } else if (this.options.compatibilityJSON === 'v2') {
	          return returnSuffix();
	        } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
	          return returnSuffix();
	        }
	        return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
	      }
	      this.logger.warn("no plural rule found for: ".concat(code));
	      return '';
	    }
	  }]);
	  return PluralResolver;
	}();
	var Interpolator = function () {
	  function Interpolator() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    _classCallCheck(this, Interpolator);
	    this.logger = baseLogger.create('interpolator');
	    this.options = options;
	    this.format = options.interpolation && options.interpolation.format || function (value) {
	      return value;
	    };
	    this.init(options);
	  }
	  _createClass(Interpolator, [{
	    key: "init",
	    value: function init() {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      if (!options.interpolation) options.interpolation = {
	        escapeValue: true
	      };
	      var iOpts = options.interpolation;
	      this.escape = iOpts.escape !== undefined ? iOpts.escape : escape$2;
	      this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
	      this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
	      this.prefix = iOpts.prefix ? regexEscape$1(iOpts.prefix) : iOpts.prefixEscaped || '{{';
	      this.suffix = iOpts.suffix ? regexEscape$1(iOpts.suffix) : iOpts.suffixEscaped || '}}';
	      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
	      this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
	      this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
	      this.nestingPrefix = iOpts.nestingPrefix ? regexEscape$1(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape$1('$t(');
	      this.nestingSuffix = iOpts.nestingSuffix ? regexEscape$1(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape$1(')');
	      this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';
	      this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
	      this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;
	      this.resetRegExp();
	    }
	  }, {
	    key: "reset",
	    value: function reset() {
	      if (this.options) this.init(this.options);
	    }
	  }, {
	    key: "resetRegExp",
	    value: function resetRegExp() {
	      var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
	      this.regexp = new RegExp(regexpStr, 'g');
	      var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
	      this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
	      var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
	      this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
	    }
	  }, {
	    key: "interpolate",
	    value: function interpolate(str, data, lng, options) {
	      var _this = this;
	      var match;
	      var value;
	      var replaces;
	      var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
	      function regexSafe(val) {
	        return val.replace(/\$/g, '$$$$');
	      }
	      var handleFormat = function handleFormat(key) {
	        if (key.indexOf(_this.formatSeparator) < 0) {
	          var path = getPathWithDefaults(data, defaultData, key);
	          return _this.alwaysFormat ? _this.format(path, undefined, lng) : path;
	        }
	        var p = key.split(_this.formatSeparator);
	        var k = p.shift().trim();
	        var f = p.join(_this.formatSeparator).trim();
	        return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, options);
	      };
	      this.resetRegExp();
	      var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
	      var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
	      var todos = [{
	        regex: this.regexpUnescape,
	        safeValue: function safeValue(val) {
	          return regexSafe(val);
	        }
	      }, {
	        regex: this.regexp,
	        safeValue: function safeValue(val) {
	          return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
	        }
	      }];
	      todos.forEach(function (todo) {
	        replaces = 0;
	        while (match = todo.regex.exec(str)) {
	          value = handleFormat(match[1].trim());
	          if (value === undefined) {
	            if (typeof missingInterpolationHandler === 'function') {
	              var temp = missingInterpolationHandler(str, match, options);
	              value = typeof temp === 'string' ? temp : '';
	            } else if (skipOnVariables) {
	              value = match[0];
	              continue;
	            } else {
	              _this.logger.warn("missed to pass in variable ".concat(match[1], " for interpolating ").concat(str));
	              value = '';
	            }
	          } else if (typeof value !== 'string' && !_this.useRawValueToEscape) {
	            value = makeString(value);
	          }
	          str = str.replace(match[0], todo.safeValue(value));
	          todo.regex.lastIndex = 0;
	          replaces++;
	          if (replaces >= _this.maxReplaces) {
	            break;
	          }
	        }
	      });
	      return str;
	    }
	  }, {
	    key: "nest",
	    value: function nest(str, fc) {
	      var _this2 = this;
	      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	      var match;
	      var value;
	      var clonedOptions = _objectSpread({}, options);
	      clonedOptions.applyPostProcessor = false;
	      delete clonedOptions.defaultValue;
	      function handleHasOptions(key, inheritedOptions) {
	        var sep = this.nestingOptionsSeparator;
	        if (key.indexOf(sep) < 0) return key;
	        var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
	        var optionsString = "{".concat(c[1]);
	        key = c[0];
	        optionsString = this.interpolate(optionsString, clonedOptions);
	        optionsString = optionsString.replace(/'/g, '"');
	        try {
	          clonedOptions = JSON.parse(optionsString);
	          if (inheritedOptions) clonedOptions = _objectSpread({}, inheritedOptions, clonedOptions);
	        } catch (e) {
	          this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
	          return "".concat(key).concat(sep).concat(optionsString);
	        }
	        delete clonedOptions.defaultValue;
	        return key;
	      }
	      while (match = this.nestingRegexp.exec(str)) {
	        var formatters = [];
	        var doReduce = false;
	        if (match[0].includes(this.formatSeparator) && !/{.*}/.test(match[1])) {
	          var r = match[1].split(this.formatSeparator).map(function (elem) {
	            return elem.trim();
	          });
	          match[1] = r.shift();
	          formatters = r;
	          doReduce = true;
	        }
	        value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
	        if (value && match[0] === str && typeof value !== 'string') return value;
	        if (typeof value !== 'string') value = makeString(value);
	        if (!value) {
	          this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
	          value = '';
	        }
	        if (doReduce) {
	          value = formatters.reduce(function (v, f) {
	            return _this2.format(v, f, options.lng, options);
	          }, value.trim());
	        }
	        str = str.replace(match[0], value);
	        this.regexp.lastIndex = 0;
	      }
	      return str;
	    }
	  }]);
	  return Interpolator;
	}();
	function remove(arr, what) {
	  var found = arr.indexOf(what);
	  while (found !== -1) {
	    arr.splice(found, 1);
	    found = arr.indexOf(what);
	  }
	}
	var Connector = function (_EventEmitter) {
	  _inherits(Connector, _EventEmitter);
	  function Connector(backend, store, services) {
	    var _this;
	    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	    _classCallCheck(this, Connector);
	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Connector).call(this));
	    if (isIE10) {
	      EventEmitter.call(_assertThisInitialized(_this));
	    }
	    _this.backend = backend;
	    _this.store = store;
	    _this.services = services;
	    _this.languageUtils = services.languageUtils;
	    _this.options = options;
	    _this.logger = baseLogger.create('backendConnector');
	    _this.state = {};
	    _this.queue = [];
	    if (_this.backend && _this.backend.init) {
	      _this.backend.init(services, options.backend, options);
	    }
	    return _this;
	  }
	  _createClass(Connector, [{
	    key: "queueLoad",
	    value: function queueLoad(languages, namespaces, options, callback) {
	      var _this2 = this;
	      var toLoad = [];
	      var pending = [];
	      var toLoadLanguages = [];
	      var toLoadNamespaces = [];
	      languages.forEach(function (lng) {
	        var hasAllNamespaces = true;
	        namespaces.forEach(function (ns) {
	          var name = "".concat(lng, "|").concat(ns);
	          if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
	            _this2.state[name] = 2;
	          } else if (_this2.state[name] < 0) ;else if (_this2.state[name] === 1) {
	            if (pending.indexOf(name) < 0) pending.push(name);
	          } else {
	            _this2.state[name] = 1;
	            hasAllNamespaces = false;
	            if (pending.indexOf(name) < 0) pending.push(name);
	            if (toLoad.indexOf(name) < 0) toLoad.push(name);
	            if (toLoadNamespaces.indexOf(ns) < 0) toLoadNamespaces.push(ns);
	          }
	        });
	        if (!hasAllNamespaces) toLoadLanguages.push(lng);
	      });
	      if (toLoad.length || pending.length) {
	        this.queue.push({
	          pending: pending,
	          loaded: {},
	          errors: [],
	          callback: callback
	        });
	      }
	      return {
	        toLoad: toLoad,
	        pending: pending,
	        toLoadLanguages: toLoadLanguages,
	        toLoadNamespaces: toLoadNamespaces
	      };
	    }
	  }, {
	    key: "loaded",
	    value: function loaded(name, err, data) {
	      var s = name.split('|');
	      var lng = s[0];
	      var ns = s[1];
	      if (err) this.emit('failedLoading', lng, ns, err);
	      if (data) {
	        this.store.addResourceBundle(lng, ns, data);
	      }
	      this.state[name] = err ? -1 : 2;
	      var loaded = {};
	      this.queue.forEach(function (q) {
	        pushPath(q.loaded, [lng], ns);
	        remove(q.pending, name);
	        if (err) q.errors.push(err);
	        if (q.pending.length === 0 && !q.done) {
	          Object.keys(q.loaded).forEach(function (l) {
	            if (!loaded[l]) loaded[l] = [];
	            if (q.loaded[l].length) {
	              q.loaded[l].forEach(function (ns) {
	                if (loaded[l].indexOf(ns) < 0) loaded[l].push(ns);
	              });
	            }
	          });
	          q.done = true;
	          if (q.errors.length) {
	            q.callback(q.errors);
	          } else {
	            q.callback();
	          }
	        }
	      });
	      this.emit('loaded', loaded);
	      this.queue = this.queue.filter(function (q) {
	        return !q.done;
	      });
	    }
	  }, {
	    key: "read",
	    value: function read(lng, ns, fcName) {
	      var _this3 = this;
	      var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
	      var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 350;
	      var callback = arguments.length > 5 ? arguments[5] : undefined;
	      if (!lng.length) return callback(null, {});
	      return this.backend[fcName](lng, ns, function (err, data) {
	        if (err && data && tried < 5) {
	          setTimeout(function () {
	            _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
	          }, wait);
	          return;
	        }
	        callback(err, data);
	      });
	    }
	  }, {
	    key: "prepareLoading",
	    value: function prepareLoading(languages, namespaces) {
	      var _this4 = this;
	      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	      var callback = arguments.length > 3 ? arguments[3] : undefined;
	      if (!this.backend) {
	        this.logger.warn('No backend was added via i18next.use. Will not load resources.');
	        return callback && callback();
	      }
	      if (typeof languages === 'string') languages = this.languageUtils.toResolveHierarchy(languages);
	      if (typeof namespaces === 'string') namespaces = [namespaces];
	      var toLoad = this.queueLoad(languages, namespaces, options, callback);
	      if (!toLoad.toLoad.length) {
	        if (!toLoad.pending.length) callback();
	        return null;
	      }
	      toLoad.toLoad.forEach(function (name) {
	        _this4.loadOne(name);
	      });
	    }
	  }, {
	    key: "load",
	    value: function load(languages, namespaces, callback) {
	      this.prepareLoading(languages, namespaces, {}, callback);
	    }
	  }, {
	    key: "reload",
	    value: function reload(languages, namespaces, callback) {
	      this.prepareLoading(languages, namespaces, {
	        reload: true
	      }, callback);
	    }
	  }, {
	    key: "loadOne",
	    value: function loadOne(name) {
	      var _this5 = this;
	      var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	      var s = name.split('|');
	      var lng = s[0];
	      var ns = s[1];
	      this.read(lng, ns, 'read', undefined, undefined, function (err, data) {
	        if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
	        if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);
	        _this5.loaded(name, err, data);
	      });
	    }
	  }, {
	    key: "saveMissing",
	    value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
	      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
	      if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
	        this.logger.warn("did not save key \"".concat(key, "\" as the namespace \"").concat(namespace, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
	        return;
	      }
	      if (key === undefined || key === null || key === '') return;
	      if (this.backend && this.backend.create) {
	        this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread({}, options, {
	          isUpdate: isUpdate
	        }));
	      }
	      if (!languages || !languages[0]) return;
	      this.store.addResource(languages[0], namespace, key, fallbackValue);
	    }
	  }]);
	  return Connector;
	}(EventEmitter);
	function get$3() {
	  return {
	    debug: false,
	    initImmediate: true,
	    ns: ['translation'],
	    defaultNS: ['translation'],
	    fallbackLng: ['dev'],
	    fallbackNS: false,
	    whitelist: false,
	    nonExplicitWhitelist: false,
	    supportedLngs: false,
	    nonExplicitSupportedLngs: false,
	    load: 'all',
	    preload: false,
	    simplifyPluralSuffix: true,
	    keySeparator: '.',
	    nsSeparator: ':',
	    pluralSeparator: '_',
	    contextSeparator: '_',
	    partialBundledLanguages: false,
	    saveMissing: false,
	    updateMissing: false,
	    saveMissingTo: 'fallback',
	    saveMissingPlurals: true,
	    missingKeyHandler: false,
	    missingInterpolationHandler: false,
	    postProcess: false,
	    postProcessPassResolved: false,
	    returnNull: true,
	    returnEmptyString: true,
	    returnObjects: false,
	    joinArrays: false,
	    returnedObjectHandler: false,
	    parseMissingKeyHandler: false,
	    appendNamespaceToMissingKey: false,
	    appendNamespaceToCIMode: false,
	    overloadTranslationOptionHandler: function handle(args) {
	      var ret = {};
	      if (_typeof(args[1]) === 'object') ret = args[1];
	      if (typeof args[1] === 'string') ret.defaultValue = args[1];
	      if (typeof args[2] === 'string') ret.tDescription = args[2];
	      if (_typeof(args[2]) === 'object' || _typeof(args[3]) === 'object') {
	        var options = args[3] || args[2];
	        Object.keys(options).forEach(function (key) {
	          ret[key] = options[key];
	        });
	      }
	      return ret;
	    },
	    interpolation: {
	      escapeValue: true,
	      format: function format(value, _format, lng, options) {
	        return value;
	      },
	      prefix: '{{',
	      suffix: '}}',
	      formatSeparator: ',',
	      unescapePrefix: '-',
	      nestingPrefix: '$t(',
	      nestingSuffix: ')',
	      nestingOptionsSeparator: ',',
	      maxReplaces: 1000,
	      skipOnVariables: false
	    }
	  };
	}
	function transformOptions(options) {
	  if (typeof options.ns === 'string') options.ns = [options.ns];
	  if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];
	  if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS];
	  if (options.whitelist) {
	    if (options.whitelist && options.whitelist.indexOf('cimode') < 0) {
	      options.whitelist = options.whitelist.concat(['cimode']);
	    }
	    options.supportedLngs = options.whitelist;
	  }
	  if (options.nonExplicitWhitelist) {
	    options.nonExplicitSupportedLngs = options.nonExplicitWhitelist;
	  }
	  if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
	    options.supportedLngs = options.supportedLngs.concat(['cimode']);
	  }
	  return options;
	}
	function noop$2() {}
	var I18n = function (_EventEmitter) {
	  _inherits(I18n, _EventEmitter);
	  function I18n() {
	    var _this;
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var callback = arguments.length > 1 ? arguments[1] : undefined;
	    _classCallCheck(this, I18n);
	    _this = _possibleConstructorReturn(this, _getPrototypeOf(I18n).call(this));
	    if (isIE10) {
	      EventEmitter.call(_assertThisInitialized(_this));
	    }
	    _this.options = transformOptions(options);
	    _this.services = {};
	    _this.logger = baseLogger;
	    _this.modules = {
	      external: []
	    };
	    if (callback && !_this.isInitialized && !options.isClone) {
	      if (!_this.options.initImmediate) {
	        _this.init(options, callback);
	        return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
	      }
	      setTimeout(function () {
	        _this.init(options, callback);
	      }, 0);
	    }
	    return _this;
	  }
	  _createClass(I18n, [{
	    key: "init",
	    value: function init() {
	      var _this2 = this;
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var callback = arguments.length > 1 ? arguments[1] : undefined;
	      if (typeof options === 'function') {
	        callback = options;
	        options = {};
	      }
	      if (options.whitelist && !options.supportedLngs) {
	        this.logger.deprecate('whitelist', 'option "whitelist" will be renamed to "supportedLngs" in the next major - please make sure to rename this option asap.');
	      }
	      if (options.nonExplicitWhitelist && !options.nonExplicitSupportedLngs) {
	        this.logger.deprecate('whitelist', 'options "nonExplicitWhitelist" will be renamed to "nonExplicitSupportedLngs" in the next major - please make sure to rename this option asap.');
	      }
	      this.options = _objectSpread({}, get$3(), this.options, transformOptions(options));
	      this.format = this.options.interpolation.format;
	      if (!callback) callback = noop$2;
	      function createClassOnDemand(ClassOrObject) {
	        if (!ClassOrObject) return null;
	        if (typeof ClassOrObject === 'function') return new ClassOrObject();
	        return ClassOrObject;
	      }
	      if (!this.options.isClone) {
	        if (this.modules.logger) {
	          baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
	        } else {
	          baseLogger.init(null, this.options);
	        }
	        var lu = new LanguageUtil(this.options);
	        this.store = new ResourceStore(this.options.resources, this.options);
	        var s = this.services;
	        s.logger = baseLogger;
	        s.resourceStore = this.store;
	        s.languageUtils = lu;
	        s.pluralResolver = new PluralResolver(lu, {
	          prepend: this.options.pluralSeparator,
	          compatibilityJSON: this.options.compatibilityJSON,
	          simplifyPluralSuffix: this.options.simplifyPluralSuffix
	        });
	        s.interpolator = new Interpolator(this.options);
	        s.utils = {
	          hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
	        };
	        s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
	        s.backendConnector.on('*', function (event) {
	          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	            args[_key - 1] = arguments[_key];
	          }
	          _this2.emit.apply(_this2, [event].concat(args));
	        });
	        if (this.modules.languageDetector) {
	          s.languageDetector = createClassOnDemand(this.modules.languageDetector);
	          s.languageDetector.init(s, this.options.detection, this.options);
	        }
	        if (this.modules.i18nFormat) {
	          s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
	          if (s.i18nFormat.init) s.i18nFormat.init(this);
	        }
	        this.translator = new Translator(this.services, this.options);
	        this.translator.on('*', function (event) {
	          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	            args[_key2 - 1] = arguments[_key2];
	          }
	          _this2.emit.apply(_this2, [event].concat(args));
	        });
	        this.modules.external.forEach(function (m) {
	          if (m.init) m.init(_this2);
	        });
	      }
	      if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
	        var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
	        if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
	      }
	      if (!this.services.languageDetector && !this.options.lng) {
	        this.logger.warn('init: no languageDetector is used and no lng is defined');
	      }
	      var storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
	      storeApi.forEach(function (fcName) {
	        _this2[fcName] = function () {
	          var _this2$store;
	          return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
	        };
	      });
	      var storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
	      storeApiChained.forEach(function (fcName) {
	        _this2[fcName] = function () {
	          var _this2$store2;
	          (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);
	          return _this2;
	        };
	      });
	      var deferred = defer();
	      var load = function load() {
	        var finish = function finish(err, t) {
	          if (_this2.isInitialized) _this2.logger.warn('init: i18next is already initialized. You should call init just once!');
	          _this2.isInitialized = true;
	          if (!_this2.options.isClone) _this2.logger.log('initialized', _this2.options);
	          _this2.emit('initialized', _this2.options);
	          deferred.resolve(t);
	          callback(err, t);
	        };
	        if (_this2.languages && _this2.options.compatibilityAPI !== 'v1' && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));
	        _this2.changeLanguage(_this2.options.lng, finish);
	      };
	      if (this.options.resources || !this.options.initImmediate) {
	        load();
	      } else {
	        setTimeout(load, 0);
	      }
	      return deferred;
	    }
	  }, {
	    key: "loadResources",
	    value: function loadResources(language) {
	      var _this3 = this;
	      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$2;
	      var usedCallback = callback;
	      var usedLng = typeof language === 'string' ? language : this.language;
	      if (typeof language === 'function') usedCallback = language;
	      if (!this.options.resources || this.options.partialBundledLanguages) {
	        if (usedLng && usedLng.toLowerCase() === 'cimode') return usedCallback();
	        var toLoad = [];
	        var append = function append(lng) {
	          if (!lng) return;
	          var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
	          lngs.forEach(function (l) {
	            if (toLoad.indexOf(l) < 0) toLoad.push(l);
	          });
	        };
	        if (!usedLng) {
	          var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
	          fallbacks.forEach(function (l) {
	            return append(l);
	          });
	        } else {
	          append(usedLng);
	        }
	        if (this.options.preload) {
	          this.options.preload.forEach(function (l) {
	            return append(l);
	          });
	        }
	        this.services.backendConnector.load(toLoad, this.options.ns, usedCallback);
	      } else {
	        usedCallback(null);
	      }
	    }
	  }, {
	    key: "reloadResources",
	    value: function reloadResources(lngs, ns, callback) {
	      var deferred = defer();
	      if (!lngs) lngs = this.languages;
	      if (!ns) ns = this.options.ns;
	      if (!callback) callback = noop$2;
	      this.services.backendConnector.reload(lngs, ns, function (err) {
	        deferred.resolve();
	        callback(err);
	      });
	      return deferred;
	    }
	  }, {
	    key: "use",
	    value: function use(module) {
	      if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
	      if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');
	      if (module.type === 'backend') {
	        this.modules.backend = module;
	      }
	      if (module.type === 'logger' || module.log && module.warn && module.error) {
	        this.modules.logger = module;
	      }
	      if (module.type === 'languageDetector') {
	        this.modules.languageDetector = module;
	      }
	      if (module.type === 'i18nFormat') {
	        this.modules.i18nFormat = module;
	      }
	      if (module.type === 'postProcessor') {
	        postProcessor.addPostProcessor(module);
	      }
	      if (module.type === '3rdParty') {
	        this.modules.external.push(module);
	      }
	      return this;
	    }
	  }, {
	    key: "changeLanguage",
	    value: function changeLanguage(lng, callback) {
	      var _this4 = this;
	      this.isLanguageChangingTo = lng;
	      var deferred = defer();
	      this.emit('languageChanging', lng);
	      var done = function done(err, l) {
	        if (l) {
	          _this4.language = l;
	          _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
	          _this4.translator.changeLanguage(l);
	          _this4.isLanguageChangingTo = undefined;
	          _this4.emit('languageChanged', l);
	          _this4.logger.log('languageChanged', l);
	        } else {
	          _this4.isLanguageChangingTo = undefined;
	        }
	        deferred.resolve(function () {
	          return _this4.t.apply(_this4, arguments);
	        });
	        if (callback) callback(err, function () {
	          return _this4.t.apply(_this4, arguments);
	        });
	      };
	      var setLng = function setLng(lngs) {
	        var l = typeof lngs === 'string' ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);
	        if (l) {
	          if (!_this4.language) {
	            _this4.language = l;
	            _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
	          }
	          if (!_this4.translator.language) _this4.translator.changeLanguage(l);
	          if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);
	        }
	        _this4.loadResources(l, function (err) {
	          done(err, l);
	        });
	      };
	      if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
	        setLng(this.services.languageDetector.detect());
	      } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
	        this.services.languageDetector.detect(setLng);
	      } else {
	        setLng(lng);
	      }
	      return deferred;
	    }
	  }, {
	    key: "getFixedT",
	    value: function getFixedT(lng, ns) {
	      var _this5 = this;
	      var fixedT = function fixedT(key, opts) {
	        var options;
	        if (_typeof(opts) !== 'object') {
	          for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
	            rest[_key3 - 2] = arguments[_key3];
	          }
	          options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
	        } else {
	          options = _objectSpread({}, opts);
	        }
	        options.lng = options.lng || fixedT.lng;
	        options.lngs = options.lngs || fixedT.lngs;
	        options.ns = options.ns || fixedT.ns;
	        return _this5.t(key, options);
	      };
	      if (typeof lng === 'string') {
	        fixedT.lng = lng;
	      } else {
	        fixedT.lngs = lng;
	      }
	      fixedT.ns = ns;
	      return fixedT;
	    }
	  }, {
	    key: "t",
	    value: function t() {
	      var _this$translator;
	      return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
	    }
	  }, {
	    key: "exists",
	    value: function exists() {
	      var _this$translator2;
	      return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
	    }
	  }, {
	    key: "setDefaultNamespace",
	    value: function setDefaultNamespace(ns) {
	      this.options.defaultNS = ns;
	    }
	  }, {
	    key: "hasLoadedNamespace",
	    value: function hasLoadedNamespace(ns) {
	      var _this6 = this;
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      if (!this.isInitialized) {
	        this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
	        return false;
	      }
	      if (!this.languages || !this.languages.length) {
	        this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
	        return false;
	      }
	      var lng = this.languages[0];
	      var fallbackLng = this.options ? this.options.fallbackLng : false;
	      var lastLng = this.languages[this.languages.length - 1];
	      if (lng.toLowerCase() === 'cimode') return true;
	      var loadNotPending = function loadNotPending(l, n) {
	        var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];
	        return loadState === -1 || loadState === 2;
	      };
	      if (options.precheck) {
	        var preResult = options.precheck(this, loadNotPending);
	        if (preResult !== undefined) return preResult;
	      }
	      if (this.hasResourceBundle(lng, ns)) return true;
	      if (!this.services.backendConnector.backend) return true;
	      if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
	      return false;
	    }
	  }, {
	    key: "loadNamespaces",
	    value: function loadNamespaces(ns, callback) {
	      var _this7 = this;
	      var deferred = defer();
	      if (!this.options.ns) {
	        callback && callback();
	        return Promise.resolve();
	      }
	      if (typeof ns === 'string') ns = [ns];
	      ns.forEach(function (n) {
	        if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
	      });
	      this.loadResources(function (err) {
	        deferred.resolve();
	        if (callback) callback(err);
	      });
	      return deferred;
	    }
	  }, {
	    key: "loadLanguages",
	    value: function loadLanguages(lngs, callback) {
	      var deferred = defer();
	      if (typeof lngs === 'string') lngs = [lngs];
	      var preloaded = this.options.preload || [];
	      var newLngs = lngs.filter(function (lng) {
	        return preloaded.indexOf(lng) < 0;
	      });
	      if (!newLngs.length) {
	        if (callback) callback();
	        return Promise.resolve();
	      }
	      this.options.preload = preloaded.concat(newLngs);
	      this.loadResources(function (err) {
	        deferred.resolve();
	        if (callback) callback(err);
	      });
	      return deferred;
	    }
	  }, {
	    key: "dir",
	    value: function dir(lng) {
	      if (!lng) lng = this.languages && this.languages.length > 0 ? this.languages[0] : this.language;
	      if (!lng) return 'rtl';
	      var rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam'];
	      return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0 ? 'rtl' : 'ltr';
	    }
	  }, {
	    key: "createInstance",
	    value: function createInstance() {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var callback = arguments.length > 1 ? arguments[1] : undefined;
	      return new I18n(options, callback);
	    }
	  }, {
	    key: "cloneInstance",
	    value: function cloneInstance() {
	      var _this8 = this;
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$2;
	      var mergedOptions = _objectSpread({}, this.options, options, {
	        isClone: true
	      });
	      var clone = new I18n(mergedOptions);
	      var membersToCopy = ['store', 'services', 'language'];
	      membersToCopy.forEach(function (m) {
	        clone[m] = _this8[m];
	      });
	      clone.services = _objectSpread({}, this.services);
	      clone.services.utils = {
	        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
	      };
	      clone.translator = new Translator(clone.services, clone.options);
	      clone.translator.on('*', function (event) {
	        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
	          args[_key4 - 1] = arguments[_key4];
	        }
	        clone.emit.apply(clone, [event].concat(args));
	      });
	      clone.init(mergedOptions, callback);
	      clone.translator.options = clone.options;
	      clone.translator.backendConnector.services.utils = {
	        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
	      };
	      return clone;
	    }
	  }]);
	  return I18n;
	}(EventEmitter);
	var i18next = new I18n();

	var _a;
	var BOARD_FILE_IMG_PREFIX = 'resources/image/dashboard/';
	var MIN_MARGIN = 8;
	var MIN_PADDING = 8;
	var LAYOUT_COLS_MAP = {
	    lg: 12,
	    md: 12,
	    sm: 12,
	    xs: 6,
	    xxs: 6,
	};
	var ORIGINAL_TYPE_MAP = {
	    group: 'group',
	    linkedChart: 'linkedChart',
	    ownedChart: 'ownedChart',
	    tab: 'tab',
	    card: 'card',
	    carousel: 'carousel',
	    image: 'image',
	    video: 'video',
	    timer: 'timer',
	    richText: 'richText',
	    iframe: 'iframe',
	    queryBtn: 'queryBtn',
	    resetBtn: 'resetBtn',
	    dropdownList: ControllerFacadeTypes.DropdownList,
	    multiDropdownList: ControllerFacadeTypes.MultiDropdownList,
	    checkboxGroup: ControllerFacadeTypes.CheckboxGroup,
	    radioGroup: ControllerFacadeTypes.RadioGroup,
	    text: ControllerFacadeTypes.Text,
	    time: ControllerFacadeTypes.Time,
	    rangeTime: ControllerFacadeTypes.RangeTime,
	    rangeValue: ControllerFacadeTypes.RangeValue,
	    value: ControllerFacadeTypes.Value,
	    slider: ControllerFacadeTypes.Slider,
	    dropDownTree: ControllerFacadeTypes.DropDownTree,
	    // custom: 'custom', TODO:
	};
	var BackgroundDefault = {
	    color: 'transparent',
	    image: '',
	    size: '100% 100%',
	    repeat: 'no-repeat', //'repeat' | 'repeat-x' | 'repeat-y' | 'no-repeat',
	};
	var AutoBoardWidgetBackgroundDefault = _assign(_assign({}, BackgroundDefault), { color: WHITE });
	_assign(_assign({}, BackgroundDefault), { color: PRIMARY });
	var TimeDefault = {
	    format: TIME_FORMATTER,
	    duration: 1000,
	};
	var BorderDefault = {
	    radius: 1,
	    width: 1,
	    style: 'solid',
	    color: 'transparent',
	};
	_assign(_assign({}, BorderDefault), { width: 0 });
	var ValueOptionTypes;
	(function (ValueOptionTypes) {
	    ValueOptionTypes["Common"] = "common";
	    ValueOptionTypes["Custom"] = "custom";
	})(ValueOptionTypes || (ValueOptionTypes = {}));
	var ControllerVisibleTypes;
	(function (ControllerVisibleTypes) {
	    ControllerVisibleTypes["Show"] = "show";
	    ControllerVisibleTypes["Hide"] = "hide";
	    ControllerVisibleTypes["Condition"] = "condition";
	})(ControllerVisibleTypes || (ControllerVisibleTypes = {}));
	var tfo = function (operator) {
	    var preStr = 'viz.common.enum.filterOperator.';
	    return i18next.t(preStr + operator);
	};
	var tft = function (type) {
	    var preStr = 'viz.common.enum.controllerVisibilityTypes.';
	    return i18next.t(preStr + type);
	};
	var getVisibleOptionItem = function (type) {
	    return {
	        name: tft(type),
	        value: type,
	    };
	};
	var getOperatorItem = function (value) {
	    return {
	        name: tfo(value),
	        value: value,
	    };
	};
	[
	    getVisibleOptionItem(ControllerVisibleTypes.Show),
	    getVisibleOptionItem(ControllerVisibleTypes.Hide),
	    getVisibleOptionItem(ControllerVisibleTypes.Condition),
	];
	[
	    getOperatorItem(FilterSqlOperator.Equal),
	    getOperatorItem(FilterSqlOperator.NotEqual),
	    getOperatorItem(FilterSqlOperator.In),
	    getOperatorItem(FilterSqlOperator.NotIn),
	    getOperatorItem(FilterSqlOperator.Null),
	    getOperatorItem(FilterSqlOperator.NotNull),
	    getOperatorItem(FilterSqlOperator.Contain),
	    getOperatorItem(FilterSqlOperator.NotContain),
	    getOperatorItem(FilterSqlOperator.PrefixContain),
	    getOperatorItem(FilterSqlOperator.NotPrefixContain),
	    getOperatorItem(FilterSqlOperator.SuffixContain),
	    getOperatorItem(FilterSqlOperator.NotSuffixContain),
	    getOperatorItem(FilterSqlOperator.Between),
	    getOperatorItem(FilterSqlOperator.GreaterThanOrEqual),
	    getOperatorItem(FilterSqlOperator.LessThanOrEqual),
	    getOperatorItem(FilterSqlOperator.GreaterThan),
	    getOperatorItem(FilterSqlOperator.LessThan),
	];
	(_a = {},
	    _a[ControllerFacadeTypes.DropdownList] = [
	        FilterSqlOperator.Equal,
	        FilterSqlOperator.NotEqual,
	    ],
	    _a[ControllerFacadeTypes.MultiDropdownList] = [
	        FilterSqlOperator.In,
	        FilterSqlOperator.NotIn,
	    ],
	    _a[ControllerFacadeTypes.CheckboxGroup] = [
	        FilterSqlOperator.In,
	        FilterSqlOperator.NotIn,
	    ],
	    _a[ControllerFacadeTypes.RadioGroup] = [
	        FilterSqlOperator.Equal,
	        FilterSqlOperator.NotEqual,
	    ],
	    _a[ControllerFacadeTypes.Text] = [
	        FilterSqlOperator.Equal,
	        FilterSqlOperator.NotEqual,
	        FilterSqlOperator.Contain,
	        FilterSqlOperator.NotContain,
	        FilterSqlOperator.PrefixContain,
	        FilterSqlOperator.NotPrefixContain,
	        FilterSqlOperator.SuffixContain,
	        FilterSqlOperator.NotSuffixContain,
	    ],
	    _a[ControllerFacadeTypes.Value] = [
	        FilterSqlOperator.Equal,
	        FilterSqlOperator.NotEqual,
	        FilterSqlOperator.LessThan,
	        FilterSqlOperator.GreaterThan,
	        FilterSqlOperator.LessThanOrEqual,
	        FilterSqlOperator.GreaterThanOrEqual,
	    ],
	    _a[ControllerFacadeTypes.Time] = [
	        FilterSqlOperator.Equal,
	        FilterSqlOperator.NotEqual,
	        FilterSqlOperator.LessThan,
	        FilterSqlOperator.GreaterThan,
	        FilterSqlOperator.LessThanOrEqual,
	        FilterSqlOperator.GreaterThanOrEqual,
	    ],
	    _a[ControllerFacadeTypes.Slider] = [
	        FilterSqlOperator.Equal,
	        FilterSqlOperator.NotEqual,
	        FilterSqlOperator.LessThan,
	        FilterSqlOperator.GreaterThan,
	        FilterSqlOperator.LessThanOrEqual,
	        FilterSqlOperator.GreaterThanOrEqual,
	    ],
	    _a[ControllerFacadeTypes.DropDownTree] = [
	        FilterSqlOperator.In,
	        FilterSqlOperator.NotIn,
	    ],
	    _a);

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function getInitialLocale() {
	    var storedLocale = localStorage.getItem(StorageKeys.Locale);
	    if (!storedLocale) {
	        var browserLocale = ['zh', 'zh-CN'].includes(navigator.language) // FIXME locale
	            ? 'zh'
	            : 'en';
	        localStorage.setItem(StorageKeys.Locale, browserLocale);
	        return browserLocale;
	    }
	    else {
	        return storedLocale;
	    }
	}

	var react = {exports: {}};

	var react_production_min = {};

	var l$1 = Symbol["for"]("react.element"),
	  n$1 = Symbol["for"]("react.portal"),
	  p$1 = Symbol["for"]("react.fragment"),
	  q$1 = Symbol["for"]("react.strict_mode"),
	  r = Symbol["for"]("react.profiler"),
	  t = Symbol["for"]("react.provider"),
	  u = Symbol["for"]("react.context"),
	  v = Symbol["for"]("react.forward_ref"),
	  w = Symbol["for"]("react.suspense"),
	  x = Symbol["for"]("react.memo"),
	  y = Symbol["for"]("react.lazy"),
	  z = Symbol.iterator;
	function A(a) {
	  if (null === a || "object" !== _typeof$1(a)) return null;
	  a = z && a[z] || a["@@iterator"];
	  return "function" === typeof a ? a : null;
	}
	var B = {
	    isMounted: function isMounted() {
	      return !1;
	    },
	    enqueueForceUpdate: function enqueueForceUpdate() {},
	    enqueueReplaceState: function enqueueReplaceState() {},
	    enqueueSetState: function enqueueSetState() {}
	  },
	  C = Object.assign,
	  D = {};
	function E(a, b, e) {
	  this.props = a;
	  this.context = b;
	  this.refs = D;
	  this.updater = e || B;
	}
	E.prototype.isReactComponent = {};
	E.prototype.setState = function (a, b) {
	  if ("object" !== _typeof$1(a) && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
	  this.updater.enqueueSetState(this, a, b, "setState");
	};
	E.prototype.forceUpdate = function (a) {
	  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
	};
	function F() {}
	F.prototype = E.prototype;
	function G(a, b, e) {
	  this.props = a;
	  this.context = b;
	  this.refs = D;
	  this.updater = e || B;
	}
	var H = G.prototype = new F();
	H.constructor = G;
	C(H, E.prototype);
	H.isPureReactComponent = !0;
	var I = Array.isArray,
	  J = Object.prototype.hasOwnProperty,
	  K = {
	    current: null
	  },
	  L = {
	    key: !0,
	    ref: !0,
	    __self: !0,
	    __source: !0
	  };
	function M(a, b, e) {
	  var d,
	    c = {},
	    k = null,
	    h = null;
	  if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
	  var g = arguments.length - 2;
	  if (1 === g) c.children = e;else if (1 < g) {
	    for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
	    c.children = f;
	  }
	  if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);
	  return {
	    $$typeof: l$1,
	    type: a,
	    key: k,
	    ref: h,
	    props: c,
	    _owner: K.current
	  };
	}
	function N(a, b) {
	  return {
	    $$typeof: l$1,
	    type: a.type,
	    key: b,
	    ref: a.ref,
	    props: a.props,
	    _owner: a._owner
	  };
	}
	function O(a) {
	  return "object" === _typeof$1(a) && null !== a && a.$$typeof === l$1;
	}
	function escape$1(a) {
	  var b = {
	    "=": "=0",
	    ":": "=2"
	  };
	  return "$" + a.replace(/[=:]/g, function (a) {
	    return b[a];
	  });
	}
	var P = /\/+/g;
	function Q(a, b) {
	  return "object" === _typeof$1(a) && null !== a && null != a.key ? escape$1("" + a.key) : b.toString(36);
	}
	function R(a, b, e, d, c) {
	  var k = _typeof$1(a);
	  if ("undefined" === k || "boolean" === k) a = null;
	  var h = !1;
	  if (null === a) h = !0;else switch (k) {
	    case "string":
	    case "number":
	      h = !0;
	      break;
	    case "object":
	      switch (a.$$typeof) {
	        case l$1:
	        case n$1:
	          h = !0;
	      }
	  }
	  if (h) return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function (a) {
	    return a;
	  })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;
	  h = 0;
	  d = "" === d ? "." : d + ":";
	  if (I(a)) for (var g = 0; g < a.length; g++) {
	    k = a[g];
	    var f = d + Q(k, g);
	    h += R(k, b, e, f, c);
	  } else if (f = A(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
	  return h;
	}
	function S(a, b, e) {
	  if (null == a) return a;
	  var d = [],
	    c = 0;
	  R(a, d, "", "", function (a) {
	    return b.call(e, a, c++);
	  });
	  return d;
	}
	function T(a) {
	  if (-1 === a._status) {
	    var b = a._result;
	    b = b();
	    b.then(function (b) {
	      if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
	    }, function (b) {
	      if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
	    });
	    -1 === a._status && (a._status = 0, a._result = b);
	  }
	  if (1 === a._status) return a._result["default"];
	  throw a._result;
	}
	var U = {
	    current: null
	  },
	  V = {
	    transition: null
	  },
	  W = {
	    ReactCurrentDispatcher: U,
	    ReactCurrentBatchConfig: V,
	    ReactCurrentOwner: K
	  };
	react_production_min.Children = {
	  map: S,
	  forEach: function forEach(a, b, e) {
	    S(a, function () {
	      b.apply(this, arguments);
	    }, e);
	  },
	  count: function count(a) {
	    var b = 0;
	    S(a, function () {
	      b++;
	    });
	    return b;
	  },
	  toArray: function toArray(a) {
	    return S(a, function (a) {
	      return a;
	    }) || [];
	  },
	  only: function only(a) {
	    if (!O(a)) throw Error("React.Children.only expected to receive a single React element child.");
	    return a;
	  }
	};
	react_production_min.Component = E;
	react_production_min.Fragment = p$1;
	react_production_min.Profiler = r;
	react_production_min.PureComponent = G;
	react_production_min.StrictMode = q$1;
	react_production_min.Suspense = w;
	react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
	react_production_min.cloneElement = function (a, b, e) {
	  if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
	  var d = C({}, a.props),
	    c = a.key,
	    k = a.ref,
	    h = a._owner;
	  if (null != b) {
	    void 0 !== b.ref && (k = b.ref, h = K.current);
	    void 0 !== b.key && (c = "" + b.key);
	    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
	    for (f in b) J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
	  }
	  var f = arguments.length - 2;
	  if (1 === f) d.children = e;else if (1 < f) {
	    g = Array(f);
	    for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
	    d.children = g;
	  }
	  return {
	    $$typeof: l$1,
	    type: a.type,
	    key: c,
	    ref: k,
	    props: d,
	    _owner: h
	  };
	};
	react_production_min.createContext = function (a) {
	  a = {
	    $$typeof: u,
	    _currentValue: a,
	    _currentValue2: a,
	    _threadCount: 0,
	    Provider: null,
	    Consumer: null,
	    _defaultValue: null,
	    _globalName: null
	  };
	  a.Provider = {
	    $$typeof: t,
	    _context: a
	  };
	  return a.Consumer = a;
	};
	react_production_min.createElement = M;
	react_production_min.createFactory = function (a) {
	  var b = M.bind(null, a);
	  b.type = a;
	  return b;
	};
	react_production_min.createRef = function () {
	  return {
	    current: null
	  };
	};
	react_production_min.forwardRef = function (a) {
	  return {
	    $$typeof: v,
	    render: a
	  };
	};
	react_production_min.isValidElement = O;
	react_production_min.lazy = function (a) {
	  return {
	    $$typeof: y,
	    _payload: {
	      _status: -1,
	      _result: a
	    },
	    _init: T
	  };
	};
	react_production_min.memo = function (a, b) {
	  return {
	    $$typeof: x,
	    type: a,
	    compare: void 0 === b ? null : b
	  };
	};
	react_production_min.startTransition = function (a) {
	  var b = V.transition;
	  V.transition = {};
	  try {
	    a();
	  } finally {
	    V.transition = b;
	  }
	};
	react_production_min.unstable_act = function () {
	  throw Error("act(...) is not supported in production builds of React.");
	};
	react_production_min.useCallback = function (a, b) {
	  return U.current.useCallback(a, b);
	};
	react_production_min.useContext = function (a) {
	  return U.current.useContext(a);
	};
	react_production_min.useDebugValue = function () {};
	react_production_min.useDeferredValue = function (a) {
	  return U.current.useDeferredValue(a);
	};
	react_production_min.useEffect = function (a, b) {
	  return U.current.useEffect(a, b);
	};
	react_production_min.useId = function () {
	  return U.current.useId();
	};
	react_production_min.useImperativeHandle = function (a, b, e) {
	  return U.current.useImperativeHandle(a, b, e);
	};
	react_production_min.useInsertionEffect = function (a, b) {
	  return U.current.useInsertionEffect(a, b);
	};
	react_production_min.useLayoutEffect = function (a, b) {
	  return U.current.useLayoutEffect(a, b);
	};
	react_production_min.useMemo = function (a, b) {
	  return U.current.useMemo(a, b);
	};
	react_production_min.useReducer = function (a, b, e) {
	  return U.current.useReducer(a, b, e);
	};
	react_production_min.useRef = function (a) {
	  return U.current.useRef(a);
	};
	react_production_min.useState = function (a) {
	  return U.current.useState(a);
	};
	react_production_min.useSyncExternalStore = function (a, b, e) {
	  return U.current.useSyncExternalStore(a, b, e);
	};
	react_production_min.useTransition = function () {
	  return U.current.useTransition();
	};
	react_production_min.version = "18.2.0";

	{
	  react.exports = react_production_min;
	}
	var reactExports = react.exports;
	getDefaultExportFromCjs(reactExports);

	var classnames = {exports: {}};

	(function (module) {
	  (function () {

	    var hasOwn = {}.hasOwnProperty;
	    function classNames() {
	      var classes = [];
	      for (var i = 0; i < arguments.length; i++) {
	        var arg = arguments[i];
	        if (!arg) continue;
	        var argType = _typeof$1(arg);
	        if (argType === 'string' || argType === 'number') {
	          classes.push(arg);
	        } else if (Array.isArray(arg)) {
	          if (arg.length) {
	            var inner = classNames.apply(null, arg);
	            if (inner) {
	              classes.push(inner);
	            }
	          }
	        } else if (argType === 'object') {
	          if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
	            classes.push(arg.toString());
	            continue;
	          }
	          for (var key in arg) {
	            if (hasOwn.call(arg, key) && arg[key]) {
	              classes.push(key);
	            }
	          }
	        }
	      }
	      return classes.join(' ');
	    }
	    if (module.exports) {
	      classNames["default"] = classNames;
	      module.exports = classNames;
	    } else {
	      window.classNames = classNames;
	    }
	  })();
	})(classnames);
	var classnamesExports = classnames.exports;
	getDefaultExportFromCjs(classnamesExports);

	var js_cookie = {exports: {}};

	(function (module, exports) {
	  (function (factory) {
	    var registeredInModuleLoader;
	    {
	      module.exports = factory();
	      registeredInModuleLoader = true;
	    }
	    if (!registeredInModuleLoader) {
	      var OldCookies = window.Cookies;
	      var api = window.Cookies = factory();
	      api.noConflict = function () {
	        window.Cookies = OldCookies;
	        return api;
	      };
	    }
	  })(function () {
	    function extend() {
	      var i = 0;
	      var result = {};
	      for (; i < arguments.length; i++) {
	        var attributes = arguments[i];
	        for (var key in attributes) {
	          result[key] = attributes[key];
	        }
	      }
	      return result;
	    }
	    function decode(s) {
	      return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	    }
	    function init(converter) {
	      function api() {}
	      function set(key, value, attributes) {
	        if (typeof document === 'undefined') {
	          return;
	        }
	        attributes = extend({
	          path: '/'
	        }, api.defaults, attributes);
	        if (typeof attributes.expires === 'number') {
	          attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
	        }
	        attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';
	        try {
	          var result = JSON.stringify(value);
	          if (/^[\{\[]/.test(result)) {
	            value = result;
	          }
	        } catch (e) {}
	        value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
	        key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
	        var stringifiedAttributes = '';
	        for (var attributeName in attributes) {
	          if (!attributes[attributeName]) {
	            continue;
	          }
	          stringifiedAttributes += '; ' + attributeName;
	          if (attributes[attributeName] === true) {
	            continue;
	          }
	          stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
	        }
	        return document.cookie = key + '=' + value + stringifiedAttributes;
	      }
	      function get(key, json) {
	        if (typeof document === 'undefined') {
	          return;
	        }
	        var jar = {};
	        var cookies = document.cookie ? document.cookie.split('; ') : [];
	        var i = 0;
	        for (; i < cookies.length; i++) {
	          var parts = cookies[i].split('=');
	          var cookie = parts.slice(1).join('=');
	          if (!json && cookie.charAt(0) === '"') {
	            cookie = cookie.slice(1, -1);
	          }
	          try {
	            var name = decode(parts[0]);
	            cookie = (converter.read || converter)(cookie, name) || decode(cookie);
	            if (json) {
	              try {
	                cookie = JSON.parse(cookie);
	              } catch (e) {}
	            }
	            jar[name] = cookie;
	            if (key === name) {
	              break;
	            }
	          } catch (e) {}
	        }
	        return key ? jar[key] : jar;
	      }
	      api.set = set;
	      api.get = function (key) {
	        return get(key, false);
	      };
	      api.getJSON = function (key) {
	        return get(key, true);
	      };
	      api.remove = function (key, attributes) {
	        set(key, '', extend(attributes, {
	          expires: -1
	        }));
	      };
	      api.defaults = {};
	      api.withConverter = init;
	      return api;
	    }
	    return init(function () {});
	  });
	})(js_cookie);
	var js_cookieExports = js_cookie.exports;
	getDefaultExportFromCjs(js_cookieExports);

	var crypto$1 = {};

	var rnds8Pool = new Uint8Array(256);
	var poolPtr = rnds8Pool.length;
	function rng() {
	  if (poolPtr > rnds8Pool.length - 16) {
	    crypto$1.randomFillSync(rnds8Pool);
	    poolPtr = 0;
	  }
	  return rnds8Pool.slice(poolPtr, poolPtr += 16);
	}

	var byteToHex = [];
	for (var i = 0; i < 256; ++i) {
	  byteToHex.push((i + 0x100).toString(16).slice(1));
	}
	function unsafeStringify(arr) {
	  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
	}

	var _native = {
	  randomUUID: crypto$1.randomUUID
	};

	function v4(options, buf, offset) {
	  if (_native.randomUUID && !buf && !options) {
	    return _native.randomUUID();
	  }
	  options = options || {};
	  var rnds = options.random || (options.rng || rng)();
	  rnds[6] = rnds[6] & 0x0f | 0x40;
	  rnds[8] = rnds[8] & 0x3f | 0x80;
	  if (buf) {
	    offset = offset || 0;
	    for (var i = 0; i < 16; ++i) {
	      buf[offset + i] = rnds[i];
	    }
	    return buf;
	  }
	  return unsafeStringify(rnds);
	}

	var uuidv4 = v4;
	// For environments that do not support crypto.getRandomValues, such as nashorn.
	function universalUUID() {
	    return typeof crypto === 'undefined'
	        ? "_".concat(Math.random().toString(36).substring(2))
	        : uuidv4();
	}

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var initTitleTpl = function () {
	    var titleTpl = {
	        label: 'title.titleGroup',
	        key: 'titleGroup',
	        comType: 'group',
	        rows: [
	            {
	                label: 'title.showTitle',
	                key: 'showTitle',
	                value: false,
	                comType: 'switch',
	            },
	            {
	                label: 'title.textAlign.textAlign',
	                key: 'textAlign',
	                value: 'left',
	                comType: 'select',
	                options: {
	                    translateItemLabel: true,
	                    items: [
	                        {
	                            label: '@global@.title.textAlign.left',
	                            key: 'left',
	                            value: 'left',
	                        },
	                        {
	                            label: '@global@.title.textAlign.center',
	                            key: 'center',
	                            value: 'center',
	                        },
	                    ],
	                },
	            },
	            {
	                label: 'title.font',
	                key: 'font',
	                value: FONT_DEFAULT,
	                comType: 'font',
	            },
	        ],
	    };
	    return titleTpl;
	};
	var initInteractionTpl = function () {
	    return [
	        {
	            label: 'drillThrough.title',
	            key: 'drillThrough',
	            comType: 'checkboxModal',
	            default: false,
	            options: { modalSize: 'middle' },
	            rows: [
	                {
	                    label: 'drillThrough.title',
	                    key: 'setting',
	                    comType: 'interaction.drillThrough',
	                },
	            ],
	        },
	        {
	            label: 'crossFiltering.title',
	            key: 'crossFiltering',
	            comType: 'checkboxModal',
	            default: false,
	            options: { modalSize: 'middle' },
	            rows: [
	                {
	                    label: 'crossFiltering.title',
	                    key: 'setting',
	                    comType: 'interaction.crossFiltering',
	                },
	            ],
	        },
	        {
	            label: 'viewDetail.title',
	            key: 'viewDetail',
	            comType: 'checkboxModal',
	            default: false,
	            options: { modalSize: 'middle' },
	            rows: [
	                {
	                    label: 'viewDetail.title',
	                    key: 'setting',
	                    comType: 'interaction.viewDetail',
	                },
	            ],
	        },
	    ];
	};
	var InteractionI18N = {
	    zh: {
	        drillThrough: {
	            title: '跳转设置',
	            rule: {
	                title: '规则设置',
	                tip: '分享页仅支持跳转到URL一种方式',
	                addRule: '+ 点击新建',
	                inputUrl: '请输入URL',
	                header: {
	                    name: '名称',
	                    category: '类型',
	                    open: '打开方式',
	                    relation: '关系设置',
	                    operation: '操作',
	                    event: '交互事件',
	                },
	                event: {
	                    title: '交互事件',
	                    left: '左键单击',
	                    right: '右键菜单',
	                },
	                category: {
	                    title: '类型',
	                    jumpToChart: '跳转到图表',
	                    jumpToDashboard: '跳转到仪表板',
	                    jumpToUrl: '跳转到URL',
	                },
	                action: {
	                    title: '打开方式',
	                    redirect: '从当前页打开',
	                    window: '打开新窗口',
	                    dialog: '打开对话框',
	                },
	                reference: {
	                    title: '关联图表',
	                },
	                relation: {
	                    setting: '字段关系配置',
	                    title: '字段关系',
	                    auto: '自动',
	                    customize: '自定义',
	                    type: '类型',
	                    source: '源字段/变量',
	                    target: '目标字段/变量',
	                    addRelation: '+ 点击新建',
	                    field: '字段',
	                    variable: '变量',
	                    controller: '控制器',
	                },
	                operation: {
	                    delete: '删除',
	                },
	            },
	        },
	        crossFiltering: {
	            title: '联动',
	            event: {
	                title: '交互事件',
	                left: '左键单击',
	                right: '右键菜单',
	            },
	            rule: {
	                title: '规则设置',
	                header: {
	                    relId: '关联图表',
	                    relation: '关系设置',
	                    operation: '操作',
	                },
	                operation: {
	                    delete: '删除',
	                },
	            },
	        },
	        viewDetail: {
	            title: '查看数据',
	            event: '交互事件',
	            leftClick: '左键单击',
	            rightClick: '右键菜单',
	            field: '选择字段',
	            all: '全部',
	            customize: '自定义',
	            summary: '汇总',
	            details: '明细',
	        },
	    },
	    en: {
	        drillThrough: {
	            title: 'Drill Through',
	            rule: {
	                title: 'Rule',
	                tip: 'Drill through only support jump to url',
	                addRule: '+ Add New',
	                inputUrl: 'Please input url',
	                header: {
	                    name: 'Name',
	                    category: 'Category',
	                    open: 'Open',
	                    relation: 'Relation',
	                    operation: 'Operation',
	                    event: 'Event',
	                },
	                event: {
	                    title: 'Event',
	                    left: 'Left',
	                    right: 'Right',
	                },
	                category: {
	                    title: 'Categroy',
	                    jumpToChart: 'Jump to Chart',
	                    jumpToDashboard: 'Jump to Dashboard',
	                    jumpToUrl: 'Jump to URL',
	                },
	                action: {
	                    title: 'Open',
	                    redirect: 'Redirect',
	                    window: 'Open New',
	                    dialog: 'Open Dialog',
	                },
	                reference: {
	                    title: 'Reference View',
	                },
	                relation: {
	                    setting: 'Field Relation Setting',
	                    title: 'Field Relation',
	                    auto: 'Auto',
	                    customize: 'Customize',
	                    type: 'Type',
	                    source: 'Source Field/Variable',
	                    target: 'Target Field/Variable',
	                    addRelation: '+ Add',
	                    field: 'Field',
	                    variable: 'Variable',
	                    controller: 'Controller',
	                },
	                operation: {
	                    delete: 'Delete',
	                },
	            },
	        },
	        crossFiltering: {
	            title: 'Cross Filtering',
	            event: {
	                title: 'Event',
	                left: 'Left',
	                right: 'Right',
	            },
	            rule: {
	                title: 'Rule',
	                header: {
	                    relId: 'Reference Chart',
	                    relation: 'Relation',
	                    operation: 'Operation',
	                },
	                operation: {
	                    delete: 'Delete',
	                },
	            },
	        },
	        viewDetail: {
	            title: 'View Detail',
	            event: 'Interaction Event',
	            leftClick: 'Left Click',
	            rightClick: 'Right Click',
	            field: 'Selected Fields',
	            all: 'All',
	            customize: 'Customize',
	            summary: 'Summary',
	            details: 'Details',
	        },
	    },
	};
	var TitleI18N = {
	    zh: {
	        titleGroup: '标题格式',
	        title: '标题',
	        showTitle: '显示标题',
	        font: '字体',
	        textAlign: {
	            textAlign: '对齐方式',
	            left: '左对齐',
	            center: '居中',
	        },
	    },
	    en: {
	        titleGroup: 'Title Format',
	        title: 'Title',
	        showTitle: 'Show Title',
	        font: 'Font',
	        textAlign: {
	            textAlign: 'Align',
	            left: 'Left',
	            center: 'Center',
	        },
	    },
	};
	var initPaddingTpl = function () {
	    var paddingTpl = {
	        label: 'padding.paddingGroup',
	        key: 'paddingGroup',
	        comType: 'group',
	        rows: [
	            {
	                label: 'padding.top',
	                key: 'top',
	                value: 8,
	                comType: 'inputNumber',
	            },
	            {
	                label: 'padding.bottom',
	                key: 'bottom',
	                value: 8,
	                comType: 'inputNumber',
	            },
	            {
	                label: 'padding.left',
	                key: 'left',
	                value: 8,
	                comType: 'inputNumber',
	            },
	            {
	                label: 'padding.right',
	                key: 'right',
	                value: 8,
	                comType: 'inputNumber',
	            },
	        ],
	    };
	    return paddingTpl;
	};
	var PaddingI18N = {
	    zh: {
	        paddingGroup: '内边距',
	        top: '上',
	        bottom: '下',
	        left: '左',
	        right: '右',
	    },
	    en: {
	        paddingGroup: 'Padding',
	        top: 'Top',
	        bottom: 'Bottom',
	        left: 'Left',
	        right: 'Right',
	    },
	};
	var initLoopFetchTpl = function () {
	    var loopFetchTpl = {
	        label: 'loopFetch.loopFetchGroup',
	        key: 'loopFetchGroup',
	        comType: 'group',
	        rows: [
	            {
	                label: 'loopFetch.enable',
	                key: 'enable',
	                value: false,
	                comType: 'switch',
	            },
	            {
	                label: 'loopFetch.interval',
	                key: 'interval',
	                value: 60,
	                comType: 'inputNumber',
	            },
	        ],
	    };
	    return loopFetchTpl;
	};
	var LoopFetchI18N = {
	    zh: {
	        loopFetchGroup: '自动刷新数据',
	        enable: '启用',
	        interval: '间隔(s)',
	    },
	    en: {
	        loopFetchGroup: 'Loop Fetch',
	        enable: 'Enable',
	        interval: 'Interval (s)',
	    },
	};
	var ImmediateQueryI18N = {
	    zh: {
	        immediateQueryGroup: '立即查询',
	        enable: '启用',
	    },
	    en: {
	        immediateQueryGroup: 'ImmediateQuery',
	        enable: 'Enable',
	    },
	};
	var initBackgroundTpl = function (color) {
	    var backgroundTpl = {
	        label: 'background.backgroundGroup',
	        key: 'backgroundGroup',
	        comType: 'group',
	        rows: [
	            {
	                label: 'background.background',
	                key: 'background',
	                value: {
	                    color: color || 'transparent',
	                    image: '',
	                    size: '100% 100%',
	                    repeat: 'no-repeat',
	                },
	                comType: 'background',
	            },
	        ],
	    };
	    return backgroundTpl;
	};
	var initBorderTpl = function () {
	    var borderTpl = {
	        label: 'border.borderGroup',
	        key: 'borderGroup',
	        comType: 'group',
	        rows: [
	            {
	                label: 'border.border',
	                key: 'border',
	                value: {
	                    color: 'transparent',
	                    width: 0,
	                    style: 'solid',
	                    radius: 0,
	                },
	                comType: 'widgetBorder',
	            },
	        ],
	    };
	    return borderTpl;
	};
	// TODO(Stephen): to be check if width/height setting same as free widget?
	var initAutoWidgetRect = function () { return ({
	    x: 0,
	    y: 0,
	    width: LAYOUT_COLS_MAP.lg / 2,
	    height: LAYOUT_COLS_MAP.lg / 2,
	}); };
	var initFreeWidgetRect = function () { return ({
	    x: Math.ceil(Math.random() * 200),
	    y: Math.ceil(Math.random() * 200),
	    width: 400,
	    height: 300,
	}); };
	var widgetTpl = function () {
	    return {
	        id: universalUUID(),
	        dashboardId: '',
	        datachartId: '',
	        relations: [],
	        viewIds: [],
	        parentId: '',
	        config: {
	            clientId: initClientId(),
	            version: APP_CURRENT_VERSION,
	            index: 0,
	            name: '',
	            boardType: '',
	            type: '',
	            originalType: '',
	            // visible: true,
	            lock: false,
	            content: {},
	            //
	            rect: initFreeWidgetRect(),
	            pRect: initAutoWidgetRect(),
	            mRect: undefined,
	            customConfig: {
	                props: [],
	            },
	        },
	    };
	};
	var initClientId = function () {
	    return 'client_' + universalUUID();
	};
	var initWidgetName = function (i18nMap, local) {
	    var _a;
	    if (local && i18nMap[local]) {
	        return i18nMap[local];
	    }
	    else {
	        var key = getInitialLocale();
	        if (i18nMap[key])
	            return i18nMap[key];
	        return (_a = Object.values(i18nMap)) === null || _a === void 0 ? void 0 : _a[0];
	    }
	};

	var freeGlobal$1 = _typeof$1(commonjsGlobal) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
	var _freeGlobal = freeGlobal$1;
	getDefaultExportFromCjs(_freeGlobal);

	var freeGlobal = _freeGlobal;
	var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof$1(self)) == 'object' && self && self.Object === Object && self;
	var root$9 = freeGlobal || freeSelf || Function('return this')();
	var _root = root$9;
	getDefaultExportFromCjs(_root);

	var root$8 = _root;
	var _Symbol2 = root$8.Symbol;
	var _Symbol$6 = _Symbol2;
	getDefaultExportFromCjs(_Symbol$6);

	function arrayMap$2(array, iteratee) {
	  var index = -1,
	    length = array == null ? 0 : array.length,
	    result = Array(length);
	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}
	var _arrayMap = arrayMap$2;
	getDefaultExportFromCjs(_arrayMap);

	var isArray$b = Array.isArray;
	var isArray_1 = isArray$b;
	getDefaultExportFromCjs(isArray_1);

	var _Symbol$5 = _Symbol$6;
	var objectProto$g = Object.prototype;
	var hasOwnProperty$d = objectProto$g.hasOwnProperty;
	var nativeObjectToString$1 = objectProto$g.toString;
	var symToStringTag$1 = _Symbol$5 ? _Symbol$5.toStringTag : undefined;
	function getRawTag$1(value) {
	  var isOwn = hasOwnProperty$d.call(value, symToStringTag$1),
	    tag = value[symToStringTag$1];
	  try {
	    value[symToStringTag$1] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	  var result = nativeObjectToString$1.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag$1] = tag;
	    } else {
	      delete value[symToStringTag$1];
	    }
	  }
	  return result;
	}
	var _getRawTag = getRawTag$1;
	getDefaultExportFromCjs(_getRawTag);

	var objectProto$f = Object.prototype;
	var nativeObjectToString = objectProto$f.toString;
	function objectToString$1(value) {
	  return nativeObjectToString.call(value);
	}
	var _objectToString = objectToString$1;
	getDefaultExportFromCjs(_objectToString);

	var _Symbol$4 = _Symbol$6,
	  getRawTag = _getRawTag,
	  objectToString = _objectToString;
	var nullTag = '[object Null]',
	  undefinedTag = '[object Undefined]';
	var symToStringTag = _Symbol$4 ? _Symbol$4.toStringTag : undefined;
	function baseGetTag$6(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
	}
	var _baseGetTag = baseGetTag$6;
	getDefaultExportFromCjs(_baseGetTag);

	function isObjectLike$9(value) {
	  return value != null && _typeof$1(value) == 'object';
	}
	var isObjectLike_1 = isObjectLike$9;
	getDefaultExportFromCjs(isObjectLike_1);

	var baseGetTag$5 = _baseGetTag,
	  isObjectLike$8 = isObjectLike_1;
	var symbolTag$3 = '[object Symbol]';
	function isSymbol$4(value) {
	  return _typeof$1(value) == 'symbol' || isObjectLike$8(value) && baseGetTag$5(value) == symbolTag$3;
	}
	var isSymbol_1 = isSymbol$4;
	getDefaultExportFromCjs(isSymbol_1);

	var _Symbol$3 = _Symbol$6,
	  arrayMap$1 = _arrayMap,
	  isArray$a = isArray_1,
	  isSymbol$3 = isSymbol_1;
	var INFINITY$4 = 1 / 0;
	var symbolProto$2 = _Symbol$3 ? _Symbol$3.prototype : undefined,
	  symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;
	function baseToString$2(value) {
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray$a(value)) {
	    return arrayMap$1(value, baseToString$2) + '';
	  }
	  if (isSymbol$3(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = value + '';
	  return result == '0' && 1 / value == -INFINITY$4 ? '-0' : result;
	}
	var _baseToString = baseToString$2;
	getDefaultExportFromCjs(_baseToString);

	var baseToString$1 = _baseToString;
	function toString$7(value) {
	  return value == null ? '' : baseToString$1(value);
	}
	var toString_1 = toString$7;
	getDefaultExportFromCjs(toString_1);

	function baseSlice$2(array, start, end) {
	  var index = -1,
	    length = array.length;
	  if (start < 0) {
	    start = -start > length ? 0 : length + start;
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : end - start >>> 0;
	  start >>>= 0;
	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}
	var _baseSlice = baseSlice$2;
	getDefaultExportFromCjs(_baseSlice);

	var baseSlice$1 = _baseSlice;
	function castSlice$1(array, start, end) {
	  var length = array.length;
	  end = end === undefined ? length : end;
	  return !start && end >= length ? array : baseSlice$1(array, start, end);
	}
	var _castSlice = castSlice$1;
	getDefaultExportFromCjs(_castSlice);

	var rsAstralRange$2 = "\\ud800-\\udfff",
	  rsComboMarksRange$3 = "\\u0300-\\u036f",
	  reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f",
	  rsComboSymbolsRange$3 = "\\u20d0-\\u20ff",
	  rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
	  rsVarRange$2 = "\\ufe0e\\ufe0f";
	var rsZWJ$2 = "\\u200d";
	var reHasUnicode = RegExp('[' + rsZWJ$2 + rsAstralRange$2 + rsComboRange$3 + rsVarRange$2 + ']');
	function hasUnicode$2(string) {
	  return reHasUnicode.test(string);
	}
	var _hasUnicode = hasUnicode$2;
	getDefaultExportFromCjs(_hasUnicode);

	function asciiToArray$1(string) {
	  return string.split('');
	}
	var _asciiToArray = asciiToArray$1;
	getDefaultExportFromCjs(_asciiToArray);

	var rsAstralRange$1 = "\\ud800-\\udfff",
	  rsComboMarksRange$2 = "\\u0300-\\u036f",
	  reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f",
	  rsComboSymbolsRange$2 = "\\u20d0-\\u20ff",
	  rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2,
	  rsVarRange$1 = "\\ufe0e\\ufe0f";
	var rsAstral = '[' + rsAstralRange$1 + ']',
	  rsCombo$2 = '[' + rsComboRange$2 + ']',
	  rsFitz$1 = "\\ud83c[\\udffb-\\udfff]",
	  rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
	  rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
	  rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
	  rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
	  rsZWJ$1 = "\\u200d";
	var reOptMod$1 = rsModifier$1 + '?',
	  rsOptVar$1 = '[' + rsVarRange$1 + ']?',
	  rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
	  rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
	  rsSymbol = '(?:' + [rsNonAstral$1 + rsCombo$2 + '?', rsCombo$2, rsRegional$1, rsSurrPair$1, rsAstral].join('|') + ')';
	var reUnicode = RegExp(rsFitz$1 + '(?=' + rsFitz$1 + ')|' + rsSymbol + rsSeq$1, 'g');
	function unicodeToArray$1(string) {
	  return string.match(reUnicode) || [];
	}
	var _unicodeToArray = unicodeToArray$1;
	getDefaultExportFromCjs(_unicodeToArray);

	var asciiToArray = _asciiToArray,
	  hasUnicode$1 = _hasUnicode,
	  unicodeToArray = _unicodeToArray;
	function stringToArray$1(string) {
	  return hasUnicode$1(string) ? unicodeToArray(string) : asciiToArray(string);
	}
	var _stringToArray = stringToArray$1;
	getDefaultExportFromCjs(_stringToArray);

	var castSlice = _castSlice,
	  hasUnicode = _hasUnicode,
	  stringToArray = _stringToArray,
	  toString$6 = toString_1;
	function createCaseFirst$1(methodName) {
	  return function (string) {
	    string = toString$6(string);
	    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
	    var chr = strSymbols ? strSymbols[0] : string.charAt(0);
	    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
	    return chr[methodName]() + trailing;
	  };
	}
	var _createCaseFirst = createCaseFirst$1;
	getDefaultExportFromCjs(_createCaseFirst);

	var createCaseFirst = _createCaseFirst;
	var upperFirst$1 = createCaseFirst('toUpperCase');
	var upperFirst_1 = upperFirst$1;
	getDefaultExportFromCjs(upperFirst_1);

	var toString$5 = toString_1,
	  upperFirst = upperFirst_1;
	function capitalize$1(string) {
	  return upperFirst(toString$5(string).toLowerCase());
	}
	var capitalize_1 = capitalize$1;
	getDefaultExportFromCjs(capitalize_1);

	function arrayReduce$1(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	    length = array == null ? 0 : array.length;
	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}
	var _arrayReduce = arrayReduce$1;
	getDefaultExportFromCjs(_arrayReduce);

	function basePropertyOf$1(object) {
	  return function (key) {
	    return object == null ? undefined : object[key];
	  };
	}
	var _basePropertyOf = basePropertyOf$1;
	getDefaultExportFromCjs(_basePropertyOf);

	var basePropertyOf = _basePropertyOf;
	var deburredLetters = {
	  '\xc0': 'A',
	  '\xc1': 'A',
	  '\xc2': 'A',
	  '\xc3': 'A',
	  '\xc4': 'A',
	  '\xc5': 'A',
	  '\xe0': 'a',
	  '\xe1': 'a',
	  '\xe2': 'a',
	  '\xe3': 'a',
	  '\xe4': 'a',
	  '\xe5': 'a',
	  '\xc7': 'C',
	  '\xe7': 'c',
	  '\xd0': 'D',
	  '\xf0': 'd',
	  '\xc8': 'E',
	  '\xc9': 'E',
	  '\xca': 'E',
	  '\xcb': 'E',
	  '\xe8': 'e',
	  '\xe9': 'e',
	  '\xea': 'e',
	  '\xeb': 'e',
	  '\xcc': 'I',
	  '\xcd': 'I',
	  '\xce': 'I',
	  '\xcf': 'I',
	  '\xec': 'i',
	  '\xed': 'i',
	  '\xee': 'i',
	  '\xef': 'i',
	  '\xd1': 'N',
	  '\xf1': 'n',
	  '\xd2': 'O',
	  '\xd3': 'O',
	  '\xd4': 'O',
	  '\xd5': 'O',
	  '\xd6': 'O',
	  '\xd8': 'O',
	  '\xf2': 'o',
	  '\xf3': 'o',
	  '\xf4': 'o',
	  '\xf5': 'o',
	  '\xf6': 'o',
	  '\xf8': 'o',
	  '\xd9': 'U',
	  '\xda': 'U',
	  '\xdb': 'U',
	  '\xdc': 'U',
	  '\xf9': 'u',
	  '\xfa': 'u',
	  '\xfb': 'u',
	  '\xfc': 'u',
	  '\xdd': 'Y',
	  '\xfd': 'y',
	  '\xff': 'y',
	  '\xc6': 'Ae',
	  '\xe6': 'ae',
	  '\xde': 'Th',
	  '\xfe': 'th',
	  '\xdf': 'ss',
	  "\u0100": 'A',
	  "\u0102": 'A',
	  "\u0104": 'A',
	  "\u0101": 'a',
	  "\u0103": 'a',
	  "\u0105": 'a',
	  "\u0106": 'C',
	  "\u0108": 'C',
	  "\u010A": 'C',
	  "\u010C": 'C',
	  "\u0107": 'c',
	  "\u0109": 'c',
	  "\u010B": 'c',
	  "\u010D": 'c',
	  "\u010E": 'D',
	  "\u0110": 'D',
	  "\u010F": 'd',
	  "\u0111": 'd',
	  "\u0112": 'E',
	  "\u0114": 'E',
	  "\u0116": 'E',
	  "\u0118": 'E',
	  "\u011A": 'E',
	  "\u0113": 'e',
	  "\u0115": 'e',
	  "\u0117": 'e',
	  "\u0119": 'e',
	  "\u011B": 'e',
	  "\u011C": 'G',
	  "\u011E": 'G',
	  "\u0120": 'G',
	  "\u0122": 'G',
	  "\u011D": 'g',
	  "\u011F": 'g',
	  "\u0121": 'g',
	  "\u0123": 'g',
	  "\u0124": 'H',
	  "\u0126": 'H',
	  "\u0125": 'h',
	  "\u0127": 'h',
	  "\u0128": 'I',
	  "\u012A": 'I',
	  "\u012C": 'I',
	  "\u012E": 'I',
	  "\u0130": 'I',
	  "\u0129": 'i',
	  "\u012B": 'i',
	  "\u012D": 'i',
	  "\u012F": 'i',
	  "\u0131": 'i',
	  "\u0134": 'J',
	  "\u0135": 'j',
	  "\u0136": 'K',
	  "\u0137": 'k',
	  "\u0138": 'k',
	  "\u0139": 'L',
	  "\u013B": 'L',
	  "\u013D": 'L',
	  "\u013F": 'L',
	  "\u0141": 'L',
	  "\u013A": 'l',
	  "\u013C": 'l',
	  "\u013E": 'l',
	  "\u0140": 'l',
	  "\u0142": 'l',
	  "\u0143": 'N',
	  "\u0145": 'N',
	  "\u0147": 'N',
	  "\u014A": 'N',
	  "\u0144": 'n',
	  "\u0146": 'n',
	  "\u0148": 'n',
	  "\u014B": 'n',
	  "\u014C": 'O',
	  "\u014E": 'O',
	  "\u0150": 'O',
	  "\u014D": 'o',
	  "\u014F": 'o',
	  "\u0151": 'o',
	  "\u0154": 'R',
	  "\u0156": 'R',
	  "\u0158": 'R',
	  "\u0155": 'r',
	  "\u0157": 'r',
	  "\u0159": 'r',
	  "\u015A": 'S',
	  "\u015C": 'S',
	  "\u015E": 'S',
	  "\u0160": 'S',
	  "\u015B": 's',
	  "\u015D": 's',
	  "\u015F": 's',
	  "\u0161": 's',
	  "\u0162": 'T',
	  "\u0164": 'T',
	  "\u0166": 'T',
	  "\u0163": 't',
	  "\u0165": 't',
	  "\u0167": 't',
	  "\u0168": 'U',
	  "\u016A": 'U',
	  "\u016C": 'U',
	  "\u016E": 'U',
	  "\u0170": 'U',
	  "\u0172": 'U',
	  "\u0169": 'u',
	  "\u016B": 'u',
	  "\u016D": 'u',
	  "\u016F": 'u',
	  "\u0171": 'u',
	  "\u0173": 'u',
	  "\u0174": 'W',
	  "\u0175": 'w',
	  "\u0176": 'Y',
	  "\u0177": 'y',
	  "\u0178": 'Y',
	  "\u0179": 'Z',
	  "\u017B": 'Z',
	  "\u017D": 'Z',
	  "\u017A": 'z',
	  "\u017C": 'z',
	  "\u017E": 'z',
	  "\u0132": 'IJ',
	  "\u0133": 'ij',
	  "\u0152": 'Oe',
	  "\u0153": 'oe',
	  "\u0149": "'n",
	  "\u017F": 's'
	};
	var deburrLetter$1 = basePropertyOf(deburredLetters);
	var _deburrLetter = deburrLetter$1;
	getDefaultExportFromCjs(_deburrLetter);

	var deburrLetter = _deburrLetter,
	  toString$4 = toString_1;
	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
	var rsComboMarksRange$1 = "\\u0300-\\u036f",
	  reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f",
	  rsComboSymbolsRange$1 = "\\u20d0-\\u20ff",
	  rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
	var rsCombo$1 = '[' + rsComboRange$1 + ']';
	var reComboMark = RegExp(rsCombo$1, 'g');
	function deburr$1(string) {
	  string = toString$4(string);
	  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	}
	var deburr_1 = deburr$1;
	getDefaultExportFromCjs(deburr_1);

	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
	function asciiWords$1(string) {
	  return string.match(reAsciiWord) || [];
	}
	var _asciiWords = asciiWords$1;
	getDefaultExportFromCjs(_asciiWords);

	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
	function hasUnicodeWord$1(string) {
	  return reHasUnicodeWord.test(string);
	}
	var _hasUnicodeWord = hasUnicodeWord$1;
	getDefaultExportFromCjs(_hasUnicodeWord);

	var rsAstralRange = "\\ud800-\\udfff",
	  rsComboMarksRange = "\\u0300-\\u036f",
	  reComboHalfMarksRange = "\\ufe20-\\ufe2f",
	  rsComboSymbolsRange = "\\u20d0-\\u20ff",
	  rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	  rsDingbatRange = "\\u2700-\\u27bf",
	  rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	  rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	  rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	  rsPunctuationRange = "\\u2000-\\u206f",
	  rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
	  rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	  rsVarRange = "\\ufe0e\\ufe0f",
	  rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
	var rsApos$1 = "['\u2019]",
	  rsBreak = '[' + rsBreakRange + ']',
	  rsCombo = '[' + rsComboRange + ']',
	  rsDigits = '\\d+',
	  rsDingbat = '[' + rsDingbatRange + ']',
	  rsLower = '[' + rsLowerRange + ']',
	  rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	  rsFitz = "\\ud83c[\\udffb-\\udfff]",
	  rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	  rsNonAstral = '[^' + rsAstralRange + ']',
	  rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
	  rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
	  rsUpper = '[' + rsUpperRange + ']',
	  rsZWJ = "\\u200d";
	var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	  rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	  rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
	  rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
	  reOptMod = rsModifier + '?',
	  rsOptVar = '[' + rsVarRange + ']?',
	  rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	  rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	  rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	  rsSeq = rsOptVar + reOptMod + rsOptJoin,
	  rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;
	var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
	function unicodeWords$1(string) {
	  return string.match(reUnicodeWord) || [];
	}
	var _unicodeWords = unicodeWords$1;
	getDefaultExportFromCjs(_unicodeWords);

	var asciiWords = _asciiWords,
	  hasUnicodeWord = _hasUnicodeWord,
	  toString$3 = toString_1,
	  unicodeWords = _unicodeWords;
	function words$1(string, pattern, guard) {
	  string = toString$3(string);
	  pattern = guard ? undefined : pattern;
	  if (pattern === undefined) {
	    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	  }
	  return string.match(pattern) || [];
	}
	var words_1 = words$1;
	getDefaultExportFromCjs(words_1);

	var arrayReduce = _arrayReduce,
	  deburr = deburr_1,
	  words = words_1;
	var rsApos = "['\u2019]";
	var reApos = RegExp(rsApos, 'g');
	function createCompounder$2(callback) {
	  return function (string) {
	    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	  };
	}
	var _createCompounder = createCompounder$2;
	getDefaultExportFromCjs(_createCompounder);

	var capitalize = capitalize_1,
	  createCompounder$1 = _createCompounder;
	var camelCase = createCompounder$1(function (result, word, index) {
	  word = word.toLowerCase();
	  return result + (index ? capitalize(word) : word);
	});
	var camelCase_1 = camelCase;
	getDefaultExportFromCjs(camelCase_1);

	function isObject$8(value) {
	  var type = _typeof$1(value);
	  return value != null && (type == 'object' || type == 'function');
	}
	var isObject_1 = isObject$8;
	getDefaultExportFromCjs(isObject_1);

	var isObject$7 = isObject_1;
	var objectCreate = Object.create;
	var baseCreate$3 = function () {
	  function object() {}
	  return function (proto) {
	    if (!isObject$7(proto)) {
	      return {};
	    }
	    if (objectCreate) {
	      return objectCreate(proto);
	    }
	    object.prototype = proto;
	    var result = new object();
	    object.prototype = undefined;
	    return result;
	  };
	}();
	var _baseCreate = baseCreate$3;
	getDefaultExportFromCjs(_baseCreate);

	function baseLodash$3() {}
	var _baseLodash = baseLodash$3;
	getDefaultExportFromCjs(_baseLodash);

	var baseCreate$2 = _baseCreate,
	  baseLodash$2 = _baseLodash;
	var MAX_ARRAY_LENGTH = 4294967295;
	function LazyWrapper$2(value) {
	  this.__wrapped__ = value;
	  this.__actions__ = [];
	  this.__dir__ = 1;
	  this.__filtered__ = false;
	  this.__iteratees__ = [];
	  this.__takeCount__ = MAX_ARRAY_LENGTH;
	  this.__views__ = [];
	}
	LazyWrapper$2.prototype = baseCreate$2(baseLodash$2.prototype);
	LazyWrapper$2.prototype.constructor = LazyWrapper$2;
	var _LazyWrapper = LazyWrapper$2;
	getDefaultExportFromCjs(_LazyWrapper);

	var baseCreate$1 = _baseCreate,
	  baseLodash$1 = _baseLodash;
	function LodashWrapper$2(value, chainAll) {
	  this.__wrapped__ = value;
	  this.__actions__ = [];
	  this.__chain__ = !!chainAll;
	  this.__index__ = 0;
	  this.__values__ = undefined;
	}
	LodashWrapper$2.prototype = baseCreate$1(baseLodash$1.prototype);
	LodashWrapper$2.prototype.constructor = LodashWrapper$2;
	var _LodashWrapper = LodashWrapper$2;
	getDefaultExportFromCjs(_LodashWrapper);

	function copyArray$2(source, array) {
	  var index = -1,
	    length = source.length;
	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}
	var _copyArray = copyArray$2;
	getDefaultExportFromCjs(_copyArray);

	var LazyWrapper$1 = _LazyWrapper,
	  LodashWrapper$1 = _LodashWrapper,
	  copyArray$1 = _copyArray;
	function wrapperClone$1(wrapper) {
	  if (wrapper instanceof LazyWrapper$1) {
	    return wrapper.clone();
	  }
	  var result = new LodashWrapper$1(wrapper.__wrapped__, wrapper.__chain__);
	  result.__actions__ = copyArray$1(wrapper.__actions__);
	  result.__index__ = wrapper.__index__;
	  result.__values__ = wrapper.__values__;
	  return result;
	}
	var _wrapperClone = wrapperClone$1;
	getDefaultExportFromCjs(_wrapperClone);

	var LazyWrapper = _LazyWrapper,
	  LodashWrapper = _LodashWrapper,
	  baseLodash = _baseLodash,
	  isArray$9 = isArray_1,
	  isObjectLike$7 = isObjectLike_1,
	  wrapperClone = _wrapperClone;
	var objectProto$e = Object.prototype;
	var hasOwnProperty$c = objectProto$e.hasOwnProperty;
	function lodash$1(value) {
	  if (isObjectLike$7(value) && !isArray$9(value) && !(value instanceof LazyWrapper)) {
	    if (value instanceof LodashWrapper) {
	      return value;
	    }
	    if (hasOwnProperty$c.call(value, '__wrapped__')) {
	      return wrapperClone(value);
	    }
	  }
	  return new LodashWrapper(value);
	}
	lodash$1.prototype = baseLodash.prototype;
	lodash$1.prototype.constructor = lodash$1;
	var wrapperLodash = lodash$1;
	getDefaultExportFromCjs(wrapperLodash);

	var lodash = wrapperLodash;
	function chain(value) {
	  var result = lodash(value);
	  result.__chain__ = true;
	  return result;
	}
	var chain_1 = chain;
	getDefaultExportFromCjs(chain_1);

	function listCacheClear$1() {
	  this.__data__ = [];
	  this.size = 0;
	}
	var _listCacheClear = listCacheClear$1;
	getDefaultExportFromCjs(_listCacheClear);

	function eq$3(value, other) {
	  return value === other || value !== value && other !== other;
	}
	var eq_1 = eq$3;
	getDefaultExportFromCjs(eq_1);

	var eq$2 = eq_1;
	function assocIndexOf$4(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq$2(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}
	var _assocIndexOf = assocIndexOf$4;
	getDefaultExportFromCjs(_assocIndexOf);

	var assocIndexOf$3 = _assocIndexOf;
	var arrayProto = Array.prototype;
	var splice = arrayProto.splice;
	function listCacheDelete$1(key) {
	  var data = this.__data__,
	    index = assocIndexOf$3(data, key);
	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}
	var _listCacheDelete = listCacheDelete$1;
	getDefaultExportFromCjs(_listCacheDelete);

	var assocIndexOf$2 = _assocIndexOf;
	function listCacheGet$1(key) {
	  var data = this.__data__,
	    index = assocIndexOf$2(data, key);
	  return index < 0 ? undefined : data[index][1];
	}
	var _listCacheGet = listCacheGet$1;
	getDefaultExportFromCjs(_listCacheGet);

	var assocIndexOf$1 = _assocIndexOf;
	function listCacheHas$1(key) {
	  return assocIndexOf$1(this.__data__, key) > -1;
	}
	var _listCacheHas = listCacheHas$1;
	getDefaultExportFromCjs(_listCacheHas);

	var assocIndexOf = _assocIndexOf;
	function listCacheSet$1(key, value) {
	  var data = this.__data__,
	    index = assocIndexOf(data, key);
	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}
	var _listCacheSet = listCacheSet$1;
	getDefaultExportFromCjs(_listCacheSet);

	var listCacheClear = _listCacheClear,
	  listCacheDelete = _listCacheDelete,
	  listCacheGet = _listCacheGet,
	  listCacheHas = _listCacheHas,
	  listCacheSet = _listCacheSet;
	function ListCache$4(entries) {
	  var index = -1,
	    length = entries == null ? 0 : entries.length;
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	ListCache$4.prototype.clear = listCacheClear;
	ListCache$4.prototype['delete'] = listCacheDelete;
	ListCache$4.prototype.get = listCacheGet;
	ListCache$4.prototype.has = listCacheHas;
	ListCache$4.prototype.set = listCacheSet;
	var _ListCache = ListCache$4;
	getDefaultExportFromCjs(_ListCache);

	var ListCache$3 = _ListCache;
	function stackClear$1() {
	  this.__data__ = new ListCache$3();
	  this.size = 0;
	}
	var _stackClear = stackClear$1;
	getDefaultExportFromCjs(_stackClear);

	function stackDelete$1(key) {
	  var data = this.__data__,
	    result = data['delete'](key);
	  this.size = data.size;
	  return result;
	}
	var _stackDelete = stackDelete$1;
	getDefaultExportFromCjs(_stackDelete);

	function stackGet$1(key) {
	  return this.__data__.get(key);
	}
	var _stackGet = stackGet$1;
	getDefaultExportFromCjs(_stackGet);

	function stackHas$1(key) {
	  return this.__data__.has(key);
	}
	var _stackHas = stackHas$1;
	getDefaultExportFromCjs(_stackHas);

	var baseGetTag$4 = _baseGetTag,
	  isObject$6 = isObject_1;
	var asyncTag = '[object AsyncFunction]',
	  funcTag$2 = '[object Function]',
	  genTag$1 = '[object GeneratorFunction]',
	  proxyTag = '[object Proxy]';
	function isFunction$3(value) {
	  if (!isObject$6(value)) {
	    return false;
	  }
	  var tag = baseGetTag$4(value);
	  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
	}
	var isFunction_1 = isFunction$3;
	getDefaultExportFromCjs(isFunction_1);

	var root$7 = _root;
	var coreJsData$1 = root$7['__core-js_shared__'];
	var _coreJsData = coreJsData$1;
	getDefaultExportFromCjs(_coreJsData);

	var coreJsData = _coreJsData;
	var maskSrcKey = function () {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? 'Symbol(src)_1.' + uid : '';
	}();
	function isMasked$1(func) {
	  return !!maskSrcKey && maskSrcKey in func;
	}
	var _isMasked = isMasked$1;
	getDefaultExportFromCjs(_isMasked);

	var funcProto$2 = Function.prototype;
	var funcToString$2 = funcProto$2.toString;
	function toSource$2(func) {
	  if (func != null) {
	    try {
	      return funcToString$2.call(func);
	    } catch (e) {}
	    try {
	      return func + '';
	    } catch (e) {}
	  }
	  return '';
	}
	var _toSource = toSource$2;
	getDefaultExportFromCjs(_toSource);

	var isFunction$2 = isFunction_1,
	  isMasked = _isMasked,
	  isObject$5 = isObject_1,
	  toSource$1 = _toSource;
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
	var reIsHostCtor = /^\[object .+?Constructor\]$/;
	var funcProto$1 = Function.prototype,
	  objectProto$d = Object.prototype;
	var funcToString$1 = funcProto$1.toString;
	var hasOwnProperty$b = objectProto$d.hasOwnProperty;
	var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$b).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	function baseIsNative$1(value) {
	  if (!isObject$5(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource$1(value));
	}
	var _baseIsNative = baseIsNative$1;
	getDefaultExportFromCjs(_baseIsNative);

	function getValue$2(object, key) {
	  return object == null ? undefined : object[key];
	}
	var _getValue = getValue$2;
	getDefaultExportFromCjs(_getValue);

	var baseIsNative = _baseIsNative,
	  getValue$1 = _getValue;
	function getNative$7(object, key) {
	  var value = getValue$1(object, key);
	  return baseIsNative(value) ? value : undefined;
	}
	var _getNative = getNative$7;
	getDefaultExportFromCjs(_getNative);

	var getNative$6 = _getNative,
	  root$6 = _root;
	var Map$3 = getNative$6(root$6, 'Map');
	var _Map = Map$3;
	getDefaultExportFromCjs(_Map);

	var getNative$5 = _getNative;
	var nativeCreate$4 = getNative$5(Object, 'create');
	var _nativeCreate = nativeCreate$4;
	getDefaultExportFromCjs(_nativeCreate);

	var nativeCreate$3 = _nativeCreate;
	function hashClear$1() {
	  this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
	  this.size = 0;
	}
	var _hashClear = hashClear$1;
	getDefaultExportFromCjs(_hashClear);

	function hashDelete$1(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}
	var _hashDelete = hashDelete$1;
	getDefaultExportFromCjs(_hashDelete);

	var nativeCreate$2 = _nativeCreate;
	var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';
	var objectProto$c = Object.prototype;
	var hasOwnProperty$a = objectProto$c.hasOwnProperty;
	function hashGet$1(key) {
	  var data = this.__data__;
	  if (nativeCreate$2) {
	    var result = data[key];
	    return result === HASH_UNDEFINED$2 ? undefined : result;
	  }
	  return hasOwnProperty$a.call(data, key) ? data[key] : undefined;
	}
	var _hashGet = hashGet$1;
	getDefaultExportFromCjs(_hashGet);

	var nativeCreate$1 = _nativeCreate;
	var objectProto$b = Object.prototype;
	var hasOwnProperty$9 = objectProto$b.hasOwnProperty;
	function hashHas$1(key) {
	  var data = this.__data__;
	  return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$9.call(data, key);
	}
	var _hashHas = hashHas$1;
	getDefaultExportFromCjs(_hashHas);

	var nativeCreate = _nativeCreate;
	var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';
	function hashSet$1(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;
	  return this;
	}
	var _hashSet = hashSet$1;
	getDefaultExportFromCjs(_hashSet);

	var hashClear = _hashClear,
	  hashDelete = _hashDelete,
	  hashGet = _hashGet,
	  hashHas = _hashHas,
	  hashSet = _hashSet;
	function Hash$1(entries) {
	  var index = -1,
	    length = entries == null ? 0 : entries.length;
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	Hash$1.prototype.clear = hashClear;
	Hash$1.prototype['delete'] = hashDelete;
	Hash$1.prototype.get = hashGet;
	Hash$1.prototype.has = hashHas;
	Hash$1.prototype.set = hashSet;
	var _Hash = Hash$1;
	getDefaultExportFromCjs(_Hash);

	var Hash = _Hash,
	  ListCache$2 = _ListCache,
	  Map$2 = _Map;
	function mapCacheClear$1() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash(),
	    'map': new (Map$2 || ListCache$2)(),
	    'string': new Hash()
	  };
	}
	var _mapCacheClear = mapCacheClear$1;
	getDefaultExportFromCjs(_mapCacheClear);

	function isKeyable$1(value) {
	  var type = _typeof$1(value);
	  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
	}
	var _isKeyable = isKeyable$1;
	getDefaultExportFromCjs(_isKeyable);

	var isKeyable = _isKeyable;
	function getMapData$4(map, key) {
	  var data = map.__data__;
	  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
	}
	var _getMapData = getMapData$4;
	getDefaultExportFromCjs(_getMapData);

	var getMapData$3 = _getMapData;
	function mapCacheDelete$1(key) {
	  var result = getMapData$3(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}
	var _mapCacheDelete = mapCacheDelete$1;
	getDefaultExportFromCjs(_mapCacheDelete);

	var getMapData$2 = _getMapData;
	function mapCacheGet$1(key) {
	  return getMapData$2(this, key).get(key);
	}
	var _mapCacheGet = mapCacheGet$1;
	getDefaultExportFromCjs(_mapCacheGet);

	var getMapData$1 = _getMapData;
	function mapCacheHas$1(key) {
	  return getMapData$1(this, key).has(key);
	}
	var _mapCacheHas = mapCacheHas$1;
	getDefaultExportFromCjs(_mapCacheHas);

	var getMapData = _getMapData;
	function mapCacheSet$1(key, value) {
	  var data = getMapData(this, key),
	    size = data.size;
	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}
	var _mapCacheSet = mapCacheSet$1;
	getDefaultExportFromCjs(_mapCacheSet);

	var mapCacheClear = _mapCacheClear,
	  mapCacheDelete = _mapCacheDelete,
	  mapCacheGet = _mapCacheGet,
	  mapCacheHas = _mapCacheHas,
	  mapCacheSet = _mapCacheSet;
	function MapCache$3(entries) {
	  var index = -1,
	    length = entries == null ? 0 : entries.length;
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	MapCache$3.prototype.clear = mapCacheClear;
	MapCache$3.prototype['delete'] = mapCacheDelete;
	MapCache$3.prototype.get = mapCacheGet;
	MapCache$3.prototype.has = mapCacheHas;
	MapCache$3.prototype.set = mapCacheSet;
	var _MapCache = MapCache$3;
	getDefaultExportFromCjs(_MapCache);

	var ListCache$1 = _ListCache,
	  Map$1 = _Map,
	  MapCache$2 = _MapCache;
	var LARGE_ARRAY_SIZE$1 = 200;
	function stackSet$1(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache$1) {
	    var pairs = data.__data__;
	    if (!Map$1 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache$2(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}
	var _stackSet = stackSet$1;
	getDefaultExportFromCjs(_stackSet);

	var ListCache = _ListCache,
	  stackClear = _stackClear,
	  stackDelete = _stackDelete,
	  stackGet = _stackGet,
	  stackHas = _stackHas,
	  stackSet = _stackSet;
	function Stack$2(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}
	Stack$2.prototype.clear = stackClear;
	Stack$2.prototype['delete'] = stackDelete;
	Stack$2.prototype.get = stackGet;
	Stack$2.prototype.has = stackHas;
	Stack$2.prototype.set = stackSet;
	var _Stack = Stack$2;
	getDefaultExportFromCjs(_Stack);

	function arrayEach$1(array, iteratee) {
	  var index = -1,
	    length = array == null ? 0 : array.length;
	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}
	var _arrayEach = arrayEach$1;
	getDefaultExportFromCjs(_arrayEach);

	var getNative$4 = _getNative;
	var defineProperty$2 = function () {
	  try {
	    var func = getNative$4(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}();
	var _defineProperty = defineProperty$2;
	getDefaultExportFromCjs(_defineProperty);

	var defineProperty$1 = _defineProperty;
	function baseAssignValue$2(object, key, value) {
	  if (key == '__proto__' && defineProperty$1) {
	    defineProperty$1(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}
	var _baseAssignValue = baseAssignValue$2;
	getDefaultExportFromCjs(_baseAssignValue);

	var baseAssignValue$1 = _baseAssignValue,
	  eq$1 = eq_1;
	var objectProto$a = Object.prototype;
	var hasOwnProperty$8 = objectProto$a.hasOwnProperty;
	function assignValue$4(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty$8.call(object, key) && eq$1(objValue, value)) || value === undefined && !(key in object)) {
	    baseAssignValue$1(object, key, value);
	  }
	}
	var _assignValue = assignValue$4;
	getDefaultExportFromCjs(_assignValue);

	var assignValue$3 = _assignValue,
	  baseAssignValue = _baseAssignValue;
	function copyObject$5(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});
	  var index = -1,
	    length = props.length;
	  while (++index < length) {
	    var key = props[index];
	    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue$3(object, key, newValue);
	    }
	  }
	  return object;
	}
	var _copyObject = copyObject$5;
	getDefaultExportFromCjs(_copyObject);

	function baseTimes$1(n, iteratee) {
	  var index = -1,
	    result = Array(n);
	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}
	var _baseTimes = baseTimes$1;
	getDefaultExportFromCjs(_baseTimes);

	var baseGetTag$3 = _baseGetTag,
	  isObjectLike$6 = isObjectLike_1;
	var argsTag$3 = '[object Arguments]';
	function baseIsArguments$1(value) {
	  return isObjectLike$6(value) && baseGetTag$3(value) == argsTag$3;
	}
	var _baseIsArguments = baseIsArguments$1;
	getDefaultExportFromCjs(_baseIsArguments);

	var baseIsArguments = _baseIsArguments,
	  isObjectLike$5 = isObjectLike_1;
	var objectProto$9 = Object.prototype;
	var hasOwnProperty$7 = objectProto$9.hasOwnProperty;
	var propertyIsEnumerable$1 = objectProto$9.propertyIsEnumerable;
	var isArguments$3 = baseIsArguments(function () {
	  return arguments;
	}()) ? baseIsArguments : function (value) {
	  return isObjectLike$5(value) && hasOwnProperty$7.call(value, 'callee') && !propertyIsEnumerable$1.call(value, 'callee');
	};
	var isArguments_1 = isArguments$3;
	getDefaultExportFromCjs(isArguments_1);

	var isBuffer$3 = {exports: {}};

	function stubFalse() {
	  return false;
	}
	var stubFalse_1 = stubFalse;
	getDefaultExportFromCjs(stubFalse_1);

	(function (module, exports) {
	  var root = _root,
	    stubFalse = stubFalse_1;
	  var freeExports = exports && !exports.nodeType && exports;
	  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
	  var moduleExports = freeModule && freeModule.exports === freeExports;
	  var Buffer = moduleExports ? root.Buffer : undefined;
	  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
	  var isBuffer = nativeIsBuffer || stubFalse;
	  module.exports = isBuffer;
	})(isBuffer$3, isBuffer$3.exports);
	var isBufferExports = isBuffer$3.exports;
	getDefaultExportFromCjs(isBufferExports);

	var MAX_SAFE_INTEGER$1 = 9007199254740991;
	var reIsUint = /^(?:0|[1-9]\d*)$/;
	function isIndex$3(value, length) {
	  var type = _typeof$1(value);
	  length = length == null ? MAX_SAFE_INTEGER$1 : length;
	  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
	}
	var _isIndex = isIndex$3;
	getDefaultExportFromCjs(_isIndex);

	var MAX_SAFE_INTEGER = 9007199254740991;
	function isLength$3(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	var isLength_1 = isLength$3;
	getDefaultExportFromCjs(isLength_1);

	var baseGetTag$2 = _baseGetTag,
	  isLength$2 = isLength_1,
	  isObjectLike$4 = isObjectLike_1;
	var argsTag$2 = '[object Arguments]',
	  arrayTag$2 = '[object Array]',
	  boolTag$3 = '[object Boolean]',
	  dateTag$3 = '[object Date]',
	  errorTag$2 = '[object Error]',
	  funcTag$1 = '[object Function]',
	  mapTag$5 = '[object Map]',
	  numberTag$3 = '[object Number]',
	  objectTag$4 = '[object Object]',
	  regexpTag$3 = '[object RegExp]',
	  setTag$5 = '[object Set]',
	  stringTag$3 = '[object String]',
	  weakMapTag$2 = '[object WeakMap]';
	var arrayBufferTag$3 = '[object ArrayBuffer]',
	  dataViewTag$4 = '[object DataView]',
	  float32Tag$2 = '[object Float32Array]',
	  float64Tag$2 = '[object Float64Array]',
	  int8Tag$2 = '[object Int8Array]',
	  int16Tag$2 = '[object Int16Array]',
	  int32Tag$2 = '[object Int32Array]',
	  uint8Tag$2 = '[object Uint8Array]',
	  uint8ClampedTag$2 = '[object Uint8ClampedArray]',
	  uint16Tag$2 = '[object Uint16Array]',
	  uint32Tag$2 = '[object Uint32Array]';
	var typedArrayTags = {};
	typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
	typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$5] = typedArrayTags[numberTag$3] = typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$5] = typedArrayTags[stringTag$3] = typedArrayTags[weakMapTag$2] = false;
	function baseIsTypedArray$1(value) {
	  return isObjectLike$4(value) && isLength$2(value.length) && !!typedArrayTags[baseGetTag$2(value)];
	}
	var _baseIsTypedArray = baseIsTypedArray$1;
	getDefaultExportFromCjs(_baseIsTypedArray);

	function baseUnary$3(func) {
	  return function (value) {
	    return func(value);
	  };
	}
	var _baseUnary = baseUnary$3;
	getDefaultExportFromCjs(_baseUnary);

	var _nodeUtil = {exports: {}};

	(function (module, exports) {
	  var freeGlobal = _freeGlobal;
	  var freeExports = exports && !exports.nodeType && exports;
	  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
	  var moduleExports = freeModule && freeModule.exports === freeExports;
	  var freeProcess = moduleExports && freeGlobal.process;
	  var nodeUtil = function () {
	    try {
	      var types = freeModule && freeModule.require && freeModule.require('util').types;
	      if (types) {
	        return types;
	      }
	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
	    } catch (e) {}
	  }();
	  module.exports = nodeUtil;
	})(_nodeUtil, _nodeUtil.exports);
	var _nodeUtilExports = _nodeUtil.exports;
	getDefaultExportFromCjs(_nodeUtilExports);

	var baseIsTypedArray = _baseIsTypedArray,
	  baseUnary$2 = _baseUnary,
	  nodeUtil$2 = _nodeUtilExports;
	var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;
	var isTypedArray$2 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;
	var isTypedArray_1 = isTypedArray$2;
	getDefaultExportFromCjs(isTypedArray_1);

	var baseTimes = _baseTimes,
	  isArguments$2 = isArguments_1,
	  isArray$8 = isArray_1,
	  isBuffer$2 = isBufferExports,
	  isIndex$2 = _isIndex,
	  isTypedArray$1 = isTypedArray_1;
	var objectProto$8 = Object.prototype;
	var hasOwnProperty$6 = objectProto$8.hasOwnProperty;
	function arrayLikeKeys$2(value, inherited) {
	  var isArr = isArray$8(value),
	    isArg = !isArr && isArguments$2(value),
	    isBuff = !isArr && !isArg && isBuffer$2(value),
	    isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),
	    skipIndexes = isArr || isArg || isBuff || isType,
	    result = skipIndexes ? baseTimes(value.length, String) : [],
	    length = result.length;
	  for (var key in value) {
	    if ((inherited || hasOwnProperty$6.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex$2(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	var _arrayLikeKeys = arrayLikeKeys$2;
	getDefaultExportFromCjs(_arrayLikeKeys);

	var objectProto$7 = Object.prototype;
	function isPrototype$3(value) {
	  var Ctor = value && value.constructor,
	    proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$7;
	  return value === proto;
	}
	var _isPrototype = isPrototype$3;
	getDefaultExportFromCjs(_isPrototype);

	function overArg$2(func, transform) {
	  return function (arg) {
	    return func(transform(arg));
	  };
	}
	var _overArg = overArg$2;
	getDefaultExportFromCjs(_overArg);

	var overArg$1 = _overArg;
	var nativeKeys$1 = overArg$1(Object.keys, Object);
	var _nativeKeys = nativeKeys$1;
	getDefaultExportFromCjs(_nativeKeys);

	var isPrototype$2 = _isPrototype,
	  nativeKeys = _nativeKeys;
	var objectProto$6 = Object.prototype;
	var hasOwnProperty$5 = objectProto$6.hasOwnProperty;
	function baseKeys$1(object) {
	  if (!isPrototype$2(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty$5.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}
	var _baseKeys = baseKeys$1;
	getDefaultExportFromCjs(_baseKeys);

	var isFunction$1 = isFunction_1,
	  isLength$1 = isLength_1;
	function isArrayLike$2(value) {
	  return value != null && isLength$1(value.length) && !isFunction$1(value);
	}
	var isArrayLike_1 = isArrayLike$2;
	getDefaultExportFromCjs(isArrayLike_1);

	var arrayLikeKeys$1 = _arrayLikeKeys,
	  baseKeys = _baseKeys,
	  isArrayLike$1 = isArrayLike_1;
	function keys$4(object) {
	  return isArrayLike$1(object) ? arrayLikeKeys$1(object) : baseKeys(object);
	}
	var keys_1 = keys$4;
	getDefaultExportFromCjs(keys_1);

	var copyObject$4 = _copyObject,
	  keys$3 = keys_1;
	function baseAssign$1(object, source) {
	  return object && copyObject$4(source, keys$3(source), object);
	}
	var _baseAssign = baseAssign$1;
	getDefaultExportFromCjs(_baseAssign);

	function nativeKeysIn$1(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	var _nativeKeysIn = nativeKeysIn$1;
	getDefaultExportFromCjs(_nativeKeysIn);

	var isObject$4 = isObject_1,
	  isPrototype$1 = _isPrototype,
	  nativeKeysIn = _nativeKeysIn;
	var objectProto$5 = Object.prototype;
	var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
	function baseKeysIn$1(object) {
	  if (!isObject$4(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype$1(object),
	    result = [];
	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty$4.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	var _baseKeysIn = baseKeysIn$1;
	getDefaultExportFromCjs(_baseKeysIn);

	var arrayLikeKeys = _arrayLikeKeys,
	  baseKeysIn = _baseKeysIn,
	  isArrayLike = isArrayLike_1;
	function keysIn$3(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}
	var keysIn_1 = keysIn$3;
	getDefaultExportFromCjs(keysIn_1);

	var copyObject$3 = _copyObject,
	  keysIn$2 = keysIn_1;
	function baseAssignIn$1(object, source) {
	  return object && copyObject$3(source, keysIn$2(source), object);
	}
	var _baseAssignIn = baseAssignIn$1;
	getDefaultExportFromCjs(_baseAssignIn);

	var _cloneBuffer = {exports: {}};

	(function (module, exports) {
	  var root = _root;
	  var freeExports = exports && !exports.nodeType && exports;
	  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
	  var moduleExports = freeModule && freeModule.exports === freeExports;
	  var Buffer = moduleExports ? root.Buffer : undefined,
	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
	  function cloneBuffer(buffer, isDeep) {
	    if (isDeep) {
	      return buffer.slice();
	    }
	    var length = buffer.length,
	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
	    buffer.copy(result);
	    return result;
	  }
	  module.exports = cloneBuffer;
	})(_cloneBuffer, _cloneBuffer.exports);
	var _cloneBufferExports = _cloneBuffer.exports;
	getDefaultExportFromCjs(_cloneBufferExports);

	function arrayFilter$1(array, predicate) {
	  var index = -1,
	    length = array == null ? 0 : array.length,
	    resIndex = 0,
	    result = [];
	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}
	var _arrayFilter = arrayFilter$1;
	getDefaultExportFromCjs(_arrayFilter);

	function stubArray$2() {
	  return [];
	}
	var stubArray_1 = stubArray$2;
	getDefaultExportFromCjs(stubArray_1);

	var arrayFilter = _arrayFilter,
	  stubArray$1 = stubArray_1;
	var objectProto$4 = Object.prototype;
	var propertyIsEnumerable = objectProto$4.propertyIsEnumerable;
	var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
	var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function (object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return arrayFilter(nativeGetSymbols$1(object), function (symbol) {
	    return propertyIsEnumerable.call(object, symbol);
	  });
	};
	var _getSymbols = getSymbols$3;
	getDefaultExportFromCjs(_getSymbols);

	var copyObject$2 = _copyObject,
	  getSymbols$2 = _getSymbols;
	function copySymbols$1(source, object) {
	  return copyObject$2(source, getSymbols$2(source), object);
	}
	var _copySymbols = copySymbols$1;
	getDefaultExportFromCjs(_copySymbols);

	function arrayPush$3(array, values) {
	  var index = -1,
	    length = values.length,
	    offset = array.length;
	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}
	var _arrayPush = arrayPush$3;
	getDefaultExportFromCjs(_arrayPush);

	var overArg = _overArg;
	var getPrototype$3 = overArg(Object.getPrototypeOf, Object);
	var _getPrototype = getPrototype$3;
	getDefaultExportFromCjs(_getPrototype);

	var arrayPush$2 = _arrayPush,
	  getPrototype$2 = _getPrototype,
	  getSymbols$1 = _getSymbols,
	  stubArray = stubArray_1;
	var nativeGetSymbols = Object.getOwnPropertySymbols;
	var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function (object) {
	  var result = [];
	  while (object) {
	    arrayPush$2(result, getSymbols$1(object));
	    object = getPrototype$2(object);
	  }
	  return result;
	};
	var _getSymbolsIn = getSymbolsIn$2;
	getDefaultExportFromCjs(_getSymbolsIn);

	var copyObject$1 = _copyObject,
	  getSymbolsIn$1 = _getSymbolsIn;
	function copySymbolsIn$1(source, object) {
	  return copyObject$1(source, getSymbolsIn$1(source), object);
	}
	var _copySymbolsIn = copySymbolsIn$1;
	getDefaultExportFromCjs(_copySymbolsIn);

	var arrayPush$1 = _arrayPush,
	  isArray$7 = isArray_1;
	function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray$7(object) ? result : arrayPush$1(result, symbolsFunc(object));
	}
	var _baseGetAllKeys = baseGetAllKeys$2;
	getDefaultExportFromCjs(_baseGetAllKeys);

	var baseGetAllKeys$1 = _baseGetAllKeys,
	  getSymbols = _getSymbols,
	  keys$2 = keys_1;
	function getAllKeys$2(object) {
	  return baseGetAllKeys$1(object, keys$2, getSymbols);
	}
	var _getAllKeys = getAllKeys$2;
	getDefaultExportFromCjs(_getAllKeys);

	var baseGetAllKeys = _baseGetAllKeys,
	  getSymbolsIn = _getSymbolsIn,
	  keysIn$1 = keysIn_1;
	function getAllKeysIn$2(object) {
	  return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
	}
	var _getAllKeysIn = getAllKeysIn$2;
	getDefaultExportFromCjs(_getAllKeysIn);

	var getNative$3 = _getNative,
	  root$5 = _root;
	var DataView$2 = getNative$3(root$5, 'DataView');
	var _DataView = DataView$2;
	getDefaultExportFromCjs(_DataView);

	var getNative$2 = _getNative,
	  root$4 = _root;
	var Promise$2 = getNative$2(root$4, 'Promise');
	var _Promise = Promise$2;
	getDefaultExportFromCjs(_Promise);

	var getNative$1 = _getNative,
	  root$3 = _root;
	var Set$2 = getNative$1(root$3, 'Set');
	var _Set = Set$2;
	getDefaultExportFromCjs(_Set);

	var getNative = _getNative,
	  root$2 = _root;
	var WeakMap$2 = getNative(root$2, 'WeakMap');
	var _WeakMap = WeakMap$2;
	getDefaultExportFromCjs(_WeakMap);

	var DataView$1 = _DataView,
	  Map = _Map,
	  Promise$1 = _Promise,
	  Set$1 = _Set,
	  WeakMap$1 = _WeakMap,
	  baseGetTag$1 = _baseGetTag,
	  toSource = _toSource;
	var mapTag$4 = '[object Map]',
	  objectTag$3 = '[object Object]',
	  promiseTag = '[object Promise]',
	  setTag$4 = '[object Set]',
	  weakMapTag$1 = '[object WeakMap]';
	var dataViewTag$3 = '[object DataView]';
	var dataViewCtorString = toSource(DataView$1),
	  mapCtorString = toSource(Map),
	  promiseCtorString = toSource(Promise$1),
	  setCtorString = toSource(Set$1),
	  weakMapCtorString = toSource(WeakMap$1);
	var getTag$4 = baseGetTag$1;
	if (DataView$1 && getTag$4(new DataView$1(new ArrayBuffer(1))) != dataViewTag$3 || Map && getTag$4(new Map()) != mapTag$4 || Promise$1 && getTag$4(Promise$1.resolve()) != promiseTag || Set$1 && getTag$4(new Set$1()) != setTag$4 || WeakMap$1 && getTag$4(new WeakMap$1()) != weakMapTag$1) {
	  getTag$4 = function getTag(value) {
	    var result = baseGetTag$1(value),
	      Ctor = result == objectTag$3 ? value.constructor : undefined,
	      ctorString = Ctor ? toSource(Ctor) : '';
	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString:
	          return dataViewTag$3;
	        case mapCtorString:
	          return mapTag$4;
	        case promiseCtorString:
	          return promiseTag;
	        case setCtorString:
	          return setTag$4;
	        case weakMapCtorString:
	          return weakMapTag$1;
	      }
	    }
	    return result;
	  };
	}
	var _getTag = getTag$4;
	getDefaultExportFromCjs(_getTag);

	var objectProto$3 = Object.prototype;
	var hasOwnProperty$3 = objectProto$3.hasOwnProperty;
	function initCloneArray$1(array) {
	  var length = array.length,
	    result = new array.constructor(length);
	  if (length && typeof array[0] == 'string' && hasOwnProperty$3.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}
	var _initCloneArray = initCloneArray$1;
	getDefaultExportFromCjs(_initCloneArray);

	var root$1 = _root;
	var Uint8Array$3 = root$1.Uint8Array;
	var _Uint8Array = Uint8Array$3;
	getDefaultExportFromCjs(_Uint8Array);

	var Uint8Array$2 = _Uint8Array;
	function cloneArrayBuffer$3(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array$2(result).set(new Uint8Array$2(arrayBuffer));
	  return result;
	}
	var _cloneArrayBuffer = cloneArrayBuffer$3;
	getDefaultExportFromCjs(_cloneArrayBuffer);

	var cloneArrayBuffer$2 = _cloneArrayBuffer;
	function cloneDataView$1(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}
	var _cloneDataView = cloneDataView$1;
	getDefaultExportFromCjs(_cloneDataView);

	var reFlags = /\w*$/;
	function cloneRegExp$1(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}
	var _cloneRegExp = cloneRegExp$1;
	getDefaultExportFromCjs(_cloneRegExp);

	var _Symbol$2 = _Symbol$6;
	var symbolProto$1 = _Symbol$2 ? _Symbol$2.prototype : undefined,
	  symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;
	function cloneSymbol$1(symbol) {
	  return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
	}
	var _cloneSymbol = cloneSymbol$1;
	getDefaultExportFromCjs(_cloneSymbol);

	var cloneArrayBuffer$1 = _cloneArrayBuffer;
	function cloneTypedArray$1(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}
	var _cloneTypedArray = cloneTypedArray$1;
	getDefaultExportFromCjs(_cloneTypedArray);

	var cloneArrayBuffer = _cloneArrayBuffer,
	  cloneDataView = _cloneDataView,
	  cloneRegExp = _cloneRegExp,
	  cloneSymbol = _cloneSymbol,
	  cloneTypedArray = _cloneTypedArray;
	var boolTag$2 = '[object Boolean]',
	  dateTag$2 = '[object Date]',
	  mapTag$3 = '[object Map]',
	  numberTag$2 = '[object Number]',
	  regexpTag$2 = '[object RegExp]',
	  setTag$3 = '[object Set]',
	  stringTag$2 = '[object String]',
	  symbolTag$2 = '[object Symbol]';
	var arrayBufferTag$2 = '[object ArrayBuffer]',
	  dataViewTag$2 = '[object DataView]',
	  float32Tag$1 = '[object Float32Array]',
	  float64Tag$1 = '[object Float64Array]',
	  int8Tag$1 = '[object Int8Array]',
	  int16Tag$1 = '[object Int16Array]',
	  int32Tag$1 = '[object Int32Array]',
	  uint8Tag$1 = '[object Uint8Array]',
	  uint8ClampedTag$1 = '[object Uint8ClampedArray]',
	  uint16Tag$1 = '[object Uint16Array]',
	  uint32Tag$1 = '[object Uint32Array]';
	function initCloneByTag$1(object, tag, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag$2:
	      return cloneArrayBuffer(object);
	    case boolTag$2:
	    case dateTag$2:
	      return new Ctor(+object);
	    case dataViewTag$2:
	      return cloneDataView(object, isDeep);
	    case float32Tag$1:
	    case float64Tag$1:
	    case int8Tag$1:
	    case int16Tag$1:
	    case int32Tag$1:
	    case uint8Tag$1:
	    case uint8ClampedTag$1:
	    case uint16Tag$1:
	    case uint32Tag$1:
	      return cloneTypedArray(object, isDeep);
	    case mapTag$3:
	      return new Ctor();
	    case numberTag$2:
	    case stringTag$2:
	      return new Ctor(object);
	    case regexpTag$2:
	      return cloneRegExp(object);
	    case setTag$3:
	      return new Ctor();
	    case symbolTag$2:
	      return cloneSymbol(object);
	  }
	}
	var _initCloneByTag = initCloneByTag$1;
	getDefaultExportFromCjs(_initCloneByTag);

	var baseCreate = _baseCreate,
	  getPrototype$1 = _getPrototype,
	  isPrototype = _isPrototype;
	function initCloneObject$1(object) {
	  return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype$1(object)) : {};
	}
	var _initCloneObject = initCloneObject$1;
	getDefaultExportFromCjs(_initCloneObject);

	var getTag$3 = _getTag,
	  isObjectLike$3 = isObjectLike_1;
	var mapTag$2 = '[object Map]';
	function baseIsMap$1(value) {
	  return isObjectLike$3(value) && getTag$3(value) == mapTag$2;
	}
	var _baseIsMap = baseIsMap$1;
	getDefaultExportFromCjs(_baseIsMap);

	var baseIsMap = _baseIsMap,
	  baseUnary$1 = _baseUnary,
	  nodeUtil$1 = _nodeUtilExports;
	var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
	var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;
	var isMap_1 = isMap$1;
	getDefaultExportFromCjs(isMap_1);

	var getTag$2 = _getTag,
	  isObjectLike$2 = isObjectLike_1;
	var setTag$2 = '[object Set]';
	function baseIsSet$1(value) {
	  return isObjectLike$2(value) && getTag$2(value) == setTag$2;
	}
	var _baseIsSet = baseIsSet$1;
	getDefaultExportFromCjs(_baseIsSet);

	var baseIsSet = _baseIsSet,
	  baseUnary = _baseUnary,
	  nodeUtil = _nodeUtilExports;
	var nodeIsSet = nodeUtil && nodeUtil.isSet;
	var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
	var isSet_1 = isSet$1;
	getDefaultExportFromCjs(isSet_1);

	var Stack$1 = _Stack,
	  arrayEach = _arrayEach,
	  assignValue$2 = _assignValue,
	  baseAssign = _baseAssign,
	  baseAssignIn = _baseAssignIn,
	  cloneBuffer = _cloneBufferExports,
	  copyArray = _copyArray,
	  copySymbols = _copySymbols,
	  copySymbolsIn = _copySymbolsIn,
	  getAllKeys$1 = _getAllKeys,
	  getAllKeysIn$1 = _getAllKeysIn,
	  getTag$1 = _getTag,
	  initCloneArray = _initCloneArray,
	  initCloneByTag = _initCloneByTag,
	  initCloneObject = _initCloneObject,
	  isArray$6 = isArray_1,
	  isBuffer$1 = isBufferExports,
	  isMap = isMap_1,
	  isObject$3 = isObject_1,
	  isSet = isSet_1,
	  keys$1 = keys_1,
	  keysIn = keysIn_1;
	var CLONE_DEEP_FLAG$2 = 1,
	  CLONE_FLAT_FLAG$1 = 2,
	  CLONE_SYMBOLS_FLAG$2 = 4;
	var argsTag$1 = '[object Arguments]',
	  arrayTag$1 = '[object Array]',
	  boolTag$1 = '[object Boolean]',
	  dateTag$1 = '[object Date]',
	  errorTag$1 = '[object Error]',
	  funcTag = '[object Function]',
	  genTag = '[object GeneratorFunction]',
	  mapTag$1 = '[object Map]',
	  numberTag$1 = '[object Number]',
	  objectTag$2 = '[object Object]',
	  regexpTag$1 = '[object RegExp]',
	  setTag$1 = '[object Set]',
	  stringTag$1 = '[object String]',
	  symbolTag$1 = '[object Symbol]',
	  weakMapTag = '[object WeakMap]';
	var arrayBufferTag$1 = '[object ArrayBuffer]',
	  dataViewTag$1 = '[object DataView]',
	  float32Tag = '[object Float32Array]',
	  float64Tag = '[object Float64Array]',
	  int8Tag = '[object Int8Array]',
	  int16Tag = '[object Int16Array]',
	  int32Tag = '[object Int32Array]',
	  uint8Tag = '[object Uint8Array]',
	  uint8ClampedTag = '[object Uint8ClampedArray]',
	  uint16Tag = '[object Uint16Array]',
	  uint32Tag = '[object Uint32Array]';
	var cloneableTags = {};
	cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$1] = cloneableTags[numberTag$1] = cloneableTags[objectTag$2] = cloneableTags[regexpTag$1] = cloneableTags[setTag$1] = cloneableTags[stringTag$1] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
	function baseClone$2(value, bitmask, customizer, key, object, stack) {
	  var result,
	    isDeep = bitmask & CLONE_DEEP_FLAG$2,
	    isFlat = bitmask & CLONE_FLAT_FLAG$1,
	    isFull = bitmask & CLONE_SYMBOLS_FLAG$2;
	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject$3(value)) {
	    return value;
	  }
	  var isArr = isArray$6(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag$1(value),
	      isFunc = tag == funcTag || tag == genTag;
	    if (isBuffer$1(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag$2 || tag == argsTag$1 || isFunc && !object) {
	      result = isFlat || isFunc ? {} : initCloneObject(value);
	      if (!isDeep) {
	        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, isDeep);
	    }
	  }
	  stack || (stack = new Stack$1());
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);
	  if (isSet(value)) {
	    value.forEach(function (subValue) {
	      result.add(baseClone$2(subValue, bitmask, customizer, subValue, value, stack));
	    });
	  } else if (isMap(value)) {
	    value.forEach(function (subValue, key) {
	      result.set(key, baseClone$2(subValue, bitmask, customizer, key, value, stack));
	    });
	  }
	  var keysFunc = isFull ? isFlat ? getAllKeysIn$1 : getAllKeys$1 : isFlat ? keysIn : keys$1;
	  var props = isArr ? undefined : keysFunc(value);
	  arrayEach(props || value, function (subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    assignValue$2(result, key, baseClone$2(subValue, bitmask, customizer, key, value, stack));
	  });
	  return result;
	}
	var _baseClone = baseClone$2;
	getDefaultExportFromCjs(_baseClone);

	var baseClone$1 = _baseClone;
	var CLONE_DEEP_FLAG$1 = 1,
	  CLONE_SYMBOLS_FLAG$1 = 4;
	function cloneDeep(value) {
	  return baseClone$1(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
	}
	var cloneDeep_1 = cloneDeep;
	var cloneDeep$1 = getDefaultExportFromCjs(cloneDeep_1);

	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	function setCacheAdd$1(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}
	var _setCacheAdd = setCacheAdd$1;
	getDefaultExportFromCjs(_setCacheAdd);

	function setCacheHas$1(value) {
	  return this.__data__.has(value);
	}
	var _setCacheHas = setCacheHas$1;
	getDefaultExportFromCjs(_setCacheHas);

	var MapCache$1 = _MapCache,
	  setCacheAdd = _setCacheAdd,
	  setCacheHas = _setCacheHas;
	function SetCache$2(values) {
	  var index = -1,
	    length = values == null ? 0 : values.length;
	  this.__data__ = new MapCache$1();
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}
	SetCache$2.prototype.add = SetCache$2.prototype.push = setCacheAdd;
	SetCache$2.prototype.has = setCacheHas;
	var _SetCache = SetCache$2;
	getDefaultExportFromCjs(_SetCache);

	function arraySome$1(array, predicate) {
	  var index = -1,
	    length = array == null ? 0 : array.length;
	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}
	var _arraySome = arraySome$1;
	getDefaultExportFromCjs(_arraySome);

	function cacheHas$2(cache, key) {
	  return cache.has(key);
	}
	var _cacheHas = cacheHas$2;
	getDefaultExportFromCjs(_cacheHas);

	var SetCache$1 = _SetCache,
	  arraySome = _arraySome,
	  cacheHas$1 = _cacheHas;
	var COMPARE_PARTIAL_FLAG$3 = 1,
	  COMPARE_UNORDERED_FLAG$1 = 2;
	function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
	    arrLength = array.length,
	    othLength = other.length;
	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  var arrStacked = stack.get(array);
	  var othStacked = stack.get(other);
	  if (arrStacked && othStacked) {
	    return arrStacked == other && othStacked == array;
	  }
	  var index = -1,
	    result = true,
	    seen = bitmask & COMPARE_UNORDERED_FLAG$1 ? new SetCache$1() : undefined;
	  stack.set(array, other);
	  stack.set(other, array);
	  while (++index < arrLength) {
	    var arrValue = array[index],
	      othValue = other[index];
	    if (customizer) {
	      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    if (seen) {
	      if (!arraySome(other, function (othValue, othIndex) {
	        if (!cacheHas$1(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	          return seen.push(othIndex);
	        }
	      })) {
	        result = false;
	        break;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}
	var _equalArrays = equalArrays$2;
	getDefaultExportFromCjs(_equalArrays);

	function mapToArray$1(map) {
	  var index = -1,
	    result = Array(map.size);
	  map.forEach(function (value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}
	var _mapToArray = mapToArray$1;
	getDefaultExportFromCjs(_mapToArray);

	function setToArray$3(set) {
	  var index = -1,
	    result = Array(set.size);
	  set.forEach(function (value) {
	    result[++index] = value;
	  });
	  return result;
	}
	var _setToArray = setToArray$3;
	getDefaultExportFromCjs(_setToArray);

	var _Symbol$1 = _Symbol$6,
	  Uint8Array$1 = _Uint8Array,
	  eq = eq_1,
	  equalArrays$1 = _equalArrays,
	  mapToArray = _mapToArray,
	  setToArray$2 = _setToArray;
	var COMPARE_PARTIAL_FLAG$2 = 1,
	  COMPARE_UNORDERED_FLAG = 2;
	var boolTag = '[object Boolean]',
	  dateTag = '[object Date]',
	  errorTag = '[object Error]',
	  mapTag = '[object Map]',
	  numberTag = '[object Number]',
	  regexpTag = '[object RegExp]',
	  setTag = '[object Set]',
	  stringTag = '[object String]',
	  symbolTag = '[object Symbol]';
	var arrayBufferTag = '[object ArrayBuffer]',
	  dataViewTag = '[object DataView]';
	var symbolProto = _Symbol$1 ? _Symbol$1.prototype : undefined,
	  symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
	function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;
	    case arrayBufferTag:
	      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
	        return false;
	      }
	      return true;
	    case boolTag:
	    case dateTag:
	    case numberTag:
	      return eq(+object, +other);
	    case errorTag:
	      return object.name == other.name && object.message == other.message;
	    case regexpTag:
	    case stringTag:
	      return object == other + '';
	    case mapTag:
	      var convert = mapToArray;
	    case setTag:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2;
	      convert || (convert = setToArray$2);
	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG;
	      stack.set(object, other);
	      var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;
	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}
	var _equalByTag = equalByTag$1;
	getDefaultExportFromCjs(_equalByTag);

	var getAllKeys = _getAllKeys;
	var COMPARE_PARTIAL_FLAG$1 = 1;
	var objectProto$2 = Object.prototype;
	var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
	function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1,
	    objProps = getAllKeys(object),
	    objLength = objProps.length,
	    othProps = getAllKeys(other),
	    othLength = othProps.length;
	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty$2.call(other, key))) {
	      return false;
	    }
	  }
	  var objStacked = stack.get(object);
	  var othStacked = stack.get(other);
	  if (objStacked && othStacked) {
	    return objStacked == other && othStacked == object;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);
	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	      othValue = other[key];
	    if (customizer) {
	      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
	    }
	    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	      othCtor = other.constructor;
	    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}
	var _equalObjects = equalObjects$1;
	getDefaultExportFromCjs(_equalObjects);

	var Stack = _Stack,
	  equalArrays = _equalArrays,
	  equalByTag = _equalByTag,
	  equalObjects = _equalObjects,
	  getTag = _getTag,
	  isArray$5 = isArray_1,
	  isBuffer = isBufferExports,
	  isTypedArray = isTypedArray_1;
	var COMPARE_PARTIAL_FLAG = 1;
	var argsTag = '[object Arguments]',
	  arrayTag = '[object Array]',
	  objectTag$1 = '[object Object]';
	var objectProto$1 = Object.prototype;
	var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
	function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray$5(object),
	    othIsArr = isArray$5(other),
	    objTag = objIsArr ? arrayTag : getTag(object),
	    othTag = othIsArr ? arrayTag : getTag(other);
	  objTag = objTag == argsTag ? objectTag$1 : objTag;
	  othTag = othTag == argsTag ? objectTag$1 : othTag;
	  var objIsObj = objTag == objectTag$1,
	    othIsObj = othTag == objectTag$1,
	    isSameTag = objTag == othTag;
	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack());
	    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty$1.call(object, '__wrapped__'),
	      othIsWrapped = othIsObj && hasOwnProperty$1.call(other, '__wrapped__');
	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	        othUnwrapped = othIsWrapped ? other.value() : other;
	      stack || (stack = new Stack());
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack());
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}
	var _baseIsEqualDeep = baseIsEqualDeep$1;
	getDefaultExportFromCjs(_baseIsEqualDeep);

	var baseIsEqualDeep = _baseIsEqualDeep,
	  isObjectLike$1 = isObjectLike_1;
	function baseIsEqual$1(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || !isObjectLike$1(value) && !isObjectLike$1(other)) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$1, stack);
	}
	var _baseIsEqual = baseIsEqual$1;
	getDefaultExportFromCjs(_baseIsEqual);

	var baseIsEqual = _baseIsEqual;
	function isEqual(value, other) {
	  return baseIsEqual(value, other);
	}
	var isEqual_1 = isEqual;
	var isEqual$1 = getDefaultExportFromCjs(isEqual_1);

	var createCompounder = _createCompounder;
	var lowerCase = createCompounder(function (result, word, index) {
	  return result + (index ? ' ' : '') + word.toLowerCase();
	});
	var lowerCase_1 = lowerCase;
	getDefaultExportFromCjs(lowerCase_1);

	function baseSum$1(array, iteratee) {
	  var result,
	    index = -1,
	    length = array.length;
	  while (++index < length) {
	    var current = iteratee(array[index]);
	    if (current !== undefined) {
	      result = result === undefined ? current : result + current;
	    }
	  }
	  return result;
	}
	var _baseSum = baseSum$1;
	getDefaultExportFromCjs(_baseSum);

	var baseSum = _baseSum;
	var NAN$1 = 0 / 0;
	function baseMean$1(array, iteratee) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseSum(array, iteratee) / length : NAN$1;
	}
	var _baseMean = baseMean$1;
	getDefaultExportFromCjs(_baseMean);

	function identity$2(value) {
	  return value;
	}
	var identity_1 = identity$2;
	getDefaultExportFromCjs(identity_1);

	var baseMean = _baseMean,
	  identity$1 = identity_1;
	function mean(array) {
	  return baseMean(array, identity$1);
	}
	var mean_1 = mean;
	getDefaultExportFromCjs(mean_1);

	var isArray$4 = isArray_1,
	  isSymbol$2 = isSymbol_1;
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	  reIsPlainProp = /^\w*$/;
	function isKey$1(value, object) {
	  if (isArray$4(value)) {
	    return false;
	  }
	  var type = _typeof$1(value);
	  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol$2(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
	}
	var _isKey = isKey$1;
	getDefaultExportFromCjs(_isKey);

	var MapCache = _MapCache;
	var FUNC_ERROR_TEXT = 'Expected a function';
	function memoize$1(func, resolver) {
	  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function memoized() {
	    var args = arguments,
	      key = resolver ? resolver.apply(this, args) : args[0],
	      cache = memoized.cache;
	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize$1.Cache || MapCache)();
	  return memoized;
	}
	memoize$1.Cache = MapCache;
	var memoize_1 = memoize$1;
	getDefaultExportFromCjs(memoize_1);

	var memoize = memoize_1;
	var MAX_MEMOIZE_SIZE = 500;
	function memoizeCapped$1(func) {
	  var result = memoize(func, function (key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });
	  var cache = result.cache;
	  return result;
	}
	var _memoizeCapped = memoizeCapped$1;
	getDefaultExportFromCjs(_memoizeCapped);

	var memoizeCapped = _memoizeCapped;
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
	var reEscapeChar = /\\(\\)?/g;
	var stringToPath$1 = memoizeCapped(function (string) {
	  var result = [];
	  if (string.charCodeAt(0) === 46) {
	    result.push('');
	  }
	  string.replace(rePropName, function (match, number, quote, subString) {
	    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
	  });
	  return result;
	});
	var _stringToPath = stringToPath$1;
	getDefaultExportFromCjs(_stringToPath);

	var isArray$3 = isArray_1,
	  isKey = _isKey,
	  stringToPath = _stringToPath,
	  toString$2 = toString_1;
	function castPath$6(value, object) {
	  if (isArray$3(value)) {
	    return value;
	  }
	  return isKey(value, object) ? [value] : stringToPath(toString$2(value));
	}
	var _castPath = castPath$6;
	getDefaultExportFromCjs(_castPath);

	function last$1(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? array[length - 1] : undefined;
	}
	var last_1 = last$1;
	getDefaultExportFromCjs(last_1);

	var isSymbol$1 = isSymbol_1;
	var INFINITY$3 = 1 / 0;
	function toKey$4(value) {
	  if (typeof value == 'string' || isSymbol$1(value)) {
	    return value;
	  }
	  var result = value + '';
	  return result == '0' && 1 / value == -INFINITY$3 ? '-0' : result;
	}
	var _toKey = toKey$4;
	getDefaultExportFromCjs(_toKey);

	var castPath$5 = _castPath,
	  toKey$3 = _toKey;
	function baseGet$2(object, path) {
	  path = castPath$5(path, object);
	  var index = 0,
	    length = path.length;
	  while (object != null && index < length) {
	    object = object[toKey$3(path[index++])];
	  }
	  return index && index == length ? object : undefined;
	}
	var _baseGet = baseGet$2;
	getDefaultExportFromCjs(_baseGet);

	var baseGet$1 = _baseGet,
	  baseSlice = _baseSlice;
	function parent$1(object, path) {
	  return path.length < 2 ? object : baseGet$1(object, baseSlice(path, 0, -1));
	}
	var _parent = parent$1;
	getDefaultExportFromCjs(_parent);

	var castPath$4 = _castPath,
	  last = last_1,
	  parent = _parent,
	  toKey$2 = _toKey;
	function baseUnset$1(object, path) {
	  path = castPath$4(path, object);
	  object = parent(object, path);
	  return object == null || delete object[toKey$2(last(path))];
	}
	var _baseUnset = baseUnset$1;
	getDefaultExportFromCjs(_baseUnset);

	var baseGetTag = _baseGetTag,
	  getPrototype = _getPrototype,
	  isObjectLike = isObjectLike_1;
	var objectTag = '[object Object]';
	var funcProto = Function.prototype,
	  objectProto = Object.prototype;
	var funcToString = funcProto.toString;
	var hasOwnProperty = objectProto.hasOwnProperty;
	var objectCtorString = funcToString.call(Object);
	function isPlainObject$1(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
	}
	var isPlainObject_1 = isPlainObject$1;
	getDefaultExportFromCjs(isPlainObject_1);

	var isPlainObject = isPlainObject_1;
	function customOmitClone$1(value) {
	  return isPlainObject(value) ? undefined : value;
	}
	var _customOmitClone = customOmitClone$1;
	getDefaultExportFromCjs(_customOmitClone);

	var _Symbol = _Symbol$6,
	  isArguments$1 = isArguments_1,
	  isArray$2 = isArray_1;
	var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;
	function isFlattenable$1(value) {
	  return isArray$2(value) || isArguments$1(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
	}
	var _isFlattenable = isFlattenable$1;
	getDefaultExportFromCjs(_isFlattenable);

	var arrayPush = _arrayPush,
	  isFlattenable = _isFlattenable;
	function baseFlatten$2(array, depth, predicate, isStrict, result) {
	  var index = -1,
	    length = array.length;
	  predicate || (predicate = isFlattenable);
	  result || (result = []);
	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        baseFlatten$2(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}
	var _baseFlatten = baseFlatten$2;
	getDefaultExportFromCjs(_baseFlatten);

	var baseFlatten$1 = _baseFlatten;
	function flatten$1(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseFlatten$1(array, 1) : [];
	}
	var flatten_1 = flatten$1;
	getDefaultExportFromCjs(flatten_1);

	function apply$1(func, thisArg, args) {
	  switch (args.length) {
	    case 0:
	      return func.call(thisArg);
	    case 1:
	      return func.call(thisArg, args[0]);
	    case 2:
	      return func.call(thisArg, args[0], args[1]);
	    case 3:
	      return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}
	var _apply = apply$1;
	getDefaultExportFromCjs(_apply);

	var apply = _apply;
	var nativeMax = Math.max;
	function overRest$1(func, start, transform) {
	  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
	  return function () {
	    var args = arguments,
	      index = -1,
	      length = nativeMax(args.length - start, 0),
	      array = Array(length);
	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}
	var _overRest = overRest$1;
	getDefaultExportFromCjs(_overRest);

	function constant$1(value) {
	  return function () {
	    return value;
	  };
	}
	var constant_1 = constant$1;
	getDefaultExportFromCjs(constant_1);

	var constant = constant_1,
	  defineProperty = _defineProperty,
	  identity = identity_1;
	var baseSetToString$1 = !defineProperty ? identity : function (func, string) {
	  return defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};
	var _baseSetToString = baseSetToString$1;
	getDefaultExportFromCjs(_baseSetToString);

	var HOT_COUNT = 800,
	  HOT_SPAN = 16;
	var nativeNow = Date.now;
	function shortOut$1(func) {
	  var count = 0,
	    lastCalled = 0;
	  return function () {
	    var stamp = nativeNow(),
	      remaining = HOT_SPAN - (stamp - lastCalled);
	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}
	var _shortOut = shortOut$1;
	getDefaultExportFromCjs(_shortOut);

	var baseSetToString = _baseSetToString,
	  shortOut = _shortOut;
	var setToString$1 = shortOut(baseSetToString);
	var _setToString = setToString$1;
	getDefaultExportFromCjs(_setToString);

	var flatten = flatten_1,
	  overRest = _overRest,
	  setToString = _setToString;
	function flatRest$2(func) {
	  return setToString(overRest(func, undefined, flatten), func + '');
	}
	var _flatRest = flatRest$2;
	getDefaultExportFromCjs(_flatRest);

	var arrayMap = _arrayMap,
	  baseClone = _baseClone,
	  baseUnset = _baseUnset,
	  castPath$3 = _castPath,
	  copyObject = _copyObject,
	  customOmitClone = _customOmitClone,
	  flatRest$1 = _flatRest,
	  getAllKeysIn = _getAllKeysIn;
	var CLONE_DEEP_FLAG = 1,
	  CLONE_FLAT_FLAG = 2,
	  CLONE_SYMBOLS_FLAG = 4;
	var omit = flatRest$1(function (object, paths) {
	  var result = {};
	  if (object == null) {
	    return result;
	  }
	  var isDeep = false;
	  paths = arrayMap(paths, function (path) {
	    path = castPath$3(path, object);
	    isDeep || (isDeep = path.length > 1);
	    return path;
	  });
	  copyObject(object, getAllKeysIn(object), result);
	  if (isDeep) {
	    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
	  }
	  var length = paths.length;
	  while (length--) {
	    baseUnset(result, paths[length]);
	  }
	  return result;
	});
	var omit_1 = omit;
	var omit$1 = getDefaultExportFromCjs(omit_1);

	var assignValue$1 = _assignValue,
	  castPath$2 = _castPath,
	  isIndex$1 = _isIndex,
	  isObject$2 = isObject_1,
	  toKey$1 = _toKey;
	function baseSet$1(object, path, value, customizer) {
	  if (!isObject$2(object)) {
	    return object;
	  }
	  path = castPath$2(path, object);
	  var index = -1,
	    length = path.length,
	    lastIndex = length - 1,
	    nested = object;
	  while (nested != null && ++index < length) {
	    var key = toKey$1(path[index]),
	      newValue = value;
	    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
	      return object;
	    }
	    if (index != lastIndex) {
	      var objValue = nested[key];
	      newValue = customizer ? customizer(objValue, key, nested) : undefined;
	      if (newValue === undefined) {
	        newValue = isObject$2(objValue) ? objValue : isIndex$1(path[index + 1]) ? [] : {};
	      }
	    }
	    assignValue$1(nested, key, newValue);
	    nested = nested[key];
	  }
	  return object;
	}
	var _baseSet = baseSet$1;
	getDefaultExportFromCjs(_baseSet);

	var baseGet = _baseGet,
	  baseSet = _baseSet,
	  castPath$1 = _castPath;
	function basePickBy$1(object, paths, predicate) {
	  var index = -1,
	    length = paths.length,
	    result = {};
	  while (++index < length) {
	    var path = paths[index],
	      value = baseGet(object, path);
	    if (predicate(value, path)) {
	      baseSet(result, castPath$1(path, object), value);
	    }
	  }
	  return result;
	}
	var _basePickBy = basePickBy$1;
	getDefaultExportFromCjs(_basePickBy);

	function baseHasIn$1(object, key) {
	  return object != null && key in Object(object);
	}
	var _baseHasIn = baseHasIn$1;
	getDefaultExportFromCjs(_baseHasIn);

	var castPath = _castPath,
	  isArguments = isArguments_1,
	  isArray$1 = isArray_1,
	  isIndex = _isIndex,
	  isLength = isLength_1,
	  toKey = _toKey;
	function hasPath$1(object, path, hasFunc) {
	  path = castPath(path, object);
	  var index = -1,
	    length = path.length,
	    result = false;
	  while (++index < length) {
	    var key = toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object == null ? 0 : object.length;
	  return !!length && isLength(length) && isIndex(key, length) && (isArray$1(object) || isArguments(object));
	}
	var _hasPath = hasPath$1;
	getDefaultExportFromCjs(_hasPath);

	var baseHasIn = _baseHasIn,
	  hasPath = _hasPath;
	function hasIn$1(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}
	var hasIn_1 = hasIn$1;
	getDefaultExportFromCjs(hasIn_1);

	var basePickBy = _basePickBy,
	  hasIn = hasIn_1;
	function basePick$1(object, paths) {
	  return basePickBy(object, paths, function (value, path) {
	    return hasIn(object, path);
	  });
	}
	var _basePick = basePick$1;
	getDefaultExportFromCjs(_basePick);

	var basePick = _basePick,
	  flatRest = _flatRest;
	var pick = flatRest(function (object, paths) {
	  return object == null ? {} : basePick(object, paths);
	});
	var pick_1 = pick;
	getDefaultExportFromCjs(pick_1);

	function baseFindIndex$1(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	    index = fromIndex + (fromRight ? 1 : -1);
	  while (fromRight ? index-- : ++index < length) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}
	var _baseFindIndex = baseFindIndex$1;
	getDefaultExportFromCjs(_baseFindIndex);

	function baseIsNaN$1(value) {
	  return value !== value;
	}
	var _baseIsNaN = baseIsNaN$1;
	getDefaultExportFromCjs(_baseIsNaN);

	function strictIndexOf$1(array, value, fromIndex) {
	  var index = fromIndex - 1,
	    length = array.length;
	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}
	var _strictIndexOf = strictIndexOf$1;
	getDefaultExportFromCjs(_strictIndexOf);

	var baseFindIndex = _baseFindIndex,
	  baseIsNaN = _baseIsNaN,
	  strictIndexOf = _strictIndexOf;
	function baseIndexOf$1(array, value, fromIndex) {
	  return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
	}
	var _baseIndexOf = baseIndexOf$1;
	getDefaultExportFromCjs(_baseIndexOf);

	var baseIndexOf = _baseIndexOf;
	function arrayIncludes$1(array, value) {
	  var length = array == null ? 0 : array.length;
	  return !!length && baseIndexOf(array, value, 0) > -1;
	}
	var _arrayIncludes = arrayIncludes$1;
	getDefaultExportFromCjs(_arrayIncludes);

	function arrayIncludesWith$1(array, value, comparator) {
	  var index = -1,
	    length = array == null ? 0 : array.length;
	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}
	var _arrayIncludesWith = arrayIncludesWith$1;
	getDefaultExportFromCjs(_arrayIncludesWith);

	function noop$1() {}
	var noop_1 = noop$1;
	getDefaultExportFromCjs(noop_1);

	var Set = _Set,
	  noop = noop_1,
	  setToArray$1 = _setToArray;
	var INFINITY$2 = 1 / 0;
	var createSet$1 = !(Set && 1 / setToArray$1(new Set([, -0]))[1] == INFINITY$2) ? noop : function (values) {
	  return new Set(values);
	};
	var _createSet = createSet$1;
	getDefaultExportFromCjs(_createSet);

	var SetCache = _SetCache,
	  arrayIncludes = _arrayIncludes,
	  arrayIncludesWith = _arrayIncludesWith,
	  cacheHas = _cacheHas,
	  createSet = _createSet,
	  setToArray = _setToArray;
	var LARGE_ARRAY_SIZE = 200;
	function baseUniq$2(array, iteratee, comparator) {
	  var index = -1,
	    includes = arrayIncludes,
	    length = array.length,
	    isCommon = true,
	    result = [],
	    seen = result;
	  if (comparator) {
	    isCommon = false;
	    includes = arrayIncludesWith;
	  } else if (length >= LARGE_ARRAY_SIZE) {
	    var set = iteratee ? null : createSet(array);
	    if (set) {
	      return setToArray(set);
	    }
	    isCommon = false;
	    includes = cacheHas;
	    seen = new SetCache();
	  } else {
	    seen = iteratee ? [] : result;
	  }
	  outer: while (++index < length) {
	    var value = array[index],
	      computed = iteratee ? iteratee(value) : value;
	    value = comparator || value !== 0 ? value : 0;
	    if (isCommon && computed === computed) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    } else if (!includes(seen, computed, comparator)) {
	      if (seen !== result) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}
	var _baseUniq = baseUniq$2;
	getDefaultExportFromCjs(_baseUniq);

	var baseUniq$1 = _baseUniq;
	function uniq(array) {
	  return array && array.length ? baseUniq$1(array) : [];
	}
	var uniq_1 = uniq;
	getDefaultExportFromCjs(uniq_1);

	var baseUniq = _baseUniq;
	function uniqWith(array, comparator) {
	  comparator = typeof comparator == 'function' ? comparator : undefined;
	  return array && array.length ? baseUniq(array, undefined, comparator) : [];
	}
	var uniqWith_1 = uniqWith;
	var uniqWith$1 = getDefaultExportFromCjs(uniqWith_1);

	function baseZipObject$1(props, values, assignFunc) {
	  var index = -1,
	    length = props.length,
	    valsLength = values.length,
	    result = {};
	  while (++index < length) {
	    var value = index < valsLength ? values[index] : undefined;
	    assignFunc(result, props[index], value);
	  }
	  return result;
	}
	var _baseZipObject = baseZipObject$1;
	getDefaultExportFromCjs(_baseZipObject);

	var assignValue = _assignValue,
	  baseZipObject = _baseZipObject;
	function zipObject(props, values) {
	  return baseZipObject(props || [], values || [], assignValue);
	}
	var zipObject_1 = zipObject;
	getDefaultExportFromCjs(zipObject_1);

	function pipe() {
	    var fns = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        fns[_i] = arguments[_i];
	    }
	    return function (v, o) { return (fns || []).reduce(function (y, f) { return f(y, o); }, v); };
	}
	function UniqWith(arr, compareFn) {
	    return uniqWith$1(arr, compareFn);
	}
	function Omit(object, keys) {
	    return omit$1(object, keys);
	}
	function CloneValueDeep(value) {
	    return cloneDeep$1(value);
	}
	function isUndefined$3(o) {
	    return o === undefined;
	}
	function isEmpty(o) {
	    return o === null || isUndefined$3(o);
	}
	function isEmptyString(o) {
	    return isEmpty(o) || o === '';
	}
	function IsKeyIn(o, key) {
	    return !!o && typeof o === 'object' && key in o;
	}
	function isEmptyArray(value) {
	    if (isEmpty(value)) {
	        return true;
	    }
	    return Array.isArray(value) && !(value === null || value === void 0 ? void 0 : value.length);
	}
	function isEqualObject(obj, cObj) {
	    return isEqual$1(obj, cObj);
	}

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var ChartFilterCondition = /** @class */ (function () {
	    function ChartFilterCondition(condition) {
	        this.name = '';
	        this.type = FilterConditionType.Filter;
	        this.visualType = '';
	        if (condition) {
	            this.name = condition.name;
	            this.type = condition.type || this.type;
	            this.value = condition.value;
	            this.visualType = condition.visualType;
	            this.operator = condition.operator;
	            this.children = (condition.children || []).map(function (child) { return new ChartFilterCondition(child); });
	        }
	    }
	    ChartFilterCondition.prototype.setValue = function (value) {
	        this.value = value;
	    };
	    ChartFilterCondition.prototype.setType = function (type) {
	        this.type = type;
	    };
	    ChartFilterCondition.prototype.setOperator = function (operator) {
	        this.operator = operator;
	    };
	    ChartFilterCondition.prototype.removeChild = function (index) {
	        var _a;
	        if (this.children && this.children.length > 2) {
	            (_a = this.children) === null || _a === void 0 ? void 0 : _a.splice(index, 1);
	        }
	        else if (this.children && this.children.length === 2) {
	            this.children.splice(index, 1);
	            var child = this.children[0];
	            this.type = FilterConditionType.Filter;
	            this.operator = child.operator;
	            this.value = child.value;
	            this.children = [];
	        }
	    };
	    ChartFilterCondition.prototype.updateChild = function (index, child) {
	        if (this.children && this.children.length >= index + 1) {
	            this.children[index] = child;
	        }
	    };
	    ChartFilterCondition.prototype.appendChild = function (index) {
	        var _a;
	        if (this.type === FilterConditionType.Relation) {
	            if (index === null || index === undefined) {
	                this.children = (this.children || []).concat(new ConditionBuilder(this).asFilter());
	            }
	            else if (index >= 0) {
	                (_a = this.children) === null || _a === void 0 ? void 0 : _a.splice(index, 0, new ConditionBuilder(this).asFilter());
	            }
	        }
	        else {
	            this.children = [
	                new ConditionBuilder(this).asFilter(),
	                new ConditionBuilder(this).asFilter(),
	            ];
	            this.type = FilterConditionType.Relation;
	            this.value = FilterRelationType.AND;
	            this.operator = undefined;
	        }
	    };
	    return ChartFilterCondition;
	}());
	var ConditionBuilder = /** @class */ (function () {
	    function ConditionBuilder(condition) {
	        var _a;
	        this.condition = new ChartFilterCondition();
	        if (condition) {
	            this.condition.name = condition.name;
	            this.condition.visualType = condition.visualType;
	            this.condition.type = condition.type;
	            this.condition.value = condition.value;
	            this.condition.operator = condition.operator;
	        }
	        if (Array.isArray(condition === null || condition === void 0 ? void 0 : condition.children)) {
	            this.condition.children = (_a = condition === null || condition === void 0 ? void 0 : condition.children) === null || _a === void 0 ? void 0 : _a.map(function (child) {
	                return new ConditionBuilder(child).asSelf();
	            });
	        }
	    }
	    ConditionBuilder.prototype.setName = function (name) {
	        this.condition.name = name;
	        return this;
	    };
	    ConditionBuilder.prototype.setSqlType = function (sqlType) {
	        this.condition.visualType = sqlType;
	        return this;
	    };
	    ConditionBuilder.prototype.setValue = function (value) {
	        this.condition.value = value;
	        return this;
	    };
	    ConditionBuilder.prototype.setOperator = function (operator) {
	        this.condition.operator = operator;
	        return this;
	    };
	    ConditionBuilder.prototype.asSelf = function () {
	        return this.condition;
	    };
	    ConditionBuilder.prototype.asFilter = function (conditionType) {
	        this.condition.type = conditionType || FilterConditionType.Filter;
	        return this.condition;
	    };
	    ConditionBuilder.prototype.asRelation = function (value, children) {
	        this.condition.type = FilterConditionType.Relation;
	        this.condition.value = value || this.condition.value;
	        this.condition.children = children || this.condition.children;
	        return this.condition;
	    };
	    ConditionBuilder.prototype.asRangeTime = function (name, sqlType) {
	        this.condition.type = FilterConditionType.RangeTime;
	        this.condition.operator = FilterSqlOperator.Between;
	        this.condition.name = name || this.condition.name;
	        this.condition.visualType = sqlType || this.condition.visualType;
	        return this.condition;
	    };
	    ConditionBuilder.prototype.asRecommendTime = function (name, sqlType) {
	        this.condition.type = FilterConditionType.RecommendTime;
	        this.condition.operator = FilterSqlOperator.Between;
	        this.condition.name = name || this.condition.name;
	        this.condition.visualType = sqlType || this.condition.visualType;
	        return this.condition;
	    };
	    ConditionBuilder.prototype.asGeneral = function (name, sqlType) {
	        this.condition.type = FilterConditionType.List;
	        this.condition.name = name || this.condition.name;
	        this.condition.visualType = sqlType || this.condition.visualType;
	        return this.condition;
	    };
	    ConditionBuilder.prototype.asCustomize = function (name, sqlType) {
	        this.condition.type = FilterConditionType.Customize;
	        this.condition.name = name || this.condition.name;
	        this.condition.visualType = sqlType || this.condition.visualType;
	        return this.condition;
	    };
	    ConditionBuilder.prototype.asCondition = function (name, sqlType) {
	        this.condition.type = FilterConditionType.Condition;
	        this.condition.name = name || this.condition.name;
	        this.condition.visualType = sqlType || this.condition.visualType;
	        return this.condition;
	    };
	    ConditionBuilder.prototype.asSingleOrRangeValue = function (name, sqlType) {
	        this.condition.type = [
	            FilterSqlOperator.Between,
	            FilterSqlOperator.NotBetween,
	        ].includes(this.condition.operator)
	            ? FilterConditionType.RangeValue
	            : FilterConditionType.Value;
	        this.condition.name = name || this.condition.name;
	        this.condition.visualType = sqlType || this.condition.visualType;
	        return this.condition;
	    };
	    ConditionBuilder.prototype.asTree = function (name, sqlType) {
	        this.condition.type = FilterConditionType.Tree;
	        this.condition.name = name || this.condition.name;
	        this.condition.visualType = sqlType || this.condition.visualType;
	        return this.condition;
	    };
	    return ConditionBuilder;
	}());

	var DrillMode;
	(function (DrillMode) {
	    DrillMode["Normal"] = "normal";
	    DrillMode["Drill"] = "drill";
	    DrillMode["Expand"] = "expand";
	})(DrillMode || (DrillMode = {}));
	/** @class */ ((function () {
	    function ChartDrillOption(fields) {
	        this.cursor = -1;
	        this.isSelected = false;
	        this.drillFields = [];
	        this.drillDownFields = [];
	        this.expandDownFields = [];
	        this.drillFields = fields;
	        this.clearAll();
	    }
	    Object.defineProperty(ChartDrillOption.prototype, "mode", {
	        get: function () {
	            if (!isEmptyArray(this.drillDownFields)) {
	                return DrillMode.Drill;
	            }
	            else if (!isEmptyArray(this.expandDownFields)) {
	                return DrillMode.Expand;
	            }
	            return DrillMode.Normal;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(ChartDrillOption.prototype, "isSelectedDrill", {
	        get: function () {
	            return this.isSelected;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(ChartDrillOption.prototype, "isBottomLevel", {
	        get: function () {
	            return this.cursor + 2 === this.drillFields.length;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(ChartDrillOption.prototype, "isDrillable", {
	        get: function () {
	            return this.drillFields.length > 1;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(ChartDrillOption.prototype, "canSelect", {
	        get: function () {
	            return isEmptyArray(this.expandDownFields);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    ChartDrillOption.prototype.toggleSelectedDrill = function (enable) {
	        if (enable !== undefined) {
	            this.isSelected = Boolean(enable);
	        }
	        else {
	            this.isSelected = !this.isSelected;
	        }
	    };
	    ChartDrillOption.prototype.getAllFields = function () {
	        return this.drillFields;
	    };
	    ChartDrillOption.prototype.getAllDrillDownFields = function () {
	        return this.drillDownFields;
	    };
	    ChartDrillOption.prototype.getDrilledFields = function () {
	        if (this.mode === DrillMode.Normal) {
	            return [];
	        }
	        return this.drillFields.slice(0, this.cursor + 2);
	    };
	    ChartDrillOption.prototype.getCurrentFields = function () {
	        var _a;
	        return this.cursor === -1
	            ? undefined
	            : this.mode === DrillMode.Drill
	                ? [(_a = this.drillFields) === null || _a === void 0 ? void 0 : _a[this.cursor + 1]]
	                : this.drillFields.slice(0, this.cursor + 2);
	    };
	    ChartDrillOption.prototype.getCurrentDrillLevel = function () {
	        return this.cursor + 1;
	    };
	    ChartDrillOption.prototype.drillDown = function (filterData) {
	        if (this.drillFields.length === this.cursor + 2) {
	            return;
	        }
	        this.cursor++;
	        var currentField = this.drillFields[this.cursor];
	        var cond;
	        if (currentField && filterData) {
	            cond = new ConditionBuilder()
	                .setName(currentField.colName)
	                .setOperator(FilterSqlOperator.Equal)
	                .setValue(filterData[currentField.colName])
	                .asFilter();
	        }
	        this.drillDownFields.push({
	            field: currentField,
	            condition: cond,
	        });
	    };
	    ChartDrillOption.prototype.expandDown = function () {
	        this.isSelected = false;
	        if (this.drillFields.length === this.cursor + 2) {
	            return;
	        }
	        this.cursor++;
	        var currentField = this.drillFields[this.cursor];
	        this.expandDownFields.push({
	            field: currentField,
	        });
	    };
	    ChartDrillOption.prototype.drillUp = function (field) {
	        if (this.cursor === -1) {
	            return;
	        }
	        if (field) {
	            var fieldIndex = this.drillDownFields.findIndex(function (d) { return d.field.uid === field.uid; });
	            if (fieldIndex === 0) {
	                this.clearAll();
	            }
	            else if (fieldIndex >= 1) {
	                this.drillDownFields = this.drillDownFields.slice(0, fieldIndex);
	                this.cursor = fieldIndex - 1;
	            }
	        }
	        else {
	            this.cursor--;
	            this.drillDownFields.pop();
	            if (isEmptyArray(this.drillDownFields)) {
	                this.clearAll();
	            }
	        }
	    };
	    ChartDrillOption.prototype.expandUp = function (field) {
	        if (this.cursor === -1) {
	            return;
	        }
	        if (field) {
	            var fieldIndex = this.expandDownFields.findIndex(function (d) { return d.field.uid === field.uid; });
	            if (fieldIndex === 0) {
	                this.clearAll();
	            }
	            else if (fieldIndex >= 1) {
	                this.expandDownFields = this.expandDownFields.slice(0, fieldIndex);
	                this.cursor = fieldIndex - 1;
	            }
	        }
	        else {
	            this.cursor--;
	            this.expandDownFields.pop();
	            if (isEmptyArray(this.expandDownFields)) {
	                this.clearAll();
	            }
	        }
	    };
	    ChartDrillOption.prototype.rollUp = function () {
	        if (this.mode === DrillMode.Drill) {
	            return this.drillUp();
	        }
	        else if (this.mode === DrillMode.Expand) {
	            return this.expandUp();
	        }
	    };
	    ChartDrillOption.prototype.clearAll = function () {
	        this.cursor = -1;
	        this.drillDownFields = [];
	        this.expandDownFields = [];
	    };
	    return ChartDrillOption;
	})());

	var baseFlatten = _baseFlatten;
	var INFINITY$1 = 1 / 0;
	function flattenDeep(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseFlatten(array, INFINITY$1) : [];
	}
	var flattenDeep_1 = flattenDeep;
	getDefaultExportFromCjs(flattenDeep_1);

	function head(array) {
	  return array && array.length ? array[0] : undefined;
	}
	var head_1 = head;
	getDefaultExportFromCjs(head_1);

	var hookCallback;
	function hooks() {
	  return hookCallback.apply(null, arguments);
	}
	function setHookCallback(callback) {
	  hookCallback = callback;
	}
	function isArray(input) {
	  return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	}
	function isObject$1(input) {
	  return input != null && Object.prototype.toString.call(input) === '[object Object]';
	}
	function hasOwnProp(a, b) {
	  return Object.prototype.hasOwnProperty.call(a, b);
	}
	function isObjectEmpty(obj) {
	  if (Object.getOwnPropertyNames) {
	    return Object.getOwnPropertyNames(obj).length === 0;
	  } else {
	    var k;
	    for (k in obj) {
	      if (hasOwnProp(obj, k)) {
	        return false;
	      }
	    }
	    return true;
	  }
	}
	function isUndefined$2(input) {
	  return input === void 0;
	}
	function isNumber(input) {
	  return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
	}
	function isDate(input) {
	  return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	}
	function map(arr, fn) {
	  var res = [],
	    i,
	    arrLen = arr.length;
	  for (i = 0; i < arrLen; ++i) {
	    res.push(fn(arr[i], i));
	  }
	  return res;
	}
	function extend(a, b) {
	  for (var i in b) {
	    if (hasOwnProp(b, i)) {
	      a[i] = b[i];
	    }
	  }
	  if (hasOwnProp(b, 'toString')) {
	    a.toString = b.toString;
	  }
	  if (hasOwnProp(b, 'valueOf')) {
	    a.valueOf = b.valueOf;
	  }
	  return a;
	}
	function createUTC(input, format, locale, strict) {
	  return createLocalOrUTC(input, format, locale, strict, true).utc();
	}
	function defaultParsingFlags() {
	  return {
	    empty: false,
	    unusedTokens: [],
	    unusedInput: [],
	    overflow: -2,
	    charsLeftOver: 0,
	    nullInput: false,
	    invalidEra: null,
	    invalidMonth: null,
	    invalidFormat: false,
	    userInvalidated: false,
	    iso: false,
	    parsedDateParts: [],
	    era: null,
	    meridiem: null,
	    rfc2822: false,
	    weekdayMismatch: false
	  };
	}
	function getParsingFlags(m) {
	  if (m._pf == null) {
	    m._pf = defaultParsingFlags();
	  }
	  return m._pf;
	}
	var some;
	if (Array.prototype.some) {
	  some = Array.prototype.some;
	} else {
	  some = function some(fun) {
	    var t = Object(this),
	      len = t.length >>> 0,
	      i;
	    for (i = 0; i < len; i++) {
	      if (i in t && fun.call(this, t[i], i, t)) {
	        return true;
	      }
	    }
	    return false;
	  };
	}
	function isValid(m) {
	  if (m._isValid == null) {
	    var flags = getParsingFlags(m),
	      parsedParts = some.call(flags.parsedDateParts, function (i) {
	        return i != null;
	      }),
	      isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
	    if (m._strict) {
	      isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
	    }
	    if (Object.isFrozen == null || !Object.isFrozen(m)) {
	      m._isValid = isNowValid;
	    } else {
	      return isNowValid;
	    }
	  }
	  return m._isValid;
	}
	function createInvalid(flags) {
	  var m = createUTC(NaN);
	  if (flags != null) {
	    extend(getParsingFlags(m), flags);
	  } else {
	    getParsingFlags(m).userInvalidated = true;
	  }
	  return m;
	}
	var momentProperties = hooks.momentProperties = [],
	  updateInProgress = false;
	function copyConfig(to, from) {
	  var i,
	    prop,
	    val,
	    momentPropertiesLen = momentProperties.length;
	  if (!isUndefined$2(from._isAMomentObject)) {
	    to._isAMomentObject = from._isAMomentObject;
	  }
	  if (!isUndefined$2(from._i)) {
	    to._i = from._i;
	  }
	  if (!isUndefined$2(from._f)) {
	    to._f = from._f;
	  }
	  if (!isUndefined$2(from._l)) {
	    to._l = from._l;
	  }
	  if (!isUndefined$2(from._strict)) {
	    to._strict = from._strict;
	  }
	  if (!isUndefined$2(from._tzm)) {
	    to._tzm = from._tzm;
	  }
	  if (!isUndefined$2(from._isUTC)) {
	    to._isUTC = from._isUTC;
	  }
	  if (!isUndefined$2(from._offset)) {
	    to._offset = from._offset;
	  }
	  if (!isUndefined$2(from._pf)) {
	    to._pf = getParsingFlags(from);
	  }
	  if (!isUndefined$2(from._locale)) {
	    to._locale = from._locale;
	  }
	  if (momentPropertiesLen > 0) {
	    for (i = 0; i < momentPropertiesLen; i++) {
	      prop = momentProperties[i];
	      val = from[prop];
	      if (!isUndefined$2(val)) {
	        to[prop] = val;
	      }
	    }
	  }
	  return to;
	}
	function Moment(config) {
	  copyConfig(this, config);
	  this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	  if (!this.isValid()) {
	    this._d = new Date(NaN);
	  }
	  if (updateInProgress === false) {
	    updateInProgress = true;
	    hooks.updateOffset(this);
	    updateInProgress = false;
	  }
	}
	function isMoment(obj) {
	  return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
	}
	function warn(msg) {
	  if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
	    console.warn('Deprecation warning: ' + msg);
	  }
	}
	function deprecate(msg, fn) {
	  var firstTime = true;
	  return extend(function () {
	    if (hooks.deprecationHandler != null) {
	      hooks.deprecationHandler(null, msg);
	    }
	    if (firstTime) {
	      var args = [],
	        arg,
	        i,
	        key,
	        argLen = arguments.length;
	      for (i = 0; i < argLen; i++) {
	        arg = '';
	        if (_typeof$1(arguments[i]) === 'object') {
	          arg += '\n[' + i + '] ';
	          for (key in arguments[0]) {
	            if (hasOwnProp(arguments[0], key)) {
	              arg += key + ': ' + arguments[0][key] + ', ';
	            }
	          }
	          arg = arg.slice(0, -2);
	        } else {
	          arg = arguments[i];
	        }
	        args.push(arg);
	      }
	      warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
	      firstTime = false;
	    }
	    return fn.apply(this, arguments);
	  }, fn);
	}
	var deprecations = {};
	function deprecateSimple(name, msg) {
	  if (hooks.deprecationHandler != null) {
	    hooks.deprecationHandler(name, msg);
	  }
	  if (!deprecations[name]) {
	    warn(msg);
	    deprecations[name] = true;
	  }
	}
	hooks.suppressDeprecationWarnings = false;
	hooks.deprecationHandler = null;
	function isFunction(input) {
	  return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}
	function set(config) {
	  var prop, i;
	  for (i in config) {
	    if (hasOwnProp(config, i)) {
	      prop = config[i];
	      if (isFunction(prop)) {
	        this[i] = prop;
	      } else {
	        this['_' + i] = prop;
	      }
	    }
	  }
	  this._config = config;
	  this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
	}
	function mergeConfigs(parentConfig, childConfig) {
	  var res = extend({}, parentConfig),
	    prop;
	  for (prop in childConfig) {
	    if (hasOwnProp(childConfig, prop)) {
	      if (isObject$1(parentConfig[prop]) && isObject$1(childConfig[prop])) {
	        res[prop] = {};
	        extend(res[prop], parentConfig[prop]);
	        extend(res[prop], childConfig[prop]);
	      } else if (childConfig[prop] != null) {
	        res[prop] = childConfig[prop];
	      } else {
	        delete res[prop];
	      }
	    }
	  }
	  for (prop in parentConfig) {
	    if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject$1(parentConfig[prop])) {
	      res[prop] = extend({}, res[prop]);
	    }
	  }
	  return res;
	}
	function Locale(config) {
	  if (config != null) {
	    this.set(config);
	  }
	}
	var keys;
	if (Object.keys) {
	  keys = Object.keys;
	} else {
	  keys = function keys(obj) {
	    var i,
	      res = [];
	    for (i in obj) {
	      if (hasOwnProp(obj, i)) {
	        res.push(i);
	      }
	    }
	    return res;
	  };
	}
	var defaultCalendar = {
	  sameDay: '[Today at] LT',
	  nextDay: '[Tomorrow at] LT',
	  nextWeek: 'dddd [at] LT',
	  lastDay: '[Yesterday at] LT',
	  lastWeek: '[Last] dddd [at] LT',
	  sameElse: 'L'
	};
	function calendar(key, mom, now) {
	  var output = this._calendar[key] || this._calendar['sameElse'];
	  return isFunction(output) ? output.call(mom, now) : output;
	}
	function zeroFill(number, targetLength, forceSign) {
	  var absNumber = '' + Math.abs(number),
	    zerosToFill = targetLength - absNumber.length,
	    sign = number >= 0;
	  return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	}
	var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
	  localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
	  formatFunctions = {},
	  formatTokenFunctions = {};
	function addFormatToken(token, padded, ordinal, callback) {
	  var func = callback;
	  if (typeof callback === 'string') {
	    func = function func() {
	      return this[callback]();
	    };
	  }
	  if (token) {
	    formatTokenFunctions[token] = func;
	  }
	  if (padded) {
	    formatTokenFunctions[padded[0]] = function () {
	      return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	    };
	  }
	  if (ordinal) {
	    formatTokenFunctions[ordinal] = function () {
	      return this.localeData().ordinal(func.apply(this, arguments), token);
	    };
	  }
	}
	function removeFormattingTokens(input) {
	  if (input.match(/\[[\s\S]/)) {
	    return input.replace(/^\[|\]$/g, '');
	  }
	  return input.replace(/\\/g, '');
	}
	function makeFormatFunction(format) {
	  var array = format.match(formattingTokens),
	    i,
	    length;
	  for (i = 0, length = array.length; i < length; i++) {
	    if (formatTokenFunctions[array[i]]) {
	      array[i] = formatTokenFunctions[array[i]];
	    } else {
	      array[i] = removeFormattingTokens(array[i]);
	    }
	  }
	  return function (mom) {
	    var output = '',
	      i;
	    for (i = 0; i < length; i++) {
	      output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
	    }
	    return output;
	  };
	}
	function formatMoment(m, format) {
	  if (!m.isValid()) {
	    return m.localeData().invalidDate();
	  }
	  format = expandFormat(format, m.localeData());
	  formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
	  return formatFunctions[format](m);
	}
	function expandFormat(format, locale) {
	  var i = 5;
	  function replaceLongDateFormatTokens(input) {
	    return locale.longDateFormat(input) || input;
	  }
	  localFormattingTokens.lastIndex = 0;
	  while (i >= 0 && localFormattingTokens.test(format)) {
	    format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	    localFormattingTokens.lastIndex = 0;
	    i -= 1;
	  }
	  return format;
	}
	var defaultLongDateFormat = {
	  LTS: 'h:mm:ss A',
	  LT: 'h:mm A',
	  L: 'MM/DD/YYYY',
	  LL: 'MMMM D, YYYY',
	  LLL: 'MMMM D, YYYY h:mm A',
	  LLLL: 'dddd, MMMM D, YYYY h:mm A'
	};
	function longDateFormat(key) {
	  var format = this._longDateFormat[key],
	    formatUpper = this._longDateFormat[key.toUpperCase()];
	  if (format || !formatUpper) {
	    return format;
	  }
	  this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function (tok) {
	    if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') {
	      return tok.slice(1);
	    }
	    return tok;
	  }).join('');
	  return this._longDateFormat[key];
	}
	var defaultInvalidDate = 'Invalid date';
	function invalidDate() {
	  return this._invalidDate;
	}
	var defaultOrdinal = '%d',
	  defaultDayOfMonthOrdinalParse = /\d{1,2}/;
	function ordinal(number) {
	  return this._ordinal.replace('%d', number);
	}
	var defaultRelativeTime = {
	  future: 'in %s',
	  past: '%s ago',
	  s: 'a few seconds',
	  ss: '%d seconds',
	  m: 'a minute',
	  mm: '%d minutes',
	  h: 'an hour',
	  hh: '%d hours',
	  d: 'a day',
	  dd: '%d days',
	  w: 'a week',
	  ww: '%d weeks',
	  M: 'a month',
	  MM: '%d months',
	  y: 'a year',
	  yy: '%d years'
	};
	function relativeTime(number, withoutSuffix, string, isFuture) {
	  var output = this._relativeTime[string];
	  return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
	}
	function pastFuture(diff, output) {
	  var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	  return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	}
	var aliases = {};
	function addUnitAlias(unit, shorthand) {
	  var lowerCase = unit.toLowerCase();
	  aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	}
	function normalizeUnits(units) {
	  return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	}
	function normalizeObjectUnits(inputObject) {
	  var normalizedInput = {},
	    normalizedProp,
	    prop;
	  for (prop in inputObject) {
	    if (hasOwnProp(inputObject, prop)) {
	      normalizedProp = normalizeUnits(prop);
	      if (normalizedProp) {
	        normalizedInput[normalizedProp] = inputObject[prop];
	      }
	    }
	  }
	  return normalizedInput;
	}
	var priorities = {};
	function addUnitPriority(unit, priority) {
	  priorities[unit] = priority;
	}
	function getPrioritizedUnits(unitsObj) {
	  var units = [],
	    u;
	  for (u in unitsObj) {
	    if (hasOwnProp(unitsObj, u)) {
	      units.push({
	        unit: u,
	        priority: priorities[u]
	      });
	    }
	  }
	  units.sort(function (a, b) {
	    return a.priority - b.priority;
	  });
	  return units;
	}
	function isLeapYear(year) {
	  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
	}
	function absFloor(number) {
	  if (number < 0) {
	    return Math.ceil(number) || 0;
	  } else {
	    return Math.floor(number);
	  }
	}
	function toInt(argumentForCoercion) {
	  var coercedNumber = +argumentForCoercion,
	    value = 0;
	  if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	    value = absFloor(coercedNumber);
	  }
	  return value;
	}
	function makeGetSet(unit, keepTime) {
	  return function (value) {
	    if (value != null) {
	      set$1(this, unit, value);
	      hooks.updateOffset(this, keepTime);
	      return this;
	    } else {
	      return get(this, unit);
	    }
	  };
	}
	function get(mom, unit) {
	  return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	}
	function set$1(mom, unit, value) {
	  if (mom.isValid() && !isNaN(value)) {
	    if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
	      value = toInt(value);
	      mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
	    } else {
	      mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	    }
	  }
	}
	function stringGet(units) {
	  units = normalizeUnits(units);
	  if (isFunction(this[units])) {
	    return this[units]();
	  }
	  return this;
	}
	function stringSet(units, value) {
	  if (_typeof$1(units) === 'object') {
	    units = normalizeObjectUnits(units);
	    var prioritized = getPrioritizedUnits(units),
	      i,
	      prioritizedLen = prioritized.length;
	    for (i = 0; i < prioritizedLen; i++) {
	      this[prioritized[i].unit](units[prioritized[i].unit]);
	    }
	  } else {
	    units = normalizeUnits(units);
	    if (isFunction(this[units])) {
	      return this[units](value);
	    }
	  }
	  return this;
	}
	var match1 = /\d/,
	  match2 = /\d\d/,
	  match3 = /\d{3}/,
	  match4 = /\d{4}/,
	  match6 = /[+-]?\d{6}/,
	  match1to2 = /\d\d?/,
	  match3to4 = /\d\d\d\d?/,
	  match5to6 = /\d\d\d\d\d\d?/,
	  match1to3 = /\d{1,3}/,
	  match1to4 = /\d{1,4}/,
	  match1to6 = /[+-]?\d{1,6}/,
	  matchUnsigned = /\d+/,
	  matchSigned = /[+-]?\d+/,
	  matchOffset = /Z|[+-]\d\d:?\d\d/gi,
	  matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi,
	  matchTimestamp = /[+-]?\d+(\.\d{1,3})?/,
	  matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
	  regexes;
	regexes = {};
	function addRegexToken(token, regex, strictRegex) {
	  regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	    return isStrict && strictRegex ? strictRegex : regex;
	  };
	}
	function getParseRegexForToken(token, config) {
	  if (!hasOwnProp(regexes, token)) {
	    return new RegExp(unescapeFormat(token));
	  }
	  return regexes[token](config._strict, config._locale);
	}
	function unescapeFormat(s) {
	  return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	    return p1 || p2 || p3 || p4;
	  }));
	}
	function regexEscape(s) {
	  return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	}
	var tokens = {};
	function addParseToken(token, callback) {
	  var i,
	    func = callback,
	    tokenLen;
	  if (typeof token === 'string') {
	    token = [token];
	  }
	  if (isNumber(callback)) {
	    func = function func(input, array) {
	      array[callback] = toInt(input);
	    };
	  }
	  tokenLen = token.length;
	  for (i = 0; i < tokenLen; i++) {
	    tokens[token[i]] = func;
	  }
	}
	function addWeekParseToken(token, callback) {
	  addParseToken(token, function (input, array, config, token) {
	    config._w = config._w || {};
	    callback(input, config._w, config, token);
	  });
	}
	function addTimeToArrayFromToken(token, input, config) {
	  if (input != null && hasOwnProp(tokens, token)) {
	    tokens[token](input, config._a, config, token);
	  }
	}
	var YEAR = 0,
	  MONTH = 1,
	  DATE = 2,
	  HOUR = 3,
	  MINUTE = 4,
	  SECOND = 5,
	  MILLISECOND = 6,
	  WEEK = 7,
	  WEEKDAY = 8;
	function mod(n, x) {
	  return (n % x + x) % x;
	}
	var indexOf;
	if (Array.prototype.indexOf) {
	  indexOf = Array.prototype.indexOf;
	} else {
	  indexOf = function indexOf(o) {
	    var i;
	    for (i = 0; i < this.length; ++i) {
	      if (this[i] === o) {
	        return i;
	      }
	    }
	    return -1;
	  };
	}
	function daysInMonth(year, month) {
	  if (isNaN(year) || isNaN(month)) {
	    return NaN;
	  }
	  var modMonth = mod(month, 12);
	  year += (month - modMonth) / 12;
	  return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
	}
	addFormatToken('M', ['MM', 2], 'Mo', function () {
	  return this.month() + 1;
	});
	addFormatToken('MMM', 0, 0, function (format) {
	  return this.localeData().monthsShort(this, format);
	});
	addFormatToken('MMMM', 0, 0, function (format) {
	  return this.localeData().months(this, format);
	});
	addUnitAlias('month', 'M');
	addUnitPriority('month', 8);
	addRegexToken('M', match1to2);
	addRegexToken('MM', match1to2, match2);
	addRegexToken('MMM', function (isStrict, locale) {
	  return locale.monthsShortRegex(isStrict);
	});
	addRegexToken('MMMM', function (isStrict, locale) {
	  return locale.monthsRegex(isStrict);
	});
	addParseToken(['M', 'MM'], function (input, array) {
	  array[MONTH] = toInt(input) - 1;
	});
	addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	  var month = config._locale.monthsParse(input, token, config._strict);
	  if (month != null) {
	    array[MONTH] = month;
	  } else {
	    getParsingFlags(config).invalidMonth = input;
	  }
	});
	var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	  defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	  MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
	  defaultMonthsShortRegex = matchWord,
	  defaultMonthsRegex = matchWord;
	function localeMonths(m, format) {
	  if (!m) {
	    return isArray(this._months) ? this._months : this._months['standalone'];
	  }
	  return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	}
	function localeMonthsShort(m, format) {
	  if (!m) {
	    return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
	  }
	  return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	}
	function handleStrictParse(monthName, format, strict) {
	  var i,
	    ii,
	    mom,
	    llc = monthName.toLocaleLowerCase();
	  if (!this._monthsParse) {
	    this._monthsParse = [];
	    this._longMonthsParse = [];
	    this._shortMonthsParse = [];
	    for (i = 0; i < 12; ++i) {
	      mom = createUTC([2000, i]);
	      this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	      this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	    }
	  }
	  if (strict) {
	    if (format === 'MMM') {
	      ii = indexOf.call(this._shortMonthsParse, llc);
	      return ii !== -1 ? ii : null;
	    } else {
	      ii = indexOf.call(this._longMonthsParse, llc);
	      return ii !== -1 ? ii : null;
	    }
	  } else {
	    if (format === 'MMM') {
	      ii = indexOf.call(this._shortMonthsParse, llc);
	      if (ii !== -1) {
	        return ii;
	      }
	      ii = indexOf.call(this._longMonthsParse, llc);
	      return ii !== -1 ? ii : null;
	    } else {
	      ii = indexOf.call(this._longMonthsParse, llc);
	      if (ii !== -1) {
	        return ii;
	      }
	      ii = indexOf.call(this._shortMonthsParse, llc);
	      return ii !== -1 ? ii : null;
	    }
	  }
	}
	function localeMonthsParse(monthName, format, strict) {
	  var i, mom, regex;
	  if (this._monthsParseExact) {
	    return handleStrictParse.call(this, monthName, format, strict);
	  }
	  if (!this._monthsParse) {
	    this._monthsParse = [];
	    this._longMonthsParse = [];
	    this._shortMonthsParse = [];
	  }
	  for (i = 0; i < 12; i++) {
	    mom = createUTC([2000, i]);
	    if (strict && !this._longMonthsParse[i]) {
	      this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	      this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	    }
	    if (!strict && !this._monthsParse[i]) {
	      regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	      this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	    }
	    if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	      return i;
	    } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	      return i;
	    } else if (!strict && this._monthsParse[i].test(monthName)) {
	      return i;
	    }
	  }
	}
	function setMonth(mom, value) {
	  var dayOfMonth;
	  if (!mom.isValid()) {
	    return mom;
	  }
	  if (typeof value === 'string') {
	    if (/^\d+$/.test(value)) {
	      value = toInt(value);
	    } else {
	      value = mom.localeData().monthsParse(value);
	      if (!isNumber(value)) {
	        return mom;
	      }
	    }
	  }
	  dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	  mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	  return mom;
	}
	function getSetMonth(value) {
	  if (value != null) {
	    setMonth(this, value);
	    hooks.updateOffset(this, true);
	    return this;
	  } else {
	    return get(this, 'Month');
	  }
	}
	function getDaysInMonth() {
	  return daysInMonth(this.year(), this.month());
	}
	function monthsShortRegex(isStrict) {
	  if (this._monthsParseExact) {
	    if (!hasOwnProp(this, '_monthsRegex')) {
	      computeMonthsParse.call(this);
	    }
	    if (isStrict) {
	      return this._monthsShortStrictRegex;
	    } else {
	      return this._monthsShortRegex;
	    }
	  } else {
	    if (!hasOwnProp(this, '_monthsShortRegex')) {
	      this._monthsShortRegex = defaultMonthsShortRegex;
	    }
	    return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
	  }
	}
	function monthsRegex(isStrict) {
	  if (this._monthsParseExact) {
	    if (!hasOwnProp(this, '_monthsRegex')) {
	      computeMonthsParse.call(this);
	    }
	    if (isStrict) {
	      return this._monthsStrictRegex;
	    } else {
	      return this._monthsRegex;
	    }
	  } else {
	    if (!hasOwnProp(this, '_monthsRegex')) {
	      this._monthsRegex = defaultMonthsRegex;
	    }
	    return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
	  }
	}
	function computeMonthsParse() {
	  function cmpLenRev(a, b) {
	    return b.length - a.length;
	  }
	  var shortPieces = [],
	    longPieces = [],
	    mixedPieces = [],
	    i,
	    mom;
	  for (i = 0; i < 12; i++) {
	    mom = createUTC([2000, i]);
	    shortPieces.push(this.monthsShort(mom, ''));
	    longPieces.push(this.months(mom, ''));
	    mixedPieces.push(this.months(mom, ''));
	    mixedPieces.push(this.monthsShort(mom, ''));
	  }
	  shortPieces.sort(cmpLenRev);
	  longPieces.sort(cmpLenRev);
	  mixedPieces.sort(cmpLenRev);
	  for (i = 0; i < 12; i++) {
	    shortPieces[i] = regexEscape(shortPieces[i]);
	    longPieces[i] = regexEscape(longPieces[i]);
	  }
	  for (i = 0; i < 24; i++) {
	    mixedPieces[i] = regexEscape(mixedPieces[i]);
	  }
	  this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	  this._monthsShortRegex = this._monthsRegex;
	  this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	  this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	}
	addFormatToken('Y', 0, 0, function () {
	  var y = this.year();
	  return y <= 9999 ? zeroFill(y, 4) : '+' + y;
	});
	addFormatToken(0, ['YY', 2], 0, function () {
	  return this.year() % 100;
	});
	addFormatToken(0, ['YYYY', 4], 0, 'year');
	addFormatToken(0, ['YYYYY', 5], 0, 'year');
	addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
	addUnitAlias('year', 'y');
	addUnitPriority('year', 1);
	addRegexToken('Y', matchSigned);
	addRegexToken('YY', match1to2, match2);
	addRegexToken('YYYY', match1to4, match4);
	addRegexToken('YYYYY', match1to6, match6);
	addRegexToken('YYYYYY', match1to6, match6);
	addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	addParseToken('YYYY', function (input, array) {
	  array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	});
	addParseToken('YY', function (input, array) {
	  array[YEAR] = hooks.parseTwoDigitYear(input);
	});
	addParseToken('Y', function (input, array) {
	  array[YEAR] = parseInt(input, 10);
	});
	function daysInYear(year) {
	  return isLeapYear(year) ? 366 : 365;
	}
	hooks.parseTwoDigitYear = function (input) {
	  return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	};
	var getSetYear = makeGetSet('FullYear', true);
	function getIsLeapYear() {
	  return isLeapYear(this.year());
	}
	function createDate(y, m, d, h, M, s, ms) {
	  var date;
	  if (y < 100 && y >= 0) {
	    date = new Date(y + 400, m, d, h, M, s, ms);
	    if (isFinite(date.getFullYear())) {
	      date.setFullYear(y);
	    }
	  } else {
	    date = new Date(y, m, d, h, M, s, ms);
	  }
	  return date;
	}
	function createUTCDate(y) {
	  var date, args;
	  if (y < 100 && y >= 0) {
	    args = Array.prototype.slice.call(arguments);
	    args[0] = y + 400;
	    date = new Date(Date.UTC.apply(null, args));
	    if (isFinite(date.getUTCFullYear())) {
	      date.setUTCFullYear(y);
	    }
	  } else {
	    date = new Date(Date.UTC.apply(null, arguments));
	  }
	  return date;
	}
	function firstWeekOffset(year, dow, doy) {
	  var fwd = 7 + dow - doy,
	    fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
	  return -fwdlw + fwd - 1;
	}
	function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	  var localWeekday = (7 + weekday - dow) % 7,
	    weekOffset = firstWeekOffset(year, dow, doy),
	    dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	    resYear,
	    resDayOfYear;
	  if (dayOfYear <= 0) {
	    resYear = year - 1;
	    resDayOfYear = daysInYear(resYear) + dayOfYear;
	  } else if (dayOfYear > daysInYear(year)) {
	    resYear = year + 1;
	    resDayOfYear = dayOfYear - daysInYear(year);
	  } else {
	    resYear = year;
	    resDayOfYear = dayOfYear;
	  }
	  return {
	    year: resYear,
	    dayOfYear: resDayOfYear
	  };
	}
	function weekOfYear(mom, dow, doy) {
	  var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	    week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	    resWeek,
	    resYear;
	  if (week < 1) {
	    resYear = mom.year() - 1;
	    resWeek = week + weeksInYear(resYear, dow, doy);
	  } else if (week > weeksInYear(mom.year(), dow, doy)) {
	    resWeek = week - weeksInYear(mom.year(), dow, doy);
	    resYear = mom.year() + 1;
	  } else {
	    resYear = mom.year();
	    resWeek = week;
	  }
	  return {
	    week: resWeek,
	    year: resYear
	  };
	}
	function weeksInYear(year, dow, doy) {
	  var weekOffset = firstWeekOffset(year, dow, doy),
	    weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	  return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	}
	addFormatToken('w', ['ww', 2], 'wo', 'week');
	addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
	addUnitAlias('week', 'w');
	addUnitAlias('isoWeek', 'W');
	addUnitPriority('week', 5);
	addUnitPriority('isoWeek', 5);
	addRegexToken('w', match1to2);
	addRegexToken('ww', match1to2, match2);
	addRegexToken('W', match1to2);
	addRegexToken('WW', match1to2, match2);
	addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	  week[token.substr(0, 1)] = toInt(input);
	});
	function localeWeek(mom) {
	  return weekOfYear(mom, this._week.dow, this._week.doy).week;
	}
	var defaultLocaleWeek = {
	  dow: 0,
	  doy: 6
	};
	function localeFirstDayOfWeek() {
	  return this._week.dow;
	}
	function localeFirstDayOfYear() {
	  return this._week.doy;
	}
	function getSetWeek(input) {
	  var week = this.localeData().week(this);
	  return input == null ? week : this.add((input - week) * 7, 'd');
	}
	function getSetISOWeek(input) {
	  var week = weekOfYear(this, 1, 4).week;
	  return input == null ? week : this.add((input - week) * 7, 'd');
	}
	addFormatToken('d', 0, 'do', 'day');
	addFormatToken('dd', 0, 0, function (format) {
	  return this.localeData().weekdaysMin(this, format);
	});
	addFormatToken('ddd', 0, 0, function (format) {
	  return this.localeData().weekdaysShort(this, format);
	});
	addFormatToken('dddd', 0, 0, function (format) {
	  return this.localeData().weekdays(this, format);
	});
	addFormatToken('e', 0, 0, 'weekday');
	addFormatToken('E', 0, 0, 'isoWeekday');
	addUnitAlias('day', 'd');
	addUnitAlias('weekday', 'e');
	addUnitAlias('isoWeekday', 'E');
	addUnitPriority('day', 11);
	addUnitPriority('weekday', 11);
	addUnitPriority('isoWeekday', 11);
	addRegexToken('d', match1to2);
	addRegexToken('e', match1to2);
	addRegexToken('E', match1to2);
	addRegexToken('dd', function (isStrict, locale) {
	  return locale.weekdaysMinRegex(isStrict);
	});
	addRegexToken('ddd', function (isStrict, locale) {
	  return locale.weekdaysShortRegex(isStrict);
	});
	addRegexToken('dddd', function (isStrict, locale) {
	  return locale.weekdaysRegex(isStrict);
	});
	addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	  var weekday = config._locale.weekdaysParse(input, token, config._strict);
	  if (weekday != null) {
	    week.d = weekday;
	  } else {
	    getParsingFlags(config).invalidWeekday = input;
	  }
	});
	addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	  week[token] = toInt(input);
	});
	function parseWeekday(input, locale) {
	  if (typeof input !== 'string') {
	    return input;
	  }
	  if (!isNaN(input)) {
	    return parseInt(input, 10);
	  }
	  input = locale.weekdaysParse(input);
	  if (typeof input === 'number') {
	    return input;
	  }
	  return null;
	}
	function parseIsoWeekday(input, locale) {
	  if (typeof input === 'string') {
	    return locale.weekdaysParse(input) % 7 || 7;
	  }
	  return isNaN(input) ? null : input;
	}
	function shiftWeekdays(ws, n) {
	  return ws.slice(n, 7).concat(ws.slice(0, n));
	}
	var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	  defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	  defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	  defaultWeekdaysRegex = matchWord,
	  defaultWeekdaysShortRegex = matchWord,
	  defaultWeekdaysMinRegex = matchWord;
	function localeWeekdays(m, format) {
	  var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
	  return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
	}
	function localeWeekdaysShort(m) {
	  return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	}
	function localeWeekdaysMin(m) {
	  return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	}
	function handleStrictParse$1(weekdayName, format, strict) {
	  var i,
	    ii,
	    mom,
	    llc = weekdayName.toLocaleLowerCase();
	  if (!this._weekdaysParse) {
	    this._weekdaysParse = [];
	    this._shortWeekdaysParse = [];
	    this._minWeekdaysParse = [];
	    for (i = 0; i < 7; ++i) {
	      mom = createUTC([2000, 1]).day(i);
	      this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	      this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	      this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	    }
	  }
	  if (strict) {
	    if (format === 'dddd') {
	      ii = indexOf.call(this._weekdaysParse, llc);
	      return ii !== -1 ? ii : null;
	    } else if (format === 'ddd') {
	      ii = indexOf.call(this._shortWeekdaysParse, llc);
	      return ii !== -1 ? ii : null;
	    } else {
	      ii = indexOf.call(this._minWeekdaysParse, llc);
	      return ii !== -1 ? ii : null;
	    }
	  } else {
	    if (format === 'dddd') {
	      ii = indexOf.call(this._weekdaysParse, llc);
	      if (ii !== -1) {
	        return ii;
	      }
	      ii = indexOf.call(this._shortWeekdaysParse, llc);
	      if (ii !== -1) {
	        return ii;
	      }
	      ii = indexOf.call(this._minWeekdaysParse, llc);
	      return ii !== -1 ? ii : null;
	    } else if (format === 'ddd') {
	      ii = indexOf.call(this._shortWeekdaysParse, llc);
	      if (ii !== -1) {
	        return ii;
	      }
	      ii = indexOf.call(this._weekdaysParse, llc);
	      if (ii !== -1) {
	        return ii;
	      }
	      ii = indexOf.call(this._minWeekdaysParse, llc);
	      return ii !== -1 ? ii : null;
	    } else {
	      ii = indexOf.call(this._minWeekdaysParse, llc);
	      if (ii !== -1) {
	        return ii;
	      }
	      ii = indexOf.call(this._weekdaysParse, llc);
	      if (ii !== -1) {
	        return ii;
	      }
	      ii = indexOf.call(this._shortWeekdaysParse, llc);
	      return ii !== -1 ? ii : null;
	    }
	  }
	}
	function localeWeekdaysParse(weekdayName, format, strict) {
	  var i, mom, regex;
	  if (this._weekdaysParseExact) {
	    return handleStrictParse$1.call(this, weekdayName, format, strict);
	  }
	  if (!this._weekdaysParse) {
	    this._weekdaysParse = [];
	    this._minWeekdaysParse = [];
	    this._shortWeekdaysParse = [];
	    this._fullWeekdaysParse = [];
	  }
	  for (i = 0; i < 7; i++) {
	    mom = createUTC([2000, 1]).day(i);
	    if (strict && !this._fullWeekdaysParse[i]) {
	      this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
	      this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
	      this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
	    }
	    if (!this._weekdaysParse[i]) {
	      regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	      this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	    }
	    if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	      return i;
	    } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	      return i;
	    } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	      return i;
	    } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	      return i;
	    }
	  }
	}
	function getSetDayOfWeek(input) {
	  if (!this.isValid()) {
	    return input != null ? this : NaN;
	  }
	  var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	  if (input != null) {
	    input = parseWeekday(input, this.localeData());
	    return this.add(input - day, 'd');
	  } else {
	    return day;
	  }
	}
	function getSetLocaleDayOfWeek(input) {
	  if (!this.isValid()) {
	    return input != null ? this : NaN;
	  }
	  var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	  return input == null ? weekday : this.add(input - weekday, 'd');
	}
	function getSetISODayOfWeek(input) {
	  if (!this.isValid()) {
	    return input != null ? this : NaN;
	  }
	  if (input != null) {
	    var weekday = parseIsoWeekday(input, this.localeData());
	    return this.day(this.day() % 7 ? weekday : weekday - 7);
	  } else {
	    return this.day() || 7;
	  }
	}
	function weekdaysRegex(isStrict) {
	  if (this._weekdaysParseExact) {
	    if (!hasOwnProp(this, '_weekdaysRegex')) {
	      computeWeekdaysParse.call(this);
	    }
	    if (isStrict) {
	      return this._weekdaysStrictRegex;
	    } else {
	      return this._weekdaysRegex;
	    }
	  } else {
	    if (!hasOwnProp(this, '_weekdaysRegex')) {
	      this._weekdaysRegex = defaultWeekdaysRegex;
	    }
	    return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
	  }
	}
	function weekdaysShortRegex(isStrict) {
	  if (this._weekdaysParseExact) {
	    if (!hasOwnProp(this, '_weekdaysRegex')) {
	      computeWeekdaysParse.call(this);
	    }
	    if (isStrict) {
	      return this._weekdaysShortStrictRegex;
	    } else {
	      return this._weekdaysShortRegex;
	    }
	  } else {
	    if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	      this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	    }
	    return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	  }
	}
	function weekdaysMinRegex(isStrict) {
	  if (this._weekdaysParseExact) {
	    if (!hasOwnProp(this, '_weekdaysRegex')) {
	      computeWeekdaysParse.call(this);
	    }
	    if (isStrict) {
	      return this._weekdaysMinStrictRegex;
	    } else {
	      return this._weekdaysMinRegex;
	    }
	  } else {
	    if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	      this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	    }
	    return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	  }
	}
	function computeWeekdaysParse() {
	  function cmpLenRev(a, b) {
	    return b.length - a.length;
	  }
	  var minPieces = [],
	    shortPieces = [],
	    longPieces = [],
	    mixedPieces = [],
	    i,
	    mom,
	    minp,
	    shortp,
	    longp;
	  for (i = 0; i < 7; i++) {
	    mom = createUTC([2000, 1]).day(i);
	    minp = regexEscape(this.weekdaysMin(mom, ''));
	    shortp = regexEscape(this.weekdaysShort(mom, ''));
	    longp = regexEscape(this.weekdays(mom, ''));
	    minPieces.push(minp);
	    shortPieces.push(shortp);
	    longPieces.push(longp);
	    mixedPieces.push(minp);
	    mixedPieces.push(shortp);
	    mixedPieces.push(longp);
	  }
	  minPieces.sort(cmpLenRev);
	  shortPieces.sort(cmpLenRev);
	  longPieces.sort(cmpLenRev);
	  mixedPieces.sort(cmpLenRev);
	  this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	  this._weekdaysShortRegex = this._weekdaysRegex;
	  this._weekdaysMinRegex = this._weekdaysRegex;
	  this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	  this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	  this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	}
	function hFormat() {
	  return this.hours() % 12 || 12;
	}
	function kFormat() {
	  return this.hours() || 24;
	}
	addFormatToken('H', ['HH', 2], 0, 'hour');
	addFormatToken('h', ['hh', 2], 0, hFormat);
	addFormatToken('k', ['kk', 2], 0, kFormat);
	addFormatToken('hmm', 0, 0, function () {
	  return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	});
	addFormatToken('hmmss', 0, 0, function () {
	  return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
	});
	addFormatToken('Hmm', 0, 0, function () {
	  return '' + this.hours() + zeroFill(this.minutes(), 2);
	});
	addFormatToken('Hmmss', 0, 0, function () {
	  return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
	});
	function meridiem(token, lowercase) {
	  addFormatToken(token, 0, 0, function () {
	    return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	  });
	}
	meridiem('a', true);
	meridiem('A', false);
	addUnitAlias('hour', 'h');
	addUnitPriority('hour', 13);
	function matchMeridiem(isStrict, locale) {
	  return locale._meridiemParse;
	}
	addRegexToken('a', matchMeridiem);
	addRegexToken('A', matchMeridiem);
	addRegexToken('H', match1to2);
	addRegexToken('h', match1to2);
	addRegexToken('k', match1to2);
	addRegexToken('HH', match1to2, match2);
	addRegexToken('hh', match1to2, match2);
	addRegexToken('kk', match1to2, match2);
	addRegexToken('hmm', match3to4);
	addRegexToken('hmmss', match5to6);
	addRegexToken('Hmm', match3to4);
	addRegexToken('Hmmss', match5to6);
	addParseToken(['H', 'HH'], HOUR);
	addParseToken(['k', 'kk'], function (input, array, config) {
	  var kInput = toInt(input);
	  array[HOUR] = kInput === 24 ? 0 : kInput;
	});
	addParseToken(['a', 'A'], function (input, array, config) {
	  config._isPm = config._locale.isPM(input);
	  config._meridiem = input;
	});
	addParseToken(['h', 'hh'], function (input, array, config) {
	  array[HOUR] = toInt(input);
	  getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmm', function (input, array, config) {
	  var pos = input.length - 2;
	  array[HOUR] = toInt(input.substr(0, pos));
	  array[MINUTE] = toInt(input.substr(pos));
	  getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmmss', function (input, array, config) {
	  var pos1 = input.length - 4,
	    pos2 = input.length - 2;
	  array[HOUR] = toInt(input.substr(0, pos1));
	  array[MINUTE] = toInt(input.substr(pos1, 2));
	  array[SECOND] = toInt(input.substr(pos2));
	  getParsingFlags(config).bigHour = true;
	});
	addParseToken('Hmm', function (input, array, config) {
	  var pos = input.length - 2;
	  array[HOUR] = toInt(input.substr(0, pos));
	  array[MINUTE] = toInt(input.substr(pos));
	});
	addParseToken('Hmmss', function (input, array, config) {
	  var pos1 = input.length - 4,
	    pos2 = input.length - 2;
	  array[HOUR] = toInt(input.substr(0, pos1));
	  array[MINUTE] = toInt(input.substr(pos1, 2));
	  array[SECOND] = toInt(input.substr(pos2));
	});
	function localeIsPM(input) {
	  return (input + '').toLowerCase().charAt(0) === 'p';
	}
	var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
	  getSetHour = makeGetSet('Hours', true);
	function localeMeridiem(hours, minutes, isLower) {
	  if (hours > 11) {
	    return isLower ? 'pm' : 'PM';
	  } else {
	    return isLower ? 'am' : 'AM';
	  }
	}
	var baseConfig = {
	  calendar: defaultCalendar,
	  longDateFormat: defaultLongDateFormat,
	  invalidDate: defaultInvalidDate,
	  ordinal: defaultOrdinal,
	  dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	  relativeTime: defaultRelativeTime,
	  months: defaultLocaleMonths,
	  monthsShort: defaultLocaleMonthsShort,
	  week: defaultLocaleWeek,
	  weekdays: defaultLocaleWeekdays,
	  weekdaysMin: defaultLocaleWeekdaysMin,
	  weekdaysShort: defaultLocaleWeekdaysShort,
	  meridiemParse: defaultLocaleMeridiemParse
	};
	var locales = {},
	  localeFamilies = {},
	  globalLocale;
	function commonPrefix(arr1, arr2) {
	  var i,
	    minl = Math.min(arr1.length, arr2.length);
	  for (i = 0; i < minl; i += 1) {
	    if (arr1[i] !== arr2[i]) {
	      return i;
	    }
	  }
	  return minl;
	}
	function normalizeLocale(key) {
	  return key ? key.toLowerCase().replace('_', '-') : key;
	}
	function chooseLocale(names) {
	  var i = 0,
	    j,
	    next,
	    locale,
	    split;
	  while (i < names.length) {
	    split = normalizeLocale(names[i]).split('-');
	    j = split.length;
	    next = normalizeLocale(names[i + 1]);
	    next = next ? next.split('-') : null;
	    while (j > 0) {
	      locale = loadLocale(split.slice(0, j).join('-'));
	      if (locale) {
	        return locale;
	      }
	      if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
	        break;
	      }
	      j--;
	    }
	    i++;
	  }
	  return globalLocale;
	}
	function isLocaleNameSane(name) {
	  return name.match('^[^/\\\\]*$') != null;
	}
	function loadLocale(name) {
	  var oldLocale = null,
	    aliasedRequire;
	  if (locales[name] === undefined && typeof module !== 'undefined' && module && module.exports && isLocaleNameSane(name)) {
	    try {
	      oldLocale = globalLocale._abbr;
	      aliasedRequire = require;
	      aliasedRequire('./locale/' + name);
	      getSetGlobalLocale(oldLocale);
	    } catch (e) {
	      locales[name] = null;
	    }
	  }
	  return locales[name];
	}
	function getSetGlobalLocale(key, values) {
	  var data;
	  if (key) {
	    if (isUndefined$2(values)) {
	      data = getLocale(key);
	    } else {
	      data = defineLocale(key, values);
	    }
	    if (data) {
	      globalLocale = data;
	    } else {
	      if (typeof console !== 'undefined' && console.warn) {
	        console.warn('Locale ' + key + ' not found. Did you forget to load it?');
	      }
	    }
	  }
	  return globalLocale._abbr;
	}
	function defineLocale(name, config) {
	  if (config !== null) {
	    var locale,
	      parentConfig = baseConfig;
	    config.abbr = name;
	    if (locales[name] != null) {
	      deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	      parentConfig = locales[name]._config;
	    } else if (config.parentLocale != null) {
	      if (locales[config.parentLocale] != null) {
	        parentConfig = locales[config.parentLocale]._config;
	      } else {
	        locale = loadLocale(config.parentLocale);
	        if (locale != null) {
	          parentConfig = locale._config;
	        } else {
	          if (!localeFamilies[config.parentLocale]) {
	            localeFamilies[config.parentLocale] = [];
	          }
	          localeFamilies[config.parentLocale].push({
	            name: name,
	            config: config
	          });
	          return null;
	        }
	      }
	    }
	    locales[name] = new Locale(mergeConfigs(parentConfig, config));
	    if (localeFamilies[name]) {
	      localeFamilies[name].forEach(function (x) {
	        defineLocale(x.name, x.config);
	      });
	    }
	    getSetGlobalLocale(name);
	    return locales[name];
	  } else {
	    delete locales[name];
	    return null;
	  }
	}
	function updateLocale(name, config) {
	  if (config != null) {
	    var locale,
	      tmpLocale,
	      parentConfig = baseConfig;
	    if (locales[name] != null && locales[name].parentLocale != null) {
	      locales[name].set(mergeConfigs(locales[name]._config, config));
	    } else {
	      tmpLocale = loadLocale(name);
	      if (tmpLocale != null) {
	        parentConfig = tmpLocale._config;
	      }
	      config = mergeConfigs(parentConfig, config);
	      if (tmpLocale == null) {
	        config.abbr = name;
	      }
	      locale = new Locale(config);
	      locale.parentLocale = locales[name];
	      locales[name] = locale;
	    }
	    getSetGlobalLocale(name);
	  } else {
	    if (locales[name] != null) {
	      if (locales[name].parentLocale != null) {
	        locales[name] = locales[name].parentLocale;
	        if (name === getSetGlobalLocale()) {
	          getSetGlobalLocale(name);
	        }
	      } else if (locales[name] != null) {
	        delete locales[name];
	      }
	    }
	  }
	  return locales[name];
	}
	function getLocale(key) {
	  var locale;
	  if (key && key._locale && key._locale._abbr) {
	    key = key._locale._abbr;
	  }
	  if (!key) {
	    return globalLocale;
	  }
	  if (!isArray(key)) {
	    locale = loadLocale(key);
	    if (locale) {
	      return locale;
	    }
	    key = [key];
	  }
	  return chooseLocale(key);
	}
	function listLocales() {
	  return keys(locales);
	}
	function checkOverflow(m) {
	  var overflow,
	    a = m._a;
	  if (a && getParsingFlags(m).overflow === -2) {
	    overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
	    if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	      overflow = DATE;
	    }
	    if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	      overflow = WEEK;
	    }
	    if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	      overflow = WEEKDAY;
	    }
	    getParsingFlags(m).overflow = overflow;
	  }
	  return m;
	}
	var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	  basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	  tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
	  isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/], ['YYYYMM', /\d{6}/, false], ['YYYY', /\d{4}/, false]],
	  isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]],
	  aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
	  rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
	  obsOffsets = {
	    UT: 0,
	    GMT: 0,
	    EDT: -4 * 60,
	    EST: -5 * 60,
	    CDT: -5 * 60,
	    CST: -6 * 60,
	    MDT: -6 * 60,
	    MST: -7 * 60,
	    PDT: -7 * 60,
	    PST: -8 * 60
	  };
	function configFromISO(config) {
	  var i,
	    l,
	    string = config._i,
	    match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	    allowTime,
	    dateFormat,
	    timeFormat,
	    tzFormat,
	    isoDatesLen = isoDates.length,
	    isoTimesLen = isoTimes.length;
	  if (match) {
	    getParsingFlags(config).iso = true;
	    for (i = 0, l = isoDatesLen; i < l; i++) {
	      if (isoDates[i][1].exec(match[1])) {
	        dateFormat = isoDates[i][0];
	        allowTime = isoDates[i][2] !== false;
	        break;
	      }
	    }
	    if (dateFormat == null) {
	      config._isValid = false;
	      return;
	    }
	    if (match[3]) {
	      for (i = 0, l = isoTimesLen; i < l; i++) {
	        if (isoTimes[i][1].exec(match[3])) {
	          timeFormat = (match[2] || ' ') + isoTimes[i][0];
	          break;
	        }
	      }
	      if (timeFormat == null) {
	        config._isValid = false;
	        return;
	      }
	    }
	    if (!allowTime && timeFormat != null) {
	      config._isValid = false;
	      return;
	    }
	    if (match[4]) {
	      if (tzRegex.exec(match[4])) {
	        tzFormat = 'Z';
	      } else {
	        config._isValid = false;
	        return;
	      }
	    }
	    config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	    configFromStringAndFormat(config);
	  } else {
	    config._isValid = false;
	  }
	}
	function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
	  var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];
	  if (secondStr) {
	    result.push(parseInt(secondStr, 10));
	  }
	  return result;
	}
	function untruncateYear(yearStr) {
	  var year = parseInt(yearStr, 10);
	  if (year <= 49) {
	    return 2000 + year;
	  } else if (year <= 999) {
	    return 1900 + year;
	  }
	  return year;
	}
	function preprocessRFC2822(s) {
	  return s.replace(/\([^()]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	}
	function checkWeekday(weekdayStr, parsedInput, config) {
	  if (weekdayStr) {
	    var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	      weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
	    if (weekdayProvided !== weekdayActual) {
	      getParsingFlags(config).weekdayMismatch = true;
	      config._isValid = false;
	      return false;
	    }
	  }
	  return true;
	}
	function calculateOffset(obsOffset, militaryOffset, numOffset) {
	  if (obsOffset) {
	    return obsOffsets[obsOffset];
	  } else if (militaryOffset) {
	    return 0;
	  } else {
	    var hm = parseInt(numOffset, 10),
	      m = hm % 100,
	      h = (hm - m) / 100;
	    return h * 60 + m;
	  }
	}
	function configFromRFC2822(config) {
	  var match = rfc2822.exec(preprocessRFC2822(config._i)),
	    parsedArray;
	  if (match) {
	    parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
	    if (!checkWeekday(match[1], parsedArray, config)) {
	      return;
	    }
	    config._a = parsedArray;
	    config._tzm = calculateOffset(match[8], match[9], match[10]);
	    config._d = createUTCDate.apply(null, config._a);
	    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	    getParsingFlags(config).rfc2822 = true;
	  } else {
	    config._isValid = false;
	  }
	}
	function configFromString(config) {
	  var matched = aspNetJsonRegex.exec(config._i);
	  if (matched !== null) {
	    config._d = new Date(+matched[1]);
	    return;
	  }
	  configFromISO(config);
	  if (config._isValid === false) {
	    delete config._isValid;
	  } else {
	    return;
	  }
	  configFromRFC2822(config);
	  if (config._isValid === false) {
	    delete config._isValid;
	  } else {
	    return;
	  }
	  if (config._strict) {
	    config._isValid = false;
	  } else {
	    hooks.createFromInputFallback(config);
	  }
	}
	hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
	  config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	});
	function defaults(a, b, c) {
	  if (a != null) {
	    return a;
	  }
	  if (b != null) {
	    return b;
	  }
	  return c;
	}
	function currentDateArray(config) {
	  var nowValue = new Date(hooks.now());
	  if (config._useUTC) {
	    return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	  }
	  return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	}
	function configFromArray(config) {
	  var i,
	    date,
	    input = [],
	    currentDate,
	    expectedWeekday,
	    yearToUse;
	  if (config._d) {
	    return;
	  }
	  currentDate = currentDateArray(config);
	  if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	    dayOfYearFromWeekInfo(config);
	  }
	  if (config._dayOfYear != null) {
	    yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
	    if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
	      getParsingFlags(config)._overflowDayOfYear = true;
	    }
	    date = createUTCDate(yearToUse, 0, config._dayOfYear);
	    config._a[MONTH] = date.getUTCMonth();
	    config._a[DATE] = date.getUTCDate();
	  }
	  for (i = 0; i < 3 && config._a[i] == null; ++i) {
	    config._a[i] = input[i] = currentDate[i];
	  }
	  for (; i < 7; i++) {
	    config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
	  }
	  if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
	    config._nextDay = true;
	    config._a[HOUR] = 0;
	  }
	  config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	  expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
	  if (config._tzm != null) {
	    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	  }
	  if (config._nextDay) {
	    config._a[HOUR] = 24;
	  }
	  if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
	    getParsingFlags(config).weekdayMismatch = true;
	  }
	}
	function dayOfYearFromWeekInfo(config) {
	  var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
	  w = config._w;
	  if (w.GG != null || w.W != null || w.E != null) {
	    dow = 1;
	    doy = 4;
	    weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
	    week = defaults(w.W, 1);
	    weekday = defaults(w.E, 1);
	    if (weekday < 1 || weekday > 7) {
	      weekdayOverflow = true;
	    }
	  } else {
	    dow = config._locale._week.dow;
	    doy = config._locale._week.doy;
	    curWeek = weekOfYear(createLocal(), dow, doy);
	    weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
	    week = defaults(w.w, curWeek.week);
	    if (w.d != null) {
	      weekday = w.d;
	      if (weekday < 0 || weekday > 6) {
	        weekdayOverflow = true;
	      }
	    } else if (w.e != null) {
	      weekday = w.e + dow;
	      if (w.e < 0 || w.e > 6) {
	        weekdayOverflow = true;
	      }
	    } else {
	      weekday = dow;
	    }
	  }
	  if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	    getParsingFlags(config)._overflowWeeks = true;
	  } else if (weekdayOverflow != null) {
	    getParsingFlags(config)._overflowWeekday = true;
	  } else {
	    temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	    config._a[YEAR] = temp.year;
	    config._dayOfYear = temp.dayOfYear;
	  }
	}
	hooks.ISO_8601 = function () {};
	hooks.RFC_2822 = function () {};
	function configFromStringAndFormat(config) {
	  if (config._f === hooks.ISO_8601) {
	    configFromISO(config);
	    return;
	  }
	  if (config._f === hooks.RFC_2822) {
	    configFromRFC2822(config);
	    return;
	  }
	  config._a = [];
	  getParsingFlags(config).empty = true;
	  var string = '' + config._i,
	    i,
	    parsedInput,
	    tokens,
	    token,
	    skipped,
	    stringLength = string.length,
	    totalParsedInputLength = 0,
	    era,
	    tokenLen;
	  tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
	  tokenLen = tokens.length;
	  for (i = 0; i < tokenLen; i++) {
	    token = tokens[i];
	    parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	    if (parsedInput) {
	      skipped = string.substr(0, string.indexOf(parsedInput));
	      if (skipped.length > 0) {
	        getParsingFlags(config).unusedInput.push(skipped);
	      }
	      string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	      totalParsedInputLength += parsedInput.length;
	    }
	    if (formatTokenFunctions[token]) {
	      if (parsedInput) {
	        getParsingFlags(config).empty = false;
	      } else {
	        getParsingFlags(config).unusedTokens.push(token);
	      }
	      addTimeToArrayFromToken(token, parsedInput, config);
	    } else if (config._strict && !parsedInput) {
	      getParsingFlags(config).unusedTokens.push(token);
	    }
	  }
	  getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	  if (string.length > 0) {
	    getParsingFlags(config).unusedInput.push(string);
	  }
	  if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
	    getParsingFlags(config).bigHour = undefined;
	  }
	  getParsingFlags(config).parsedDateParts = config._a.slice(0);
	  getParsingFlags(config).meridiem = config._meridiem;
	  config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
	  era = getParsingFlags(config).era;
	  if (era !== null) {
	    config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
	  }
	  configFromArray(config);
	  checkOverflow(config);
	}
	function meridiemFixWrap(locale, hour, meridiem) {
	  var isPm;
	  if (meridiem == null) {
	    return hour;
	  }
	  if (locale.meridiemHour != null) {
	    return locale.meridiemHour(hour, meridiem);
	  } else if (locale.isPM != null) {
	    isPm = locale.isPM(meridiem);
	    if (isPm && hour < 12) {
	      hour += 12;
	    }
	    if (!isPm && hour === 12) {
	      hour = 0;
	    }
	    return hour;
	  } else {
	    return hour;
	  }
	}
	function configFromStringAndArray(config) {
	  var tempConfig,
	    bestMoment,
	    scoreToBeat,
	    i,
	    currentScore,
	    validFormatFound,
	    bestFormatIsValid = false,
	    configfLen = config._f.length;
	  if (configfLen === 0) {
	    getParsingFlags(config).invalidFormat = true;
	    config._d = new Date(NaN);
	    return;
	  }
	  for (i = 0; i < configfLen; i++) {
	    currentScore = 0;
	    validFormatFound = false;
	    tempConfig = copyConfig({}, config);
	    if (config._useUTC != null) {
	      tempConfig._useUTC = config._useUTC;
	    }
	    tempConfig._f = config._f[i];
	    configFromStringAndFormat(tempConfig);
	    if (isValid(tempConfig)) {
	      validFormatFound = true;
	    }
	    currentScore += getParsingFlags(tempConfig).charsLeftOver;
	    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
	    getParsingFlags(tempConfig).score = currentScore;
	    if (!bestFormatIsValid) {
	      if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
	        scoreToBeat = currentScore;
	        bestMoment = tempConfig;
	        if (validFormatFound) {
	          bestFormatIsValid = true;
	        }
	      }
	    } else {
	      if (currentScore < scoreToBeat) {
	        scoreToBeat = currentScore;
	        bestMoment = tempConfig;
	      }
	    }
	  }
	  extend(config, bestMoment || tempConfig);
	}
	function configFromObject(config) {
	  if (config._d) {
	    return;
	  }
	  var i = normalizeObjectUnits(config._i),
	    dayOrDate = i.day === undefined ? i.date : i.day;
	  config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	    return obj && parseInt(obj, 10);
	  });
	  configFromArray(config);
	}
	function createFromConfig(config) {
	  var res = new Moment(checkOverflow(prepareConfig(config)));
	  if (res._nextDay) {
	    res.add(1, 'd');
	    res._nextDay = undefined;
	  }
	  return res;
	}
	function prepareConfig(config) {
	  var input = config._i,
	    format = config._f;
	  config._locale = config._locale || getLocale(config._l);
	  if (input === null || format === undefined && input === '') {
	    return createInvalid({
	      nullInput: true
	    });
	  }
	  if (typeof input === 'string') {
	    config._i = input = config._locale.preparse(input);
	  }
	  if (isMoment(input)) {
	    return new Moment(checkOverflow(input));
	  } else if (isDate(input)) {
	    config._d = input;
	  } else if (isArray(format)) {
	    configFromStringAndArray(config);
	  } else if (format) {
	    configFromStringAndFormat(config);
	  } else {
	    configFromInput(config);
	  }
	  if (!isValid(config)) {
	    config._d = null;
	  }
	  return config;
	}
	function configFromInput(config) {
	  var input = config._i;
	  if (isUndefined$2(input)) {
	    config._d = new Date(hooks.now());
	  } else if (isDate(input)) {
	    config._d = new Date(input.valueOf());
	  } else if (typeof input === 'string') {
	    configFromString(config);
	  } else if (isArray(input)) {
	    config._a = map(input.slice(0), function (obj) {
	      return parseInt(obj, 10);
	    });
	    configFromArray(config);
	  } else if (isObject$1(input)) {
	    configFromObject(config);
	  } else if (isNumber(input)) {
	    config._d = new Date(input);
	  } else {
	    hooks.createFromInputFallback(config);
	  }
	}
	function createLocalOrUTC(input, format, locale, strict, isUTC) {
	  var c = {};
	  if (format === true || format === false) {
	    strict = format;
	    format = undefined;
	  }
	  if (locale === true || locale === false) {
	    strict = locale;
	    locale = undefined;
	  }
	  if (isObject$1(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
	    input = undefined;
	  }
	  c._isAMomentObject = true;
	  c._useUTC = c._isUTC = isUTC;
	  c._l = locale;
	  c._i = input;
	  c._f = format;
	  c._strict = strict;
	  return createFromConfig(c);
	}
	function createLocal(input, format, locale, strict) {
	  return createLocalOrUTC(input, format, locale, strict, false);
	}
	var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
	    var other = createLocal.apply(null, arguments);
	    if (this.isValid() && other.isValid()) {
	      return other < this ? this : other;
	    } else {
	      return createInvalid();
	    }
	  }),
	  prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
	    var other = createLocal.apply(null, arguments);
	    if (this.isValid() && other.isValid()) {
	      return other > this ? this : other;
	    } else {
	      return createInvalid();
	    }
	  });
	function pickBy(fn, moments) {
	  var res, i;
	  if (moments.length === 1 && isArray(moments[0])) {
	    moments = moments[0];
	  }
	  if (!moments.length) {
	    return createLocal();
	  }
	  res = moments[0];
	  for (i = 1; i < moments.length; ++i) {
	    if (!moments[i].isValid() || moments[i][fn](res)) {
	      res = moments[i];
	    }
	  }
	  return res;
	}
	function min() {
	  var args = [].slice.call(arguments, 0);
	  return pickBy('isBefore', args);
	}
	function max() {
	  var args = [].slice.call(arguments, 0);
	  return pickBy('isAfter', args);
	}
	var now = function now() {
	  return Date.now ? Date.now() : +new Date();
	};
	var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
	function isDurationValid(m) {
	  var key,
	    unitHasDecimal = false,
	    i,
	    orderLen = ordering.length;
	  for (key in m) {
	    if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
	      return false;
	    }
	  }
	  for (i = 0; i < orderLen; ++i) {
	    if (m[ordering[i]]) {
	      if (unitHasDecimal) {
	        return false;
	      }
	      if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	        unitHasDecimal = true;
	      }
	    }
	  }
	  return true;
	}
	function isValid$1() {
	  return this._isValid;
	}
	function createInvalid$1() {
	  return createDuration(NaN);
	}
	function Duration(duration) {
	  var normalizedInput = normalizeObjectUnits(duration),
	    years = normalizedInput.year || 0,
	    quarters = normalizedInput.quarter || 0,
	    months = normalizedInput.month || 0,
	    weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
	    days = normalizedInput.day || 0,
	    hours = normalizedInput.hour || 0,
	    minutes = normalizedInput.minute || 0,
	    seconds = normalizedInput.second || 0,
	    milliseconds = normalizedInput.millisecond || 0;
	  this._isValid = isDurationValid(normalizedInput);
	  this._milliseconds = +milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 1000 * 60 * 60;
	  this._days = +days + weeks * 7;
	  this._months = +months + quarters * 3 + years * 12;
	  this._data = {};
	  this._locale = getLocale();
	  this._bubble();
	}
	function isDuration(obj) {
	  return obj instanceof Duration;
	}
	function absRound(number) {
	  if (number < 0) {
	    return Math.round(-1 * number) * -1;
	  } else {
	    return Math.round(number);
	  }
	}
	function compareArrays(array1, array2, dontConvert) {
	  var len = Math.min(array1.length, array2.length),
	    lengthDiff = Math.abs(array1.length - array2.length),
	    diffs = 0,
	    i;
	  for (i = 0; i < len; i++) {
	    if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
	      diffs++;
	    }
	  }
	  return diffs + lengthDiff;
	}
	function offset(token, separator) {
	  addFormatToken(token, 0, 0, function () {
	    var offset = this.utcOffset(),
	      sign = '+';
	    if (offset < 0) {
	      offset = -offset;
	      sign = '-';
	    }
	    return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
	  });
	}
	offset('Z', ':');
	offset('ZZ', '');
	addRegexToken('Z', matchShortOffset);
	addRegexToken('ZZ', matchShortOffset);
	addParseToken(['Z', 'ZZ'], function (input, array, config) {
	  config._useUTC = true;
	  config._tzm = offsetFromString(matchShortOffset, input);
	});
	var chunkOffset = /([\+\-]|\d\d)/gi;
	function offsetFromString(matcher, string) {
	  var matches = (string || '').match(matcher),
	    chunk,
	    parts,
	    minutes;
	  if (matches === null) {
	    return null;
	  }
	  chunk = matches[matches.length - 1] || [];
	  parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	  minutes = +(parts[1] * 60) + toInt(parts[2]);
	  return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
	}
	function cloneWithOffset(input, model) {
	  var res, diff;
	  if (model._isUTC) {
	    res = model.clone();
	    diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
	    res._d.setTime(res._d.valueOf() + diff);
	    hooks.updateOffset(res, false);
	    return res;
	  } else {
	    return createLocal(input).local();
	  }
	}
	function getDateOffset(m) {
	  return -Math.round(m._d.getTimezoneOffset());
	}
	hooks.updateOffset = function () {};
	function getSetOffset(input, keepLocalTime, keepMinutes) {
	  var offset = this._offset || 0,
	    localAdjust;
	  if (!this.isValid()) {
	    return input != null ? this : NaN;
	  }
	  if (input != null) {
	    if (typeof input === 'string') {
	      input = offsetFromString(matchShortOffset, input);
	      if (input === null) {
	        return this;
	      }
	    } else if (Math.abs(input) < 16 && !keepMinutes) {
	      input = input * 60;
	    }
	    if (!this._isUTC && keepLocalTime) {
	      localAdjust = getDateOffset(this);
	    }
	    this._offset = input;
	    this._isUTC = true;
	    if (localAdjust != null) {
	      this.add(localAdjust, 'm');
	    }
	    if (offset !== input) {
	      if (!keepLocalTime || this._changeInProgress) {
	        addSubtract(this, createDuration(input - offset, 'm'), 1, false);
	      } else if (!this._changeInProgress) {
	        this._changeInProgress = true;
	        hooks.updateOffset(this, true);
	        this._changeInProgress = null;
	      }
	    }
	    return this;
	  } else {
	    return this._isUTC ? offset : getDateOffset(this);
	  }
	}
	function getSetZone(input, keepLocalTime) {
	  if (input != null) {
	    if (typeof input !== 'string') {
	      input = -input;
	    }
	    this.utcOffset(input, keepLocalTime);
	    return this;
	  } else {
	    return -this.utcOffset();
	  }
	}
	function setOffsetToUTC(keepLocalTime) {
	  return this.utcOffset(0, keepLocalTime);
	}
	function setOffsetToLocal(keepLocalTime) {
	  if (this._isUTC) {
	    this.utcOffset(0, keepLocalTime);
	    this._isUTC = false;
	    if (keepLocalTime) {
	      this.subtract(getDateOffset(this), 'm');
	    }
	  }
	  return this;
	}
	function setOffsetToParsedOffset() {
	  if (this._tzm != null) {
	    this.utcOffset(this._tzm, false, true);
	  } else if (typeof this._i === 'string') {
	    var tZone = offsetFromString(matchOffset, this._i);
	    if (tZone != null) {
	      this.utcOffset(tZone);
	    } else {
	      this.utcOffset(0, true);
	    }
	  }
	  return this;
	}
	function hasAlignedHourOffset(input) {
	  if (!this.isValid()) {
	    return false;
	  }
	  input = input ? createLocal(input).utcOffset() : 0;
	  return (this.utcOffset() - input) % 60 === 0;
	}
	function isDaylightSavingTime() {
	  return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
	}
	function isDaylightSavingTimeShifted() {
	  if (!isUndefined$2(this._isDSTShifted)) {
	    return this._isDSTShifted;
	  }
	  var c = {},
	    other;
	  copyConfig(c, this);
	  c = prepareConfig(c);
	  if (c._a) {
	    other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	    this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
	  } else {
	    this._isDSTShifted = false;
	  }
	  return this._isDSTShifted;
	}
	function isLocal() {
	  return this.isValid() ? !this._isUTC : false;
	}
	function isUtcOffset() {
	  return this.isValid() ? this._isUTC : false;
	}
	function isUtc() {
	  return this.isValid() ? this._isUTC && this._offset === 0 : false;
	}
	var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
	  isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
	function createDuration(input, key) {
	  var duration = input,
	    match = null,
	    sign,
	    ret,
	    diffRes;
	  if (isDuration(input)) {
	    duration = {
	      ms: input._milliseconds,
	      d: input._days,
	      M: input._months
	    };
	  } else if (isNumber(input) || !isNaN(+input)) {
	    duration = {};
	    if (key) {
	      duration[key] = +input;
	    } else {
	      duration.milliseconds = +input;
	    }
	  } else if (match = aspNetRegex.exec(input)) {
	    sign = match[1] === '-' ? -1 : 1;
	    duration = {
	      y: 0,
	      d: toInt(match[DATE]) * sign,
	      h: toInt(match[HOUR]) * sign,
	      m: toInt(match[MINUTE]) * sign,
	      s: toInt(match[SECOND]) * sign,
	      ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign
	    };
	  } else if (match = isoRegex.exec(input)) {
	    sign = match[1] === '-' ? -1 : 1;
	    duration = {
	      y: parseIso(match[2], sign),
	      M: parseIso(match[3], sign),
	      w: parseIso(match[4], sign),
	      d: parseIso(match[5], sign),
	      h: parseIso(match[6], sign),
	      m: parseIso(match[7], sign),
	      s: parseIso(match[8], sign)
	    };
	  } else if (duration == null) {
	    duration = {};
	  } else if (_typeof$1(duration) === 'object' && ('from' in duration || 'to' in duration)) {
	    diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
	    duration = {};
	    duration.ms = diffRes.milliseconds;
	    duration.M = diffRes.months;
	  }
	  ret = new Duration(duration);
	  if (isDuration(input) && hasOwnProp(input, '_locale')) {
	    ret._locale = input._locale;
	  }
	  if (isDuration(input) && hasOwnProp(input, '_isValid')) {
	    ret._isValid = input._isValid;
	  }
	  return ret;
	}
	createDuration.fn = Duration.prototype;
	createDuration.invalid = createInvalid$1;
	function parseIso(inp, sign) {
	  var res = inp && parseFloat(inp.replace(',', '.'));
	  return (isNaN(res) ? 0 : res) * sign;
	}
	function positiveMomentsDifference(base, other) {
	  var res = {};
	  res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
	  if (base.clone().add(res.months, 'M').isAfter(other)) {
	    --res.months;
	  }
	  res.milliseconds = +other - +base.clone().add(res.months, 'M');
	  return res;
	}
	function momentsDifference(base, other) {
	  var res;
	  if (!(base.isValid() && other.isValid())) {
	    return {
	      milliseconds: 0,
	      months: 0
	    };
	  }
	  other = cloneWithOffset(other, base);
	  if (base.isBefore(other)) {
	    res = positiveMomentsDifference(base, other);
	  } else {
	    res = positiveMomentsDifference(other, base);
	    res.milliseconds = -res.milliseconds;
	    res.months = -res.months;
	  }
	  return res;
	}
	function createAdder(direction, name) {
	  return function (val, period) {
	    var dur, tmp;
	    if (period !== null && !isNaN(+period)) {
	      deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	      tmp = val;
	      val = period;
	      period = tmp;
	    }
	    dur = createDuration(val, period);
	    addSubtract(this, dur, direction);
	    return this;
	  };
	}
	function addSubtract(mom, duration, isAdding, updateOffset) {
	  var milliseconds = duration._milliseconds,
	    days = absRound(duration._days),
	    months = absRound(duration._months);
	  if (!mom.isValid()) {
	    return;
	  }
	  updateOffset = updateOffset == null ? true : updateOffset;
	  if (months) {
	    setMonth(mom, get(mom, 'Month') + months * isAdding);
	  }
	  if (days) {
	    set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	  }
	  if (milliseconds) {
	    mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	  }
	  if (updateOffset) {
	    hooks.updateOffset(mom, days || months);
	  }
	}
	var add = createAdder(1, 'add'),
	  subtract = createAdder(-1, 'subtract');
	function isString(input) {
	  return typeof input === 'string' || input instanceof String;
	}
	function isMomentInput(input) {
	  return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;
	}
	function isMomentInputObject(input) {
	  var objectTest = isObject$1(input) && !isObjectEmpty(input),
	    propertyTest = false,
	    properties = ['years', 'year', 'y', 'months', 'month', 'M', 'days', 'day', 'd', 'dates', 'date', 'D', 'hours', 'hour', 'h', 'minutes', 'minute', 'm', 'seconds', 'second', 's', 'milliseconds', 'millisecond', 'ms'],
	    i,
	    property,
	    propertyLen = properties.length;
	  for (i = 0; i < propertyLen; i += 1) {
	    property = properties[i];
	    propertyTest = propertyTest || hasOwnProp(input, property);
	  }
	  return objectTest && propertyTest;
	}
	function isNumberOrStringArray(input) {
	  var arrayTest = isArray(input),
	    dataTypeTest = false;
	  if (arrayTest) {
	    dataTypeTest = input.filter(function (item) {
	      return !isNumber(item) && isString(input);
	    }).length === 0;
	  }
	  return arrayTest && dataTypeTest;
	}
	function isCalendarSpec(input) {
	  var objectTest = isObject$1(input) && !isObjectEmpty(input),
	    propertyTest = false,
	    properties = ['sameDay', 'nextDay', 'lastDay', 'nextWeek', 'lastWeek', 'sameElse'],
	    i,
	    property;
	  for (i = 0; i < properties.length; i += 1) {
	    property = properties[i];
	    propertyTest = propertyTest || hasOwnProp(input, property);
	  }
	  return objectTest && propertyTest;
	}
	function getCalendarFormat(myMoment, now) {
	  var diff = myMoment.diff(now, 'days', true);
	  return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
	}
	function calendar$1(time, formats) {
	  if (arguments.length === 1) {
	    if (!arguments[0]) {
	      time = undefined;
	      formats = undefined;
	    } else if (isMomentInput(arguments[0])) {
	      time = arguments[0];
	      formats = undefined;
	    } else if (isCalendarSpec(arguments[0])) {
	      formats = arguments[0];
	      time = undefined;
	    }
	  }
	  var now = time || createLocal(),
	    sod = cloneWithOffset(now, this).startOf('day'),
	    format = hooks.calendarFormat(this, sod) || 'sameElse',
	    output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
	  return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
	}
	function clone() {
	  return new Moment(this);
	}
	function isAfter(input, units) {
	  var localInput = isMoment(input) ? input : createLocal(input);
	  if (!(this.isValid() && localInput.isValid())) {
	    return false;
	  }
	  units = normalizeUnits(units) || 'millisecond';
	  if (units === 'millisecond') {
	    return this.valueOf() > localInput.valueOf();
	  } else {
	    return localInput.valueOf() < this.clone().startOf(units).valueOf();
	  }
	}
	function isBefore(input, units) {
	  var localInput = isMoment(input) ? input : createLocal(input);
	  if (!(this.isValid() && localInput.isValid())) {
	    return false;
	  }
	  units = normalizeUnits(units) || 'millisecond';
	  if (units === 'millisecond') {
	    return this.valueOf() < localInput.valueOf();
	  } else {
	    return this.clone().endOf(units).valueOf() < localInput.valueOf();
	  }
	}
	function isBetween(from, to, units, inclusivity) {
	  var localFrom = isMoment(from) ? from : createLocal(from),
	    localTo = isMoment(to) ? to : createLocal(to);
	  if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
	    return false;
	  }
	  inclusivity = inclusivity || '()';
	  return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
	}
	function isSame(input, units) {
	  var localInput = isMoment(input) ? input : createLocal(input),
	    inputMs;
	  if (!(this.isValid() && localInput.isValid())) {
	    return false;
	  }
	  units = normalizeUnits(units) || 'millisecond';
	  if (units === 'millisecond') {
	    return this.valueOf() === localInput.valueOf();
	  } else {
	    inputMs = localInput.valueOf();
	    return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	  }
	}
	function isSameOrAfter(input, units) {
	  return this.isSame(input, units) || this.isAfter(input, units);
	}
	function isSameOrBefore(input, units) {
	  return this.isSame(input, units) || this.isBefore(input, units);
	}
	function diff(input, units, asFloat) {
	  var that, zoneDelta, output;
	  if (!this.isValid()) {
	    return NaN;
	  }
	  that = cloneWithOffset(input, this);
	  if (!that.isValid()) {
	    return NaN;
	  }
	  zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
	  units = normalizeUnits(units);
	  switch (units) {
	    case 'year':
	      output = monthDiff(this, that) / 12;
	      break;
	    case 'month':
	      output = monthDiff(this, that);
	      break;
	    case 'quarter':
	      output = monthDiff(this, that) / 3;
	      break;
	    case 'second':
	      output = (this - that) / 1e3;
	      break;
	    case 'minute':
	      output = (this - that) / 6e4;
	      break;
	    case 'hour':
	      output = (this - that) / 36e5;
	      break;
	    case 'day':
	      output = (this - that - zoneDelta) / 864e5;
	      break;
	    case 'week':
	      output = (this - that - zoneDelta) / 6048e5;
	      break;
	    default:
	      output = this - that;
	  }
	  return asFloat ? output : absFloor(output);
	}
	function monthDiff(a, b) {
	  if (a.date() < b.date()) {
	    return -monthDiff(b, a);
	  }
	  var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
	    anchor = a.clone().add(wholeMonthDiff, 'months'),
	    anchor2,
	    adjust;
	  if (b - anchor < 0) {
	    anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	    adjust = (b - anchor) / (anchor - anchor2);
	  } else {
	    anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	    adjust = (b - anchor) / (anchor2 - anchor);
	  }
	  return -(wholeMonthDiff + adjust) || 0;
	}
	hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
	function toString$1() {
	  return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	}
	function toISOString(keepOffset) {
	  if (!this.isValid()) {
	    return null;
	  }
	  var utc = keepOffset !== true,
	    m = utc ? this.clone().utc() : this;
	  if (m.year() < 0 || m.year() > 9999) {
	    return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
	  }
	  if (isFunction(Date.prototype.toISOString)) {
	    if (utc) {
	      return this.toDate().toISOString();
	    } else {
	      return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
	    }
	  }
	  return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
	}
	function inspect() {
	  if (!this.isValid()) {
	    return 'moment.invalid(/* ' + this._i + ' */)';
	  }
	  var func = 'moment',
	    zone = '',
	    prefix,
	    year,
	    datetime,
	    suffix;
	  if (!this.isLocal()) {
	    func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	    zone = 'Z';
	  }
	  prefix = '[' + func + '("]';
	  year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
	  datetime = '-MM-DD[T]HH:mm:ss.SSS';
	  suffix = zone + '[")]';
	  return this.format(prefix + year + datetime + suffix);
	}
	function format(inputString) {
	  if (!inputString) {
	    inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
	  }
	  var output = formatMoment(this, inputString);
	  return this.localeData().postformat(output);
	}
	function from(time, withoutSuffix) {
	  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
	    return createDuration({
	      to: this,
	      from: time
	    }).locale(this.locale()).humanize(!withoutSuffix);
	  } else {
	    return this.localeData().invalidDate();
	  }
	}
	function fromNow(withoutSuffix) {
	  return this.from(createLocal(), withoutSuffix);
	}
	function to(time, withoutSuffix) {
	  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
	    return createDuration({
	      from: this,
	      to: time
	    }).locale(this.locale()).humanize(!withoutSuffix);
	  } else {
	    return this.localeData().invalidDate();
	  }
	}
	function toNow(withoutSuffix) {
	  return this.to(createLocal(), withoutSuffix);
	}
	function locale(key) {
	  var newLocaleData;
	  if (key === undefined) {
	    return this._locale._abbr;
	  } else {
	    newLocaleData = getLocale(key);
	    if (newLocaleData != null) {
	      this._locale = newLocaleData;
	    }
	    return this;
	  }
	}
	var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
	  if (key === undefined) {
	    return this.localeData();
	  } else {
	    return this.locale(key);
	  }
	});
	function localeData() {
	  return this._locale;
	}
	var MS_PER_SECOND = 1000,
	  MS_PER_MINUTE = 60 * MS_PER_SECOND,
	  MS_PER_HOUR = 60 * MS_PER_MINUTE,
	  MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
	function mod$1(dividend, divisor) {
	  return (dividend % divisor + divisor) % divisor;
	}
	function localStartOfDate(y, m, d) {
	  if (y < 100 && y >= 0) {
	    return new Date(y + 400, m, d) - MS_PER_400_YEARS;
	  } else {
	    return new Date(y, m, d).valueOf();
	  }
	}
	function utcStartOfDate(y, m, d) {
	  if (y < 100 && y >= 0) {
	    return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
	  } else {
	    return Date.UTC(y, m, d);
	  }
	}
	function startOf(units) {
	  var time, startOfDate;
	  units = normalizeUnits(units);
	  if (units === undefined || units === 'millisecond' || !this.isValid()) {
	    return this;
	  }
	  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
	  switch (units) {
	    case 'year':
	      time = startOfDate(this.year(), 0, 1);
	      break;
	    case 'quarter':
	      time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
	      break;
	    case 'month':
	      time = startOfDate(this.year(), this.month(), 1);
	      break;
	    case 'week':
	      time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
	      break;
	    case 'isoWeek':
	      time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
	      break;
	    case 'day':
	    case 'date':
	      time = startOfDate(this.year(), this.month(), this.date());
	      break;
	    case 'hour':
	      time = this._d.valueOf();
	      time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
	      break;
	    case 'minute':
	      time = this._d.valueOf();
	      time -= mod$1(time, MS_PER_MINUTE);
	      break;
	    case 'second':
	      time = this._d.valueOf();
	      time -= mod$1(time, MS_PER_SECOND);
	      break;
	  }
	  this._d.setTime(time);
	  hooks.updateOffset(this, true);
	  return this;
	}
	function endOf(units) {
	  var time, startOfDate;
	  units = normalizeUnits(units);
	  if (units === undefined || units === 'millisecond' || !this.isValid()) {
	    return this;
	  }
	  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
	  switch (units) {
	    case 'year':
	      time = startOfDate(this.year() + 1, 0, 1) - 1;
	      break;
	    case 'quarter':
	      time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
	      break;
	    case 'month':
	      time = startOfDate(this.year(), this.month() + 1, 1) - 1;
	      break;
	    case 'week':
	      time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
	      break;
	    case 'isoWeek':
	      time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
	      break;
	    case 'day':
	    case 'date':
	      time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
	      break;
	    case 'hour':
	      time = this._d.valueOf();
	      time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
	      break;
	    case 'minute':
	      time = this._d.valueOf();
	      time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
	      break;
	    case 'second':
	      time = this._d.valueOf();
	      time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
	      break;
	  }
	  this._d.setTime(time);
	  hooks.updateOffset(this, true);
	  return this;
	}
	function valueOf() {
	  return this._d.valueOf() - (this._offset || 0) * 60000;
	}
	function unix() {
	  return Math.floor(this.valueOf() / 1000);
	}
	function toDate() {
	  return new Date(this.valueOf());
	}
	function toArray() {
	  var m = this;
	  return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	}
	function toObject() {
	  var m = this;
	  return {
	    years: m.year(),
	    months: m.month(),
	    date: m.date(),
	    hours: m.hours(),
	    minutes: m.minutes(),
	    seconds: m.seconds(),
	    milliseconds: m.milliseconds()
	  };
	}
	function toJSON() {
	  return this.isValid() ? this.toISOString() : null;
	}
	function isValid$2() {
	  return isValid(this);
	}
	function parsingFlags() {
	  return extend({}, getParsingFlags(this));
	}
	function invalidAt() {
	  return getParsingFlags(this).overflow;
	}
	function creationData() {
	  return {
	    input: this._i,
	    format: this._f,
	    locale: this._locale,
	    isUTC: this._isUTC,
	    strict: this._strict
	  };
	}
	addFormatToken('N', 0, 0, 'eraAbbr');
	addFormatToken('NN', 0, 0, 'eraAbbr');
	addFormatToken('NNN', 0, 0, 'eraAbbr');
	addFormatToken('NNNN', 0, 0, 'eraName');
	addFormatToken('NNNNN', 0, 0, 'eraNarrow');
	addFormatToken('y', ['y', 1], 'yo', 'eraYear');
	addFormatToken('y', ['yy', 2], 0, 'eraYear');
	addFormatToken('y', ['yyy', 3], 0, 'eraYear');
	addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
	addRegexToken('N', matchEraAbbr);
	addRegexToken('NN', matchEraAbbr);
	addRegexToken('NNN', matchEraAbbr);
	addRegexToken('NNNN', matchEraName);
	addRegexToken('NNNNN', matchEraNarrow);
	addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token) {
	  var era = config._locale.erasParse(input, token, config._strict);
	  if (era) {
	    getParsingFlags(config).era = era;
	  } else {
	    getParsingFlags(config).invalidEra = input;
	  }
	});
	addRegexToken('y', matchUnsigned);
	addRegexToken('yy', matchUnsigned);
	addRegexToken('yyy', matchUnsigned);
	addRegexToken('yyyy', matchUnsigned);
	addRegexToken('yo', matchEraYearOrdinal);
	addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
	addParseToken(['yo'], function (input, array, config, token) {
	  var match;
	  if (config._locale._eraYearOrdinalRegex) {
	    match = input.match(config._locale._eraYearOrdinalRegex);
	  }
	  if (config._locale.eraYearOrdinalParse) {
	    array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
	  } else {
	    array[YEAR] = parseInt(input, 10);
	  }
	});
	function localeEras(m, format) {
	  var i,
	    l,
	    date,
	    eras = this._eras || getLocale('en')._eras;
	  for (i = 0, l = eras.length; i < l; ++i) {
	    switch (_typeof$1(eras[i].since)) {
	      case 'string':
	        date = hooks(eras[i].since).startOf('day');
	        eras[i].since = date.valueOf();
	        break;
	    }
	    switch (_typeof$1(eras[i].until)) {
	      case 'undefined':
	        eras[i].until = +Infinity;
	        break;
	      case 'string':
	        date = hooks(eras[i].until).startOf('day').valueOf();
	        eras[i].until = date.valueOf();
	        break;
	    }
	  }
	  return eras;
	}
	function localeErasParse(eraName, format, strict) {
	  var i,
	    l,
	    eras = this.eras(),
	    name,
	    abbr,
	    narrow;
	  eraName = eraName.toUpperCase();
	  for (i = 0, l = eras.length; i < l; ++i) {
	    name = eras[i].name.toUpperCase();
	    abbr = eras[i].abbr.toUpperCase();
	    narrow = eras[i].narrow.toUpperCase();
	    if (strict) {
	      switch (format) {
	        case 'N':
	        case 'NN':
	        case 'NNN':
	          if (abbr === eraName) {
	            return eras[i];
	          }
	          break;
	        case 'NNNN':
	          if (name === eraName) {
	            return eras[i];
	          }
	          break;
	        case 'NNNNN':
	          if (narrow === eraName) {
	            return eras[i];
	          }
	          break;
	      }
	    } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
	      return eras[i];
	    }
	  }
	}
	function localeErasConvertYear(era, year) {
	  var dir = era.since <= era.until ? +1 : -1;
	  if (year === undefined) {
	    return hooks(era.since).year();
	  } else {
	    return hooks(era.since).year() + (year - era.offset) * dir;
	  }
	}
	function getEraName() {
	  var i,
	    l,
	    val,
	    eras = this.localeData().eras();
	  for (i = 0, l = eras.length; i < l; ++i) {
	    val = this.clone().startOf('day').valueOf();
	    if (eras[i].since <= val && val <= eras[i].until) {
	      return eras[i].name;
	    }
	    if (eras[i].until <= val && val <= eras[i].since) {
	      return eras[i].name;
	    }
	  }
	  return '';
	}
	function getEraNarrow() {
	  var i,
	    l,
	    val,
	    eras = this.localeData().eras();
	  for (i = 0, l = eras.length; i < l; ++i) {
	    val = this.clone().startOf('day').valueOf();
	    if (eras[i].since <= val && val <= eras[i].until) {
	      return eras[i].narrow;
	    }
	    if (eras[i].until <= val && val <= eras[i].since) {
	      return eras[i].narrow;
	    }
	  }
	  return '';
	}
	function getEraAbbr() {
	  var i,
	    l,
	    val,
	    eras = this.localeData().eras();
	  for (i = 0, l = eras.length; i < l; ++i) {
	    val = this.clone().startOf('day').valueOf();
	    if (eras[i].since <= val && val <= eras[i].until) {
	      return eras[i].abbr;
	    }
	    if (eras[i].until <= val && val <= eras[i].since) {
	      return eras[i].abbr;
	    }
	  }
	  return '';
	}
	function getEraYear() {
	  var i,
	    l,
	    dir,
	    val,
	    eras = this.localeData().eras();
	  for (i = 0, l = eras.length; i < l; ++i) {
	    dir = eras[i].since <= eras[i].until ? +1 : -1;
	    val = this.clone().startOf('day').valueOf();
	    if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
	      return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
	    }
	  }
	  return this.year();
	}
	function erasNameRegex(isStrict) {
	  if (!hasOwnProp(this, '_erasNameRegex')) {
	    computeErasParse.call(this);
	  }
	  return isStrict ? this._erasNameRegex : this._erasRegex;
	}
	function erasAbbrRegex(isStrict) {
	  if (!hasOwnProp(this, '_erasAbbrRegex')) {
	    computeErasParse.call(this);
	  }
	  return isStrict ? this._erasAbbrRegex : this._erasRegex;
	}
	function erasNarrowRegex(isStrict) {
	  if (!hasOwnProp(this, '_erasNarrowRegex')) {
	    computeErasParse.call(this);
	  }
	  return isStrict ? this._erasNarrowRegex : this._erasRegex;
	}
	function matchEraAbbr(isStrict, locale) {
	  return locale.erasAbbrRegex(isStrict);
	}
	function matchEraName(isStrict, locale) {
	  return locale.erasNameRegex(isStrict);
	}
	function matchEraNarrow(isStrict, locale) {
	  return locale.erasNarrowRegex(isStrict);
	}
	function matchEraYearOrdinal(isStrict, locale) {
	  return locale._eraYearOrdinalRegex || matchUnsigned;
	}
	function computeErasParse() {
	  var abbrPieces = [],
	    namePieces = [],
	    narrowPieces = [],
	    mixedPieces = [],
	    i,
	    l,
	    eras = this.eras();
	  for (i = 0, l = eras.length; i < l; ++i) {
	    namePieces.push(regexEscape(eras[i].name));
	    abbrPieces.push(regexEscape(eras[i].abbr));
	    narrowPieces.push(regexEscape(eras[i].narrow));
	    mixedPieces.push(regexEscape(eras[i].name));
	    mixedPieces.push(regexEscape(eras[i].abbr));
	    mixedPieces.push(regexEscape(eras[i].narrow));
	  }
	  this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	  this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
	  this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
	  this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
	}
	addFormatToken(0, ['gg', 2], 0, function () {
	  return this.weekYear() % 100;
	});
	addFormatToken(0, ['GG', 2], 0, function () {
	  return this.isoWeekYear() % 100;
	});
	function addWeekYearFormatToken(token, getter) {
	  addFormatToken(0, [token, token.length], 0, getter);
	}
	addWeekYearFormatToken('gggg', 'weekYear');
	addWeekYearFormatToken('ggggg', 'weekYear');
	addWeekYearFormatToken('GGGG', 'isoWeekYear');
	addWeekYearFormatToken('GGGGG', 'isoWeekYear');
	addUnitAlias('weekYear', 'gg');
	addUnitAlias('isoWeekYear', 'GG');
	addUnitPriority('weekYear', 1);
	addUnitPriority('isoWeekYear', 1);
	addRegexToken('G', matchSigned);
	addRegexToken('g', matchSigned);
	addRegexToken('GG', match1to2, match2);
	addRegexToken('gg', match1to2, match2);
	addRegexToken('GGGG', match1to4, match4);
	addRegexToken('gggg', match1to4, match4);
	addRegexToken('GGGGG', match1to6, match6);
	addRegexToken('ggggg', match1to6, match6);
	addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	  week[token.substr(0, 2)] = toInt(input);
	});
	addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	  week[token] = hooks.parseTwoDigitYear(input);
	});
	function getSetWeekYear(input) {
	  return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
	}
	function getSetISOWeekYear(input) {
	  return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
	}
	function getISOWeeksInYear() {
	  return weeksInYear(this.year(), 1, 4);
	}
	function getISOWeeksInISOWeekYear() {
	  return weeksInYear(this.isoWeekYear(), 1, 4);
	}
	function getWeeksInYear() {
	  var weekInfo = this.localeData()._week;
	  return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	}
	function getWeeksInWeekYear() {
	  var weekInfo = this.localeData()._week;
	  return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
	}
	function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	  var weeksTarget;
	  if (input == null) {
	    return weekOfYear(this, dow, doy).year;
	  } else {
	    weeksTarget = weeksInYear(input, dow, doy);
	    if (week > weeksTarget) {
	      week = weeksTarget;
	    }
	    return setWeekAll.call(this, input, week, weekday, dow, doy);
	  }
	}
	function setWeekAll(weekYear, week, weekday, dow, doy) {
	  var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	    date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
	  this.year(date.getUTCFullYear());
	  this.month(date.getUTCMonth());
	  this.date(date.getUTCDate());
	  return this;
	}
	addFormatToken('Q', 0, 'Qo', 'quarter');
	addUnitAlias('quarter', 'Q');
	addUnitPriority('quarter', 7);
	addRegexToken('Q', match1);
	addParseToken('Q', function (input, array) {
	  array[MONTH] = (toInt(input) - 1) * 3;
	});
	function getSetQuarter(input) {
	  return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	}
	addFormatToken('D', ['DD', 2], 'Do', 'date');
	addUnitAlias('date', 'D');
	addUnitPriority('date', 9);
	addRegexToken('D', match1to2);
	addRegexToken('DD', match1to2, match2);
	addRegexToken('Do', function (isStrict, locale) {
	  return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
	});
	addParseToken(['D', 'DD'], DATE);
	addParseToken('Do', function (input, array) {
	  array[DATE] = toInt(input.match(match1to2)[0]);
	});
	var getSetDayOfMonth = makeGetSet('Date', true);
	addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
	addUnitAlias('dayOfYear', 'DDD');
	addUnitPriority('dayOfYear', 4);
	addRegexToken('DDD', match1to3);
	addRegexToken('DDDD', match3);
	addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	  config._dayOfYear = toInt(input);
	});
	function getSetDayOfYear(input) {
	  var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	  return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
	}
	addFormatToken('m', ['mm', 2], 0, 'minute');
	addUnitAlias('minute', 'm');
	addUnitPriority('minute', 14);
	addRegexToken('m', match1to2);
	addRegexToken('mm', match1to2, match2);
	addParseToken(['m', 'mm'], MINUTE);
	var getSetMinute = makeGetSet('Minutes', false);
	addFormatToken('s', ['ss', 2], 0, 'second');
	addUnitAlias('second', 's');
	addUnitPriority('second', 15);
	addRegexToken('s', match1to2);
	addRegexToken('ss', match1to2, match2);
	addParseToken(['s', 'ss'], SECOND);
	var getSetSecond = makeGetSet('Seconds', false);
	addFormatToken('S', 0, 0, function () {
	  return ~~(this.millisecond() / 100);
	});
	addFormatToken(0, ['SS', 2], 0, function () {
	  return ~~(this.millisecond() / 10);
	});
	addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	addFormatToken(0, ['SSSS', 4], 0, function () {
	  return this.millisecond() * 10;
	});
	addFormatToken(0, ['SSSSS', 5], 0, function () {
	  return this.millisecond() * 100;
	});
	addFormatToken(0, ['SSSSSS', 6], 0, function () {
	  return this.millisecond() * 1000;
	});
	addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	  return this.millisecond() * 10000;
	});
	addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	  return this.millisecond() * 100000;
	});
	addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	  return this.millisecond() * 1000000;
	});
	addUnitAlias('millisecond', 'ms');
	addUnitPriority('millisecond', 16);
	addRegexToken('S', match1to3, match1);
	addRegexToken('SS', match1to3, match2);
	addRegexToken('SSS', match1to3, match3);
	var token, getSetMillisecond;
	for (token = 'SSSS'; token.length <= 9; token += 'S') {
	  addRegexToken(token, matchUnsigned);
	}
	function parseMs(input, array) {
	  array[MILLISECOND] = toInt(('0.' + input) * 1000);
	}
	for (token = 'S'; token.length <= 9; token += 'S') {
	  addParseToken(token, parseMs);
	}
	getSetMillisecond = makeGetSet('Milliseconds', false);
	addFormatToken('z', 0, 0, 'zoneAbbr');
	addFormatToken('zz', 0, 0, 'zoneName');
	function getZoneAbbr() {
	  return this._isUTC ? 'UTC' : '';
	}
	function getZoneName() {
	  return this._isUTC ? 'Coordinated Universal Time' : '';
	}
	var proto = Moment.prototype;
	proto.add = add;
	proto.calendar = calendar$1;
	proto.clone = clone;
	proto.diff = diff;
	proto.endOf = endOf;
	proto.format = format;
	proto.from = from;
	proto.fromNow = fromNow;
	proto.to = to;
	proto.toNow = toNow;
	proto.get = stringGet;
	proto.invalidAt = invalidAt;
	proto.isAfter = isAfter;
	proto.isBefore = isBefore;
	proto.isBetween = isBetween;
	proto.isSame = isSame;
	proto.isSameOrAfter = isSameOrAfter;
	proto.isSameOrBefore = isSameOrBefore;
	proto.isValid = isValid$2;
	proto.lang = lang;
	proto.locale = locale;
	proto.localeData = localeData;
	proto.max = prototypeMax;
	proto.min = prototypeMin;
	proto.parsingFlags = parsingFlags;
	proto.set = stringSet;
	proto.startOf = startOf;
	proto.subtract = subtract;
	proto.toArray = toArray;
	proto.toObject = toObject;
	proto.toDate = toDate;
	proto.toISOString = toISOString;
	proto.inspect = inspect;
	if (typeof Symbol !== 'undefined' && Symbol["for"] != null) {
	  proto[Symbol["for"]('nodejs.util.inspect.custom')] = function () {
	    return 'Moment<' + this.format() + '>';
	  };
	}
	proto.toJSON = toJSON;
	proto.toString = toString$1;
	proto.unix = unix;
	proto.valueOf = valueOf;
	proto.creationData = creationData;
	proto.eraName = getEraName;
	proto.eraNarrow = getEraNarrow;
	proto.eraAbbr = getEraAbbr;
	proto.eraYear = getEraYear;
	proto.year = getSetYear;
	proto.isLeapYear = getIsLeapYear;
	proto.weekYear = getSetWeekYear;
	proto.isoWeekYear = getSetISOWeekYear;
	proto.quarter = proto.quarters = getSetQuarter;
	proto.month = getSetMonth;
	proto.daysInMonth = getDaysInMonth;
	proto.week = proto.weeks = getSetWeek;
	proto.isoWeek = proto.isoWeeks = getSetISOWeek;
	proto.weeksInYear = getWeeksInYear;
	proto.weeksInWeekYear = getWeeksInWeekYear;
	proto.isoWeeksInYear = getISOWeeksInYear;
	proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
	proto.date = getSetDayOfMonth;
	proto.day = proto.days = getSetDayOfWeek;
	proto.weekday = getSetLocaleDayOfWeek;
	proto.isoWeekday = getSetISODayOfWeek;
	proto.dayOfYear = getSetDayOfYear;
	proto.hour = proto.hours = getSetHour;
	proto.minute = proto.minutes = getSetMinute;
	proto.second = proto.seconds = getSetSecond;
	proto.millisecond = proto.milliseconds = getSetMillisecond;
	proto.utcOffset = getSetOffset;
	proto.utc = setOffsetToUTC;
	proto.local = setOffsetToLocal;
	proto.parseZone = setOffsetToParsedOffset;
	proto.hasAlignedHourOffset = hasAlignedHourOffset;
	proto.isDST = isDaylightSavingTime;
	proto.isLocal = isLocal;
	proto.isUtcOffset = isUtcOffset;
	proto.isUtc = isUtc;
	proto.isUTC = isUtc;
	proto.zoneAbbr = getZoneAbbr;
	proto.zoneName = getZoneName;
	proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
	function createUnix(input) {
	  return createLocal(input * 1000);
	}
	function createInZone() {
	  return createLocal.apply(null, arguments).parseZone();
	}
	function preParsePostFormat(string) {
	  return string;
	}
	var proto$1 = Locale.prototype;
	proto$1.calendar = calendar;
	proto$1.longDateFormat = longDateFormat;
	proto$1.invalidDate = invalidDate;
	proto$1.ordinal = ordinal;
	proto$1.preparse = preParsePostFormat;
	proto$1.postformat = preParsePostFormat;
	proto$1.relativeTime = relativeTime;
	proto$1.pastFuture = pastFuture;
	proto$1.set = set;
	proto$1.eras = localeEras;
	proto$1.erasParse = localeErasParse;
	proto$1.erasConvertYear = localeErasConvertYear;
	proto$1.erasAbbrRegex = erasAbbrRegex;
	proto$1.erasNameRegex = erasNameRegex;
	proto$1.erasNarrowRegex = erasNarrowRegex;
	proto$1.months = localeMonths;
	proto$1.monthsShort = localeMonthsShort;
	proto$1.monthsParse = localeMonthsParse;
	proto$1.monthsRegex = monthsRegex;
	proto$1.monthsShortRegex = monthsShortRegex;
	proto$1.week = localeWeek;
	proto$1.firstDayOfYear = localeFirstDayOfYear;
	proto$1.firstDayOfWeek = localeFirstDayOfWeek;
	proto$1.weekdays = localeWeekdays;
	proto$1.weekdaysMin = localeWeekdaysMin;
	proto$1.weekdaysShort = localeWeekdaysShort;
	proto$1.weekdaysParse = localeWeekdaysParse;
	proto$1.weekdaysRegex = weekdaysRegex;
	proto$1.weekdaysShortRegex = weekdaysShortRegex;
	proto$1.weekdaysMinRegex = weekdaysMinRegex;
	proto$1.isPM = localeIsPM;
	proto$1.meridiem = localeMeridiem;
	function get$1(format, index, field, setter) {
	  var locale = getLocale(),
	    utc = createUTC().set(setter, index);
	  return locale[field](utc, format);
	}
	function listMonthsImpl(format, index, field) {
	  if (isNumber(format)) {
	    index = format;
	    format = undefined;
	  }
	  format = format || '';
	  if (index != null) {
	    return get$1(format, index, field, 'month');
	  }
	  var i,
	    out = [];
	  for (i = 0; i < 12; i++) {
	    out[i] = get$1(format, i, field, 'month');
	  }
	  return out;
	}
	function listWeekdaysImpl(localeSorted, format, index, field) {
	  if (typeof localeSorted === 'boolean') {
	    if (isNumber(format)) {
	      index = format;
	      format = undefined;
	    }
	    format = format || '';
	  } else {
	    format = localeSorted;
	    index = format;
	    localeSorted = false;
	    if (isNumber(format)) {
	      index = format;
	      format = undefined;
	    }
	    format = format || '';
	  }
	  var locale = getLocale(),
	    shift = localeSorted ? locale._week.dow : 0,
	    i,
	    out = [];
	  if (index != null) {
	    return get$1(format, (index + shift) % 7, field, 'day');
	  }
	  for (i = 0; i < 7; i++) {
	    out[i] = get$1(format, (i + shift) % 7, field, 'day');
	  }
	  return out;
	}
	function listMonths(format, index) {
	  return listMonthsImpl(format, index, 'months');
	}
	function listMonthsShort(format, index) {
	  return listMonthsImpl(format, index, 'monthsShort');
	}
	function listWeekdays(localeSorted, format, index) {
	  return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	}
	function listWeekdaysShort(localeSorted, format, index) {
	  return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	}
	function listWeekdaysMin(localeSorted, format, index) {
	  return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	}
	getSetGlobalLocale('en', {
	  eras: [{
	    since: '0001-01-01',
	    until: +Infinity,
	    offset: 1,
	    name: 'Anno Domini',
	    narrow: 'AD',
	    abbr: 'AD'
	  }, {
	    since: '0000-12-31',
	    until: -Infinity,
	    offset: 1,
	    name: 'Before Christ',
	    narrow: 'BC',
	    abbr: 'BC'
	  }],
	  dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	  ordinal: function ordinal(number) {
	    var b = number % 10,
	      output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
	    return number + output;
	  }
	});
	hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
	hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
	var mathAbs = Math.abs;
	function abs() {
	  var data = this._data;
	  this._milliseconds = mathAbs(this._milliseconds);
	  this._days = mathAbs(this._days);
	  this._months = mathAbs(this._months);
	  data.milliseconds = mathAbs(data.milliseconds);
	  data.seconds = mathAbs(data.seconds);
	  data.minutes = mathAbs(data.minutes);
	  data.hours = mathAbs(data.hours);
	  data.months = mathAbs(data.months);
	  data.years = mathAbs(data.years);
	  return this;
	}
	function addSubtract$1(duration, input, value, direction) {
	  var other = createDuration(input, value);
	  duration._milliseconds += direction * other._milliseconds;
	  duration._days += direction * other._days;
	  duration._months += direction * other._months;
	  return duration._bubble();
	}
	function add$1(input, value) {
	  return addSubtract$1(this, input, value, 1);
	}
	function subtract$1(input, value) {
	  return addSubtract$1(this, input, value, -1);
	}
	function absCeil(number) {
	  if (number < 0) {
	    return Math.floor(number);
	  } else {
	    return Math.ceil(number);
	  }
	}
	function bubble() {
	  var milliseconds = this._milliseconds,
	    days = this._days,
	    months = this._months,
	    data = this._data,
	    seconds,
	    minutes,
	    hours,
	    years,
	    monthsFromDays;
	  if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
	    milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	    days = 0;
	    months = 0;
	  }
	  data.milliseconds = milliseconds % 1000;
	  seconds = absFloor(milliseconds / 1000);
	  data.seconds = seconds % 60;
	  minutes = absFloor(seconds / 60);
	  data.minutes = minutes % 60;
	  hours = absFloor(minutes / 60);
	  data.hours = hours % 24;
	  days += absFloor(hours / 24);
	  monthsFromDays = absFloor(daysToMonths(days));
	  months += monthsFromDays;
	  days -= absCeil(monthsToDays(monthsFromDays));
	  years = absFloor(months / 12);
	  months %= 12;
	  data.days = days;
	  data.months = months;
	  data.years = years;
	  return this;
	}
	function daysToMonths(days) {
	  return days * 4800 / 146097;
	}
	function monthsToDays(months) {
	  return months * 146097 / 4800;
	}
	function as(units) {
	  if (!this.isValid()) {
	    return NaN;
	  }
	  var days,
	    months,
	    milliseconds = this._milliseconds;
	  units = normalizeUnits(units);
	  if (units === 'month' || units === 'quarter' || units === 'year') {
	    days = this._days + milliseconds / 864e5;
	    months = this._months + daysToMonths(days);
	    switch (units) {
	      case 'month':
	        return months;
	      case 'quarter':
	        return months / 3;
	      case 'year':
	        return months / 12;
	    }
	  } else {
	    days = this._days + Math.round(monthsToDays(this._months));
	    switch (units) {
	      case 'week':
	        return days / 7 + milliseconds / 6048e5;
	      case 'day':
	        return days + milliseconds / 864e5;
	      case 'hour':
	        return days * 24 + milliseconds / 36e5;
	      case 'minute':
	        return days * 1440 + milliseconds / 6e4;
	      case 'second':
	        return days * 86400 + milliseconds / 1000;
	      case 'millisecond':
	        return Math.floor(days * 864e5) + milliseconds;
	      default:
	        throw new Error('Unknown unit ' + units);
	    }
	  }
	}
	function valueOf$1() {
	  if (!this.isValid()) {
	    return NaN;
	  }
	  return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
	}
	function makeAs(alias) {
	  return function () {
	    return this.as(alias);
	  };
	}
	var asMilliseconds = makeAs('ms'),
	  asSeconds = makeAs('s'),
	  asMinutes = makeAs('m'),
	  asHours = makeAs('h'),
	  asDays = makeAs('d'),
	  asWeeks = makeAs('w'),
	  asMonths = makeAs('M'),
	  asQuarters = makeAs('Q'),
	  asYears = makeAs('y');
	function clone$1() {
	  return createDuration(this);
	}
	function get$2(units) {
	  units = normalizeUnits(units);
	  return this.isValid() ? this[units + 's']() : NaN;
	}
	function makeGetter(name) {
	  return function () {
	    return this.isValid() ? this._data[name] : NaN;
	  };
	}
	var milliseconds = makeGetter('milliseconds'),
	  seconds = makeGetter('seconds'),
	  minutes = makeGetter('minutes'),
	  hours = makeGetter('hours'),
	  days = makeGetter('days'),
	  months = makeGetter('months'),
	  years = makeGetter('years');
	function weeks() {
	  return absFloor(this.days() / 7);
	}
	var round = Math.round,
	  thresholds = {
	    ss: 44,
	    s: 45,
	    m: 45,
	    h: 22,
	    d: 26,
	    w: null,
	    M: 11
	  };
	function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	  return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	}
	function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
	  var duration = createDuration(posNegDuration).abs(),
	    seconds = round(duration.as('s')),
	    minutes = round(duration.as('m')),
	    hours = round(duration.as('h')),
	    days = round(duration.as('d')),
	    months = round(duration.as('M')),
	    weeks = round(duration.as('w')),
	    years = round(duration.as('y')),
	    a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days];
	  if (thresholds.w != null) {
	    a = a || weeks <= 1 && ['w'] || weeks < thresholds.w && ['ww', weeks];
	  }
	  a = a || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
	  a[2] = withoutSuffix;
	  a[3] = +posNegDuration > 0;
	  a[4] = locale;
	  return substituteTimeAgo.apply(null, a);
	}
	function getSetRelativeTimeRounding(roundingFunction) {
	  if (roundingFunction === undefined) {
	    return round;
	  }
	  if (typeof roundingFunction === 'function') {
	    round = roundingFunction;
	    return true;
	  }
	  return false;
	}
	function getSetRelativeTimeThreshold(threshold, limit) {
	  if (thresholds[threshold] === undefined) {
	    return false;
	  }
	  if (limit === undefined) {
	    return thresholds[threshold];
	  }
	  thresholds[threshold] = limit;
	  if (threshold === 's') {
	    thresholds.ss = limit - 1;
	  }
	  return true;
	}
	function humanize(argWithSuffix, argThresholds) {
	  if (!this.isValid()) {
	    return this.localeData().invalidDate();
	  }
	  var withSuffix = false,
	    th = thresholds,
	    locale,
	    output;
	  if (_typeof$1(argWithSuffix) === 'object') {
	    argThresholds = argWithSuffix;
	    argWithSuffix = false;
	  }
	  if (typeof argWithSuffix === 'boolean') {
	    withSuffix = argWithSuffix;
	  }
	  if (_typeof$1(argThresholds) === 'object') {
	    th = Object.assign({}, thresholds, argThresholds);
	    if (argThresholds.s != null && argThresholds.ss == null) {
	      th.ss = argThresholds.s - 1;
	    }
	  }
	  locale = this.localeData();
	  output = relativeTime$1(this, !withSuffix, th, locale);
	  if (withSuffix) {
	    output = locale.pastFuture(+this, output);
	  }
	  return locale.postformat(output);
	}
	var abs$1 = Math.abs;
	function sign(x) {
	  return (x > 0) - (x < 0) || +x;
	}
	function toISOString$1() {
	  if (!this.isValid()) {
	    return this.localeData().invalidDate();
	  }
	  var seconds = abs$1(this._milliseconds) / 1000,
	    days = abs$1(this._days),
	    months = abs$1(this._months),
	    minutes,
	    hours,
	    years,
	    s,
	    total = this.asSeconds(),
	    totalSign,
	    ymSign,
	    daysSign,
	    hmsSign;
	  if (!total) {
	    return 'P0D';
	  }
	  minutes = absFloor(seconds / 60);
	  hours = absFloor(minutes / 60);
	  seconds %= 60;
	  minutes %= 60;
	  years = absFloor(months / 12);
	  months %= 12;
	  s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
	  totalSign = total < 0 ? '-' : '';
	  ymSign = sign(this._months) !== sign(total) ? '-' : '';
	  daysSign = sign(this._days) !== sign(total) ? '-' : '';
	  hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
	  return totalSign + 'P' + (years ? ymSign + years + 'Y' : '') + (months ? ymSign + months + 'M' : '') + (days ? daysSign + days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hmsSign + hours + 'H' : '') + (minutes ? hmsSign + minutes + 'M' : '') + (seconds ? hmsSign + s + 'S' : '');
	}
	var proto$2 = Duration.prototype;
	proto$2.isValid = isValid$1;
	proto$2.abs = abs;
	proto$2.add = add$1;
	proto$2.subtract = subtract$1;
	proto$2.as = as;
	proto$2.asMilliseconds = asMilliseconds;
	proto$2.asSeconds = asSeconds;
	proto$2.asMinutes = asMinutes;
	proto$2.asHours = asHours;
	proto$2.asDays = asDays;
	proto$2.asWeeks = asWeeks;
	proto$2.asMonths = asMonths;
	proto$2.asQuarters = asQuarters;
	proto$2.asYears = asYears;
	proto$2.valueOf = valueOf$1;
	proto$2._bubble = bubble;
	proto$2.clone = clone$1;
	proto$2.get = get$2;
	proto$2.milliseconds = milliseconds;
	proto$2.seconds = seconds;
	proto$2.minutes = minutes;
	proto$2.hours = hours;
	proto$2.days = days;
	proto$2.weeks = weeks;
	proto$2.months = months;
	proto$2.years = years;
	proto$2.humanize = humanize;
	proto$2.toISOString = toISOString$1;
	proto$2.toString = toISOString$1;
	proto$2.toJSON = toISOString$1;
	proto$2.locale = locale;
	proto$2.localeData = localeData;
	proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
	proto$2.lang = lang;
	addFormatToken('X', 0, 0, 'unix');
	addFormatToken('x', 0, 0, 'valueOf');
	addRegexToken('x', matchSigned);
	addRegexToken('X', matchTimestamp);
	addParseToken('X', function (input, array, config) {
	  config._d = new Date(parseFloat(input) * 1000);
	});
	addParseToken('x', function (input, array, config) {
	  config._d = new Date(toInt(input));
	});
	hooks.version = '2.29.4';
	setHookCallback(createLocal);
	hooks.fn = proto;
	hooks.min = min;
	hooks.max = max;
	hooks.now = now;
	hooks.utc = createUTC;
	hooks.unix = createUnix;
	hooks.months = listMonths;
	hooks.isDate = isDate;
	hooks.locale = getSetGlobalLocale;
	hooks.invalid = createInvalid;
	hooks.duration = createDuration;
	hooks.isMoment = isMoment;
	hooks.weekdays = listWeekdays;
	hooks.parseZone = createInZone;
	hooks.localeData = getLocale;
	hooks.isDuration = isDuration;
	hooks.monthsShort = listMonthsShort;
	hooks.weekdaysMin = listWeekdaysMin;
	hooks.defineLocale = defineLocale;
	hooks.updateLocale = updateLocale;
	hooks.locales = listLocales;
	hooks.weekdaysShort = listWeekdaysShort;
	hooks.normalizeUnits = normalizeUnits;
	hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	hooks.calendarFormat = getCalendarFormat;
	hooks.prototype = proto;
	hooks.HTML5_FMT = {
	  DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
	  DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
	  DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
	  DATE: 'YYYY-MM-DD',
	  TIME: 'HH:mm',
	  TIME_SECONDS: 'HH:mm:ss',
	  TIME_MS: 'HH:mm:ss.SSS',
	  WEEK: 'GGGG-[W]WW',
	  MONTH: 'YYYY-MM'
	};

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var FieldTemplate = function (f) {
	    return Array.isArray(f)
	        ? f.reduce(function (arr, cur, index) {
	            return index === f.length - 1 ? arr + "[".concat(cur, "]") : arr + "[".concat(cur, "].");
	        }, '')
	        : "[".concat(f, "]");
	};

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var prefix = 'viz.workbench.dataview.';
	var DATE_LEVELS = [
	    {
	        category: ChartDataViewFieldCategory.DateLevelComputedField,
	        expression: DateLevelType.AggDateYear,
	        name: i18next.t(prefix + DateLevelType.AggDateYear),
	        type: 'DATE',
	    },
	    {
	        category: ChartDataViewFieldCategory.DateLevelComputedField,
	        expression: DateLevelType.AggDateQuarter,
	        name: i18next.t(prefix + DateLevelType.AggDateQuarter),
	        type: 'DATE',
	    },
	    {
	        category: ChartDataViewFieldCategory.DateLevelComputedField,
	        expression: DateLevelType.AggDateMonth,
	        name: i18next.t(prefix + DateLevelType.AggDateMonth),
	        type: 'DATE',
	    },
	    {
	        category: ChartDataViewFieldCategory.DateLevelComputedField,
	        expression: DateLevelType.AggDateWeek,
	        name: i18next.t(prefix + DateLevelType.AggDateWeek),
	        type: 'DATE',
	    },
	    {
	        category: ChartDataViewFieldCategory.DateLevelComputedField,
	        expression: DateLevelType.AggDateDay,
	        name: i18next.t(prefix + DateLevelType.AggDateDay),
	        type: 'DATE',
	    },
	    {
	        category: ChartDataViewFieldCategory.DateLevelComputedField,
	        expression: DateLevelType.AggDateHour,
	        name: i18next.t(prefix + DateLevelType.AggDateHour),
	        type: 'DATE',
	    },
	    {
	        category: ChartDataViewFieldCategory.DateLevelComputedField,
	        expression: DateLevelType.AggDateMinute,
	        name: i18next.t(prefix + DateLevelType.AggDateMinute),
	        type: 'DATE',
	    },
	];

	function transformMeta(model) {
	    if (!model) {
	        return undefined;
	    }
	    var jsonObj = JSON.parse(model || '{}');
	    var HierarchyModel = 'hierarchy' in jsonObj ? jsonObj.hierarchy : jsonObj;
	    return Object.keys(HierarchyModel || {}).flatMap(function (colKey) {
	        var column = HierarchyModel[colKey];
	        if (!isEmptyArray(column === null || column === void 0 ? void 0 : column.children)) {
	            return column.children.map(function (c) { return (_assign(_assign({}, c), { path: c.path, category: ChartDataViewFieldCategory.Field })); });
	        }
	        return _assign(_assign({}, column), { path: column.path || colKey, category: ChartDataViewFieldCategory.Field });
	    });
	}
	function transformHierarchyMeta(model) {
	    if (!model) {
	        return [];
	    }
	    var modelObj = JSON.parse(model || '{}');
	    var hierarchyMeta = !Object.keys((modelObj === null || modelObj === void 0 ? void 0 : modelObj.hierarchy) || {}).length
	        ? modelObj.columns
	        : modelObj.hierarchy;
	    return Object.keys(hierarchyMeta || {}).map(function (key) {
	        return getMeta$1(key, hierarchyMeta === null || hierarchyMeta === void 0 ? void 0 : hierarchyMeta[key]);
	    });
	}
	function getMeta$1(key, column) {
	    var children;
	    var isHierarchy = false;
	    if (!isEmptyArray(column === null || column === void 0 ? void 0 : column.children)) {
	        isHierarchy = true;
	        children = column === null || column === void 0 ? void 0 : column.children.map(function (child) { return getMeta$1(child === null || child === void 0 ? void 0 : child.name, child); });
	    }
	    return _assign(_assign({}, column), { subType: column === null || column === void 0 ? void 0 : column.category, category: isHierarchy
	            ? ChartDataViewFieldCategory.Hierarchy
	            : ChartDataViewFieldCategory.Field, children: children });
	}
	var transformToViewConfig = function (viewConfig) {
	    var viewConfigMap = viewConfig;
	    if (typeof viewConfig === 'string') {
	        viewConfigMap = JSON.parse(viewConfig || '{}');
	    }
	    var fields = [
	        'cache',
	        'cacheExpires',
	        'concurrencyControl',
	        'concurrencyControlMode',
	    ];
	    return fields.reduce(function (acc, cur) {
	        acc[cur] = viewConfigMap === null || viewConfigMap === void 0 ? void 0 : viewConfigMap[cur];
	        return acc;
	    }, {});
	};

	var root = _root;
	var nativeIsFinite = root.isFinite;
	function isFinite$1(value) {
	  return typeof value == 'number' && nativeIsFinite(value);
	}
	var _isFinite = isFinite$1;
	getDefaultExportFromCjs(_isFinite);

	/**
	 * [中文] 通过数组路径语法，获取对应的配置的值集合
	 * </br>
	 * [EN] Get config style values
	 *
	 * @example
	 *
	 * const styleConfigs = [
	 *       {
	 *        key: 'label',
	 *        rows: [
	 *           { key: 'color', value: 'red' },
	 *           { key: 'font', value: 'sans-serif' },
	 *         ],
	 *       },
	 *     ];
	 * const [color, font] = getStyles(styleConfigs, ['label'], ['color', 'font']);
	 * ////console.log(color); // red
	 * ////console.log(font); // sans-serif
	 *
	 * @param {Array<ChartStyleConfig>} configs required
	 * @param {Array<string>} parentKeyPaths required
	 * @param {Array<string>} childTargetKeys required
	 * @return {*} array of child keys with the same order
	 */
	function getStyles(configs, parentKeyPaths, childTargetKeys) {
	    var rows = getValue(configs, parentKeyPaths, 'rows');
	    if (!rows) {
	        return Array(childTargetKeys.length).fill(undefined);
	    }
	    return childTargetKeys.map(function (k) { return getValue(rows, [k]); });
	}
	/**
	 * [中文] 通过数组路径语法，获取对应的配置信息
	 * </br>
	 * [EN] Get style config value base function with default target key
	 *
	 * @example
	 *
	 * const styleConfigs = [
	 *       {
	 *        key: 'label',
	 *        rows: [
	 *           { key: 'color', value: 'red' },
	 *           { key: 'font', value: 'sans-serif' },
	 *         ],
	 *       },
	 *     ];
	 * const colorValue = getValue(styleConfigs, ['label', 'color']);
	 * ////console.log(colorValue); // red
	 *
	 * @param {Array<ChartStyleConfig>} configs
	 * @param {Array<string>} keyPaths
	 * @param {string} [targetKey='value']
	 * @return {*}
	 */
	function getValue(configs, keyPaths, targetKey) {
	    if (targetKey === void 0) { targetKey = 'value'; }
	    var iterators = configs || [];
	    var _loop_1 = function () {
	        var key = keyPaths === null || keyPaths === void 0 ? void 0 : keyPaths.shift();
	        var group = iterators === null || iterators === void 0 ? void 0 : iterators.find(function (sc) { return sc.key === key; });
	        if (!group) {
	            return { value: undefined };
	        }
	        if (isEmptyArray(keyPaths)) {
	            return { value: group[targetKey] };
	        }
	        iterators = group.rows || [];
	    };
	    while (!isEmptyArray(iterators)) {
	        var state_1 = _loop_1();
	        if (typeof state_1 === "object")
	            return state_1.value;
	    }
	}
	var getRuntimeDateLevelFields = function (rows) {
	    var _rows = CloneValueDeep(rows);
	    _rows === null || _rows === void 0 ? void 0 : _rows.forEach(function (v, i) {
	        var symbolData = v === null || v === void 0 ? void 0 : v[RUNTIME_DATE_LEVEL_KEY];
	        if (symbolData) {
	            _rows[i] = symbolData;
	        }
	    });
	    return _rows;
	};
	function getAllColumnInMeta(meta) {
	    return ((meta === null || meta === void 0 ? void 0 : meta.reduce(function (arr, cur) {
	        return cur.children ? arr.concat(cur.children) : arr.concat([cur]);
	    }, [])) || []);
	}
	function findPathByNameInMeta(meta, colName) {
	    var _a;
	    return (_a = getAllColumnInMeta(meta)) === null || _a === void 0 ? void 0 : _a.find(function (v) { return v.name === colName; });
	}
	function mergeChartAndViewComputedField(viewComputer, chartComputer) {
	    viewComputer = viewComputer || [];
	    return UniqWith(viewComputer.concat(chartComputer || []), function (a, b) { return (a === null || a === void 0 ? void 0 : a.name) === (b === null || b === void 0 ? void 0 : b.name); });
	}
	function createDateLevelComputedFieldForConfigComputedFields(meta, computedFields) {
	    var _a;
	    if (!meta) {
	        return [];
	    }
	    var dateFields = ((_a = getAllColumnInMeta(meta)) === null || _a === void 0 ? void 0 : _a.filter(function (v) { return v.type === DataViewFieldType.DATE; })) ||
	        [];
	    var allDateLevelComputedFields = [];
	    var notDateLevelComputedFields = (computedFields === null || computedFields === void 0 ? void 0 : computedFields.filter(function (field) {
	        return field.category !== ChartDataViewFieldCategory.DateLevelComputedField;
	    })) || [];
	    dateFields.forEach(function (field) {
	        DATE_LEVELS.forEach(function (v) {
	            allDateLevelComputedFields.push({
	                category: ChartDataViewFieldCategory.DateLevelComputedField,
	                name: field.name + DATE_LEVEL_DELIMITER + v.expression,
	                type: field.type,
	                expression: "".concat(v.expression, "(").concat(FieldTemplate(field.path), ")"),
	            });
	        });
	    });
	    return allDateLevelComputedFields.concat(notDateLevelComputedFields);
	}

	function getTimeRange(amount, unit) {
	    return function (unitOfTime, dateFormat) {
	        var startTime = hooks()
	            .add(amount === null || amount === void 0 ? void 0 : amount[0], unit)
	            .startOf(unitOfTime);
	        var endTime = hooks()
	            .add(amount === null || amount === void 0 ? void 0 : amount[1], unit)
	            .endOf(unitOfTime);
	        return [
	            startTime.format(dateFormat || TIME_FORMATTER),
	            endTime.format(dateFormat || TIME_FORMATTER),
	        ];
	    };
	}
	function getTime(amount, unit) {
	    return function (unitOfTime, isStart) {
	        if (isStart) {
	            return hooks().add(amount, unit).startOf(unitOfTime);
	        }
	        return hooks().add(amount, unit).add(1, unit).startOf(unitOfTime);
	    };
	}
	function formatTime(time, format) {
	    return hooks(time).format(format || TIME_FORMATTER);
	}
	function recommendTimeRangeConverter(relativeTimeRange, dateFormat) {
	    var timeRange = getTimeRange()('d', dateFormat);
	    switch (relativeTimeRange) {
	        case RECOMMEND_TIME.TODAY:
	            break;
	        case RECOMMEND_TIME.YESTERDAY:
	            timeRange = getTimeRange([-1, 0], 'd')('d', dateFormat);
	            break;
	        case RECOMMEND_TIME.THIS_WEEK:
	            timeRange = getTimeRange()('W', dateFormat);
	            break;
	        case RECOMMEND_TIME.LAST_7_DAYS:
	            timeRange = getTimeRange([-7, 0], 'd')('d', dateFormat);
	            break;
	        case RECOMMEND_TIME.LAST_30_DAYS:
	            timeRange = getTimeRange([-30, 0], 'd')('d', dateFormat);
	            break;
	        case RECOMMEND_TIME.LAST_90_DAYS:
	            timeRange = getTimeRange([-90, 0], 'd')('d', dateFormat);
	            break;
	        case RECOMMEND_TIME.LAST_1_MONTH:
	            timeRange = getTimeRange([-1, 0], 'M')('d', dateFormat);
	            break;
	        case RECOMMEND_TIME.LAST_1_YEAR:
	            timeRange = getTimeRange([-1, 0], 'y')('d', dateFormat);
	            break;
	    }
	    return timeRange;
	}
	var splitRangerDateFilters = function (filters) {
	    if (!Array.isArray(filters))
	        return [];
	    var newFilter = [];
	    filters.forEach(function (filter) {
	        var _a, _b, _c, _d, _e;
	        var isTargetFilter = false;
	        if (filter.sqlOperator === FilterSqlOperator.Between &&
	            ((_a = filter.values) === null || _a === void 0 ? void 0 : _a[0].valueType) === DataViewFieldType.DATE) {
	            isTargetFilter = true;
	        }
	        if (!isTargetFilter) {
	            newFilter.push(filter);
	            return;
	        }
	        // split date range filters
	        if (((_b = filter.values) === null || _b === void 0 ? void 0 : _b[0]) && ((_c = filter.values) === null || _c === void 0 ? void 0 : _c[1])) {
	            var start = _assign(_assign({}, filter), { sqlOperator: FilterSqlOperator.GreaterThanOrEqual, values: [(_d = filter.values) === null || _d === void 0 ? void 0 : _d[0]] });
	            var end = _assign(_assign({}, filter), { sqlOperator: FilterSqlOperator.LessThan, values: [(_e = filter.values) === null || _e === void 0 ? void 0 : _e[1]] });
	            newFilter.push(start, end);
	        }
	    });
	    return newFilter;
	};

	function isUndefined(value) {
	  return value === undefined;
	}
	var isUndefined_1 = isUndefined;
	var isUndefined$1 = getDefaultExportFromCjs(isUndefined_1);

	var hasWrongDimensionName = function (config) {
	    var _a;
	    if (!config) {
	        return false;
	    }
	    return Boolean((_a = config === null || config === void 0 ? void 0 : config.datas) === null || _a === void 0 ? void 0 : _a.find(function (d) {
	        return ['deminsion', 'deminsionL', 'deminsionR'].includes(d.key);
	    }));
	};
	function alpha3(config) {
	    var _a, _b, _c, _d, _e, _f, _g, _h;
	    try {
	        if (hasWrongDimensionName(config === null || config === void 0 ? void 0 : config.chartConfig)) {
	            var metricSection = (_b = (_a = config === null || config === void 0 ? void 0 : config.chartConfig) === null || _a === void 0 ? void 0 : _a.datas) === null || _b === void 0 ? void 0 : _b.find(function (d) { return d.key === 'metrics'; });
	            if (!isUndefined$1(metricSection)) {
	                metricSection.key = 'dimension';
	            }
	            var wrongNameOfDimension = (_d = (_c = config === null || config === void 0 ? void 0 : config.chartConfig) === null || _c === void 0 ? void 0 : _c.datas) === null || _d === void 0 ? void 0 : _d.find(function (d) { return d.key === 'deminsion'; });
	            if (!isUndefined$1(wrongNameOfDimension)) {
	                wrongNameOfDimension.key = 'metrics';
	            }
	            var wrongNameOfDimensionL = (_f = (_e = config === null || config === void 0 ? void 0 : config.chartConfig) === null || _e === void 0 ? void 0 : _e.datas) === null || _f === void 0 ? void 0 : _f.find(function (d) { return d.key === 'deminsionL'; });
	            if (!isUndefined$1(wrongNameOfDimensionL)) {
	                wrongNameOfDimensionL.key = 'metricsL';
	            }
	            var wrongNameOfDimensionR = (_h = (_g = config === null || config === void 0 ? void 0 : config.chartConfig) === null || _g === void 0 ? void 0 : _g.datas) === null || _h === void 0 ? void 0 : _h.find(function (d) { return d.key === 'deminsionR'; });
	            if (!isUndefined$1(wrongNameOfDimensionR)) {
	                wrongNameOfDimensionR.key = 'metricsR';
	            }
	        }
	    }
	    catch (error) {
	        console.error('Chart Migration Errors | alpha3 | ', error);
	    }
	    return config;
	}

	/**
	 * @summary A function used for auto merge/fix chart config data by different version
	 * @description
	 *  transforms:
	 *      0. alpha3 - 2021.11.18, issue #228
	 *      1. .....
	 * @param {ChartDetailConfigDTO} config, which is going to merge
	 * @returns {ChartDetailConfigDTO} merged results and mark the version to latest
	 *  */
	function migrateChartConfig$1(config) {
	    if (!config) {
	        return config;
	    }
	    return pipe(alpha3)(config);
	}

	var ChartDataRequestBuilder = /** @class */ (function () {
	    function ChartDataRequestBuilder(dataView, dataConfigs, settingConfigs, pageInfo, script, aggregation) {
	        var _this = this;
	        this.extraSorters = [];
	        this.extraRuntimeFilters = [];
	        this.normalizeFilters = function (fields) {
	            var _timeConverter = function (visualType, value, dateFormat) {
	                if (dateFormat === void 0) { dateFormat = TIME_FORMATTER; }
	                if (visualType !== 'DATE') {
	                    return value;
	                }
	                if (Boolean(value) && typeof value === 'object' && 'unit' in value) {
	                    var time = getTime(+(value.direction + value.amount), value.unit)(value.unit, value.isStart);
	                    return formatTime(time, dateFormat);
	                }
	                return formatTime(value, dateFormat);
	            };
	            var _transformFieldValues = function (field) {
	                var _a, _b, _c, _d, _e, _f;
	                var conditionValue = (_b = (_a = field.filter) === null || _a === void 0 ? void 0 : _a.condition) === null || _b === void 0 ? void 0 : _b.value;
	                var dateFormat = field.dateFormat;
	                if (!conditionValue) {
	                    return null;
	                }
	                if (Array.isArray(conditionValue)) {
	                    return conditionValue
	                        .map(function (v) {
	                        var _a, _b;
	                        if (IsKeyIn(v, 'key')) {
	                            var listItem = v;
	                            if (!listItem.isSelected) {
	                                return undefined;
	                            }
	                            return {
	                                value: listItem.key,
	                                valueType: field.type,
	                            };
	                        }
	                        else {
	                            return {
	                                value: _timeConverter((_b = (_a = field.filter) === null || _a === void 0 ? void 0 : _a.condition) === null || _b === void 0 ? void 0 : _b.visualType, v, dateFormat),
	                                valueType: field.type,
	                            };
	                        }
	                    })
	                        .filter(Boolean);
	                }
	                if (((_d = (_c = field === null || field === void 0 ? void 0 : field.filter) === null || _c === void 0 ? void 0 : _c.condition) === null || _d === void 0 ? void 0 : _d.type) === FilterConditionType.RecommendTime) {
	                    var timeRange = recommendTimeRangeConverter(conditionValue, dateFormat);
	                    return timeRange.map(function (t) { return ({
	                        value: t,
	                        valueType: field.type,
	                    }); });
	                }
	                return [
	                    {
	                        value: _timeConverter((_f = (_e = field.filter) === null || _e === void 0 ? void 0 : _e.condition) === null || _f === void 0 ? void 0 : _f.visualType, conditionValue, dateFormat),
	                        valueType: field.type,
	                    },
	                ];
	            };
	            var filters = fields
	                .map(function (field) {
	                var _a, _b, _c, _d, _e, _f;
	                if (((_b = (_a = field.filter) === null || _a === void 0 ? void 0 : _a.condition) === null || _b === void 0 ? void 0 : _b.operator) === FilterSqlOperator.In ||
	                    ((_d = (_c = field.filter) === null || _c === void 0 ? void 0 : _c.condition) === null || _d === void 0 ? void 0 : _d.operator) === FilterSqlOperator.NotIn) {
	                    if (isEmptyArray(_transformFieldValues(field))) {
	                        return null;
	                    }
	                }
	                return {
	                    aggOperator: field.aggregate === AggregateFieldActionType.None
	                        ? null
	                        : field.aggregate,
	                    column: _this.buildColumnName(field),
	                    sqlOperator: (_f = (_e = field.filter) === null || _e === void 0 ? void 0 : _e.condition) === null || _f === void 0 ? void 0 : _f.operator,
	                    values: _transformFieldValues(field) || [],
	                };
	            })
	                .filter(Boolean);
	            return splitRangerDateFilters(filters);
	        };
	        this.dataView = dataView;
	        this.chartDataConfigs = dataConfigs || [];
	        this.chartSettingConfigs = settingConfigs || [];
	        this.pageInfo = pageInfo || {};
	        this.script = script || false;
	        this.aggregation = aggregation;
	    }
	    ChartDataRequestBuilder.prototype.addExtraSorters = function (sorters) {
	        if (sorters === void 0) { sorters = []; }
	        if (!isEmptyArray(sorters)) {
	            this.extraSorters = this.extraSorters.concat(sorters);
	        }
	        return this;
	    };
	    ChartDataRequestBuilder.prototype.addDrillOption = function (drillOption) {
	        this.drillOption = drillOption;
	        return this;
	    };
	    ChartDataRequestBuilder.prototype.addRuntimeFilters = function (filters) {
	        var _this = this;
	        if (filters === void 0) { filters = []; }
	        if (!isEmptyArray(filters)) {
	            this.extraRuntimeFilters = filters.map(function (v) {
	                return _assign(_assign({}, v), { column: _this.buildColumnName({ v: v, colName: v.column }) });
	            });
	        }
	        return this;
	    };
	    ChartDataRequestBuilder.prototype.addVariableParams = function (params) {
	        if (params) {
	            this.variableParams = params;
	        }
	        return this;
	    };
	    ChartDataRequestBuilder.prototype.buildAggregators = function () {
	        var _this = this;
	        if (this.aggregation === false) {
	            return [];
	        }
	        var aggColumns = this.chartDataConfigs.reduce(function (acc, cur) {
	            var _a;
	            if (!cur.rows) {
	                return acc;
	            }
	            if (cur.type === ChartDataSectionType.Aggregate ||
	                cur.type === ChartDataSectionType.Size ||
	                cur.type === ChartDataSectionType.Info) {
	                return acc.concat(cur.rows);
	            }
	            if (cur.type === ChartDataSectionType.Mixed &&
	                ((_a = cur.rows) === null || _a === void 0 ? void 0 : _a.findIndex(function (v) { return v.type === DataViewFieldType.NUMERIC; })) !== -1) {
	                return acc.concat(cur.rows.filter(function (v) { return v.type === DataViewFieldType.NUMERIC; }));
	            }
	            return acc;
	        }, []);
	        var columns = UniqWith(aggColumns.map(function (aggCol) { return ({
	            alias: _this.buildAliasName(aggCol),
	            column: _this.buildColumnName(aggCol),
	            sqlOperator: aggCol.aggregate,
	            calc: aggCol.calc,
	        }); }), function (a, b) {
	            return isEqualObject(a.column, b.column) &&
	                a.sqlOperator === b.sqlOperator &&
	                isEqualObject(a.calc, b.calc);
	        });
	        return columns;
	    };
	    ChartDataRequestBuilder.prototype.buildAliasName = function (c) {
	        if (c.aggregate === AggregateFieldActionType.None) {
	            return c.colName;
	        }
	        if (c.aggregate) {
	            if (!c.calc) {
	                return "".concat(c.aggregate, "(").concat(c.colName, ")");
	            }
	            else {
	                return "".concat(c.aggregate, "(").concat(c.colName, ")-").concat(c.calc.key);
	            }
	        }
	        return c.colName;
	    };
	    ChartDataRequestBuilder.prototype.buildColumnName = function (col) {
	        var row = findPathByNameInMeta(this.dataView.meta, col.colName);
	        if (row) {
	            return (row === null || row === void 0 ? void 0 : row.path) || [];
	        }
	        else {
	            return [col.colName];
	        }
	    };
	    ChartDataRequestBuilder.prototype.buildGroups = function () {
	        var _this = this;
	        /**
	         * If aggregation is off, do not add values to gruop
	         */
	        if (this.aggregation === false) {
	            return [];
	        }
	        var groupColumns = this.chartDataConfigs.reduce(function (acc, cur) {
	            var _a;
	            if (isEmptyArray(cur.rows)) {
	                return acc;
	            }
	            if (cur.type === ChartDataSectionType.Color) {
	                return acc.concat(cur.rows || []);
	            }
	            if (cur.type === ChartDataSectionType.Group) {
	                var rows = getRuntimeDateLevelFields(cur.rows);
	                if (cur.drillable) {
	                    if (_this.isInValidDrillOption()) {
	                        return acc.concat((rows === null || rows === void 0 ? void 0 : rows[0]) || []);
	                    }
	                    return acc.concat((rows === null || rows === void 0 ? void 0 : rows.filter(function (field) {
	                        var _a, _b;
	                        return Boolean((_b = (_a = _this.drillOption) === null || _a === void 0 ? void 0 : _a.getCurrentFields()) === null || _b === void 0 ? void 0 : _b.some(function (df) { return df.uid === field.uid; }));
	                    })) || []);
	                }
	                return acc.concat(rows || []);
	            }
	            if (cur.type === ChartDataSectionType.Mixed) {
	                var dateAndStringFields = (_a = cur.rows) === null || _a === void 0 ? void 0 : _a.filter(function (v) {
	                    return [DataViewFieldType.DATE, DataViewFieldType.STRING].includes(v.type);
	                });
	                //zh: 判断数据中是否含有 DATE 和 STRING 类型 en: Determine whether the data contains DATE and STRING types
	                return acc.concat(dateAndStringFields || []);
	            }
	            return acc;
	        }, []);
	        var newGroupColumns = groupColumns.map(function (groupCol) { return ({
	            alias: _this.buildAliasName(groupCol),
	            column: _this.buildColumnName(groupCol),
	        }); });
	        return UniqWith(newGroupColumns, function (a, b) {
	            return isEqualObject(a.column, b.column);
	        });
	    };
	    ChartDataRequestBuilder.prototype.buildFilters = function () {
	        var fields = this.chartDataConfigs
	            .reduce(function (acc, cur) {
	            if (!cur.rows || cur.type !== ChartDataSectionType.Filter) {
	                return acc;
	            }
	            return acc.concat(cur.rows);
	        }, [])
	            .filter(function (col) { var _a; return Boolean((_a = col.filter) === null || _a === void 0 ? void 0 : _a.condition); })
	            .filter(function (col) {
	            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
	            if (((_b = (_a = col.filter) === null || _a === void 0 ? void 0 : _a.condition) === null || _b === void 0 ? void 0 : _b.operator) === FilterSqlOperator.Null ||
	                ((_d = (_c = col.filter) === null || _c === void 0 ? void 0 : _c.condition) === null || _d === void 0 ? void 0 : _d.operator) === FilterSqlOperator.NotNull) {
	                return true;
	            }
	            else if (Array.isArray((_f = (_e = col.filter) === null || _e === void 0 ? void 0 : _e.condition) === null || _f === void 0 ? void 0 : _f.value)) {
	                return Boolean((_j = (_h = (_g = col.filter) === null || _g === void 0 ? void 0 : _g.condition) === null || _h === void 0 ? void 0 : _h.value) === null || _j === void 0 ? void 0 : _j.length);
	            }
	            else if ([
	                FilterSqlOperator.Contain,
	                FilterSqlOperator.NotContain,
	                FilterSqlOperator.Equal,
	                FilterSqlOperator.NotEqual,
	                FilterSqlOperator.In,
	                FilterSqlOperator.NotIn,
	                FilterSqlOperator.PrefixContain,
	                FilterSqlOperator.NotPrefixContain,
	                FilterSqlOperator.SuffixContain,
	                FilterSqlOperator.NotSuffixContain,
	            ].includes((_l = (_k = col.filter) === null || _k === void 0 ? void 0 : _k.condition) === null || _l === void 0 ? void 0 : _l.operator)) {
	                return !isEmptyString((_o = (_m = col.filter) === null || _m === void 0 ? void 0 : _m.condition) === null || _o === void 0 ? void 0 : _o.value);
	            }
	            else {
	                return true;
	            }
	        })
	            .map(function (col) { return col; });
	        return this.normalizeFilters(fields)
	            .concat(this.normalizeDrillFilters())
	            .concat(this.normalizeRuntimeFilters());
	    };
	    ChartDataRequestBuilder.prototype.normalizeDrillFilters = function () {
	        var _this = this;
	        var _a;
	        return (((_a = this.drillOption) === null || _a === void 0 ? void 0 : _a.getAllDrillDownFields().filter(function (field) { return Boolean(field.condition); }).map(function (f) {
	            var _a, _b, _c;
	            return {
	                aggOperator: null,
	                column: _this.buildColumnName({ colName: (_a = f.condition) === null || _a === void 0 ? void 0 : _a.name }),
	                sqlOperator: (_b = f.condition) === null || _b === void 0 ? void 0 : _b.operator,
	                values: [
	                    { value: (_c = f.condition) === null || _c === void 0 ? void 0 : _c.value, valueType: 'STRING' },
	                ],
	            };
	        })) || []);
	    };
	    ChartDataRequestBuilder.prototype.normalizeRuntimeFilters = function () {
	        var _this = this;
	        return (this.chartDataConfigs || [])
	            .filter(function (c) { return c.type === ChartDataSectionType.Filter; })
	            .flatMap(function (c) {
	            return c[RUNTIME_FILTER_KEY] || [];
	        })
	            .map(function (v) {
	            return _assign(_assign({}, v), { column: _this.buildColumnName({ colName: v.column }) });
	        })
	            .concat(this.extraRuntimeFilters);
	    };
	    ChartDataRequestBuilder.prototype.buildOrders = function () {
	        var _this = this;
	        var _a;
	        var sortColumns = this.chartDataConfigs
	            .reduce(function (acc, cur) {
	            var _a;
	            if (!cur.rows) {
	                return acc;
	            }
	            if (cur.type === ChartDataSectionType.Aggregate ||
	                cur.type === ChartDataSectionType.Mixed) {
	                return acc.concat(cur.rows);
	            }
	            if (cur.type === ChartDataSectionType.Group) {
	                var rows = getRuntimeDateLevelFields(cur.rows);
	                if (cur.drillable) {
	                    if (_this.isInValidDrillOption()) {
	                        return acc.concat(((_a = cur.rows) === null || _a === void 0 ? void 0 : _a[0]) || []);
	                    }
	                    return acc.concat((rows === null || rows === void 0 ? void 0 : rows.filter(function (field) {
	                        var _a, _b;
	                        return Boolean((_b = (_a = _this.drillOption) === null || _a === void 0 ? void 0 : _a.getCurrentFields()) === null || _b === void 0 ? void 0 : _b.some(function (df) { return df.uid === field.uid; }));
	                    })) || []);
	                }
	                return acc.concat(rows || []);
	            }
	            return acc;
	        }, [])
	            .filter(function (col) {
	            var _a, _b;
	            return ((_a = col === null || col === void 0 ? void 0 : col.sort) === null || _a === void 0 ? void 0 : _a.type) &&
	                [SortActionType.ASC, SortActionType.DESC].includes((_b = col === null || col === void 0 ? void 0 : col.sort) === null || _b === void 0 ? void 0 : _b.type);
	        });
	        var originalSorters = sortColumns.map(function (aggCol) {
	            var _a;
	            return ({
	                column: _this.buildColumnName(aggCol),
	                operator: (_a = aggCol.sort) === null || _a === void 0 ? void 0 : _a.type,
	                aggOperator: aggCol.aggregate,
	            });
	        });
	        var _extraSorters = (_a = this.extraSorters) === null || _a === void 0 ? void 0 : _a.filter(function (_a) {
	            var column = _a.column, operator = _a.operator;
	            return column && operator;
	        }).map(function (v) {
	            return _assign(_assign({}, v), { column: _this.buildColumnName({ colName: v.column }) });
	        });
	        if (!isEmptyArray(_extraSorters)) {
	            return _extraSorters;
	        }
	        return originalSorters.filter(function (sorter) { return Boolean(sorter === null || sorter === void 0 ? void 0 : sorter.operator); });
	    };
	    ChartDataRequestBuilder.prototype.buildPageInfo = function () {
	        var _a;
	        var settingStyles = this.chartSettingConfigs;
	        var pageSize = getValue(settingStyles, ['paging', 'pageSize']);
	        var enablePaging = getValue(settingStyles, ['paging', 'enablePaging']);
	        return {
	            countTotal: !!enablePaging,
	            pageNo: (_a = this.pageInfo) === null || _a === void 0 ? void 0 : _a.pageNo,
	            pageSize: pageSize || 1000,
	        };
	    };
	    ChartDataRequestBuilder.prototype.buildFunctionColumns = function () {
	        var computedFields = getRuntimeDateLevelFields(this.dataView.computedFields);
	        var fieldsNameList = (this.chartDataConfigs || [])
	            .flatMap(function (config) { return getRuntimeDateLevelFields(config.rows) || []; })
	            .flatMap(function (row) { return (row === null || row === void 0 ? void 0 : row.colName) || []; });
	        var currentUsedComputedFields = computedFields === null || computedFields === void 0 ? void 0 : computedFields.filter(function (v) {
	            return fieldsNameList.includes(v.name);
	        });
	        return (currentUsedComputedFields || []).map(function (f) { return ({
	            alias: f.name,
	            snippet: f.expression,
	        }); });
	    };
	    ChartDataRequestBuilder.prototype.buildSelectColumns = function () {
	        var _this = this;
	        var selectColumns = this.chartDataConfigs.reduce(function (acc, cur) {
	            var _a, _b;
	            if (!cur.rows) {
	                return acc;
	            }
	            if (_this.aggregation === false) {
	                if (cur.type === ChartDataSectionType.Color ||
	                    cur.type === ChartDataSectionType.Aggregate ||
	                    cur.type === ChartDataSectionType.Size ||
	                    cur.type === ChartDataSectionType.Info ||
	                    cur.type === ChartDataSectionType.Mixed) {
	                    return acc.concat(cur.rows);
	                }
	                else if (cur.type === ChartDataSectionType.Group) {
	                    if (cur.drillable) {
	                        if (_this.isInValidDrillOption()) {
	                            return acc.concat(((_a = cur.rows) === null || _a === void 0 ? void 0 : _a[0]) || []);
	                        }
	                        return acc.concat(((_b = cur.rows) === null || _b === void 0 ? void 0 : _b.filter(function (field) {
	                            var _a, _b;
	                            return Boolean((_b = (_a = _this.drillOption) === null || _a === void 0 ? void 0 : _a.getCurrentFields()) === null || _b === void 0 ? void 0 : _b.some(function (df) { return df.uid === field.uid; }));
	                        })) || []);
	                    }
	                    else {
	                        return acc.concat(cur.rows);
	                    }
	                }
	            }
	            return acc;
	        }, []);
	        return selectColumns.map(function (col) {
	            return {
	                alias: _this.buildAliasName(col),
	                column: _this.buildColumnName(col),
	            };
	        });
	    };
	    ChartDataRequestBuilder.prototype.buildDetailColumns = function () {
	        var _this = this;
	        var _a, _b;
	        var selectColumns = this.chartDataConfigs.reduce(function (acc, cur) {
	            var _a, _b;
	            if (!cur.rows) {
	                return acc;
	            }
	            if (cur.drillable) {
	                if (_this.isInValidDrillOption()) {
	                    return acc.concat(((_a = cur.rows) === null || _a === void 0 ? void 0 : _a[0]) || []);
	                }
	                return acc.concat(((_b = cur.rows) === null || _b === void 0 ? void 0 : _b.filter(function (field) {
	                    var _a, _b;
	                    return Boolean((_b = (_a = _this.drillOption) === null || _a === void 0 ? void 0 : _a.getCurrentFields()) === null || _b === void 0 ? void 0 : _b.some(function (df) { return df.uid === field.uid; }));
	                })) || []);
	            }
	            else {
	                return acc.concat(cur.rows);
	            }
	        }, []);
	        return (_b = (_a = selectColumns === null || selectColumns === void 0 ? void 0 : selectColumns.filter(function (c) { return c.category !== ChartDataViewFieldCategory.AggregateComputedField; })) === null || _a === void 0 ? void 0 : _a.reduce(function (acc, cur) {
	            if (acc.find(function (x) { return (x === null || x === void 0 ? void 0 : x.colName) === cur.colName; })) {
	                return acc;
	            }
	            return acc.concat(cur);
	        }, [])) === null || _b === void 0 ? void 0 : _b.map(function (col) {
	            return {
	                alias: _this.buildAliasName(col),
	                column: _this.buildColumnName(col),
	            };
	        });
	    };
	    ChartDataRequestBuilder.prototype.buildViewConfigs = function () {
	        var _a;
	        return transformToViewConfig((_a = this.dataView) === null || _a === void 0 ? void 0 : _a.config);
	    };
	    ChartDataRequestBuilder.prototype.isInValidDrillOption = function () {
	        var _a, _b;
	        return (!this.drillOption ||
	            ((_a = this.drillOption) === null || _a === void 0 ? void 0 : _a.mode) === DrillMode.Normal ||
	            !((_b = this.drillOption) === null || _b === void 0 ? void 0 : _b.getCurrentFields()));
	    };
	    ChartDataRequestBuilder.prototype.removeInvalidFilter = function (filters) {
	        var _a, _b;
	        var dataViewFieldsNames = getAllColumnInMeta((_a = this.dataView) === null || _a === void 0 ? void 0 : _a.meta)
	            .concat(((_b = this.dataView) === null || _b === void 0 ? void 0 : _b.computedFields) || [])
	            .map(function (c) { return c === null || c === void 0 ? void 0 : c.name; });
	        return (filters || []).filter(function (f) {
	            return dataViewFieldsNames.includes(f.column.join('.'));
	        });
	    };
	    ChartDataRequestBuilder.prototype.build = function () {
	        var _a;
	        var validFilters = this.removeInvalidFilter(this.buildFilters());
	        return _assign(_assign({}, this.buildViewConfigs()), { viewId: (_a = this.dataView) === null || _a === void 0 ? void 0 : _a.id, aggregators: this.buildAggregators(), groups: this.buildGroups(), filters: validFilters, orders: this.buildOrders(), pageInfo: this.buildPageInfo(), functionColumns: this.buildFunctionColumns(), columns: this.buildSelectColumns(), script: this.script, params: this.variableParams });
	    };
	    ChartDataRequestBuilder.prototype.buildDetails = function () {
	        var _a;
	        var validFilters = this.removeInvalidFilter(this.buildFilters().filter(function (f) { return !f.aggOperator; }));
	        return _assign(_assign({}, this.buildViewConfigs()), { viewId: (_a = this.dataView) === null || _a === void 0 ? void 0 : _a.id, aggregators: [], groups: [], filters: validFilters, orders: [], pageInfo: this.buildPageInfo(), functionColumns: this.buildFunctionColumns(), columns: this.buildDetailColumns(), script: this.script, params: this.variableParams });
	    };
	    ChartDataRequestBuilder.prototype.getColNameStringFilter = function () {
	        var _this = this;
	        return this.buildFilters().map(function (v) {
	            var _a;
	            var row = (_a = getAllColumnInMeta(_this.dataView.meta)) === null || _a === void 0 ? void 0 : _a.find(function (val) {
	                return isEqualObject(val.path, v.column);
	            });
	            return _assign(_assign({}, v), { column: (row === null || row === void 0 ? void 0 : row.name) || '' });
	        });
	    };
	    return ChartDataRequestBuilder;
	}());

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var SemVerRegex = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/gm;
	function getSemVer(version) {
	    return new RegExp(SemVerRegex).exec(version);
	}
	var versionCanDo = function (curVersion, testVersion) {
	    var testVersionIndex = APP_SEMANTIC_VERSIONS.indexOf(testVersion || '');
	    if (testVersionIndex === -1)
	        return true;
	    var curVersionIndex = APP_SEMANTIC_VERSIONS.indexOf(curVersion);
	    return curVersionIndex > testVersionIndex;
	};
	var setLatestVersion = function (config) {
	    if (!versionCanDo(APP_CURRENT_VERSION, config.version))
	        return config;
	    if (config.version === APP_CURRENT_VERSION)
	        return config;
	    config.version = APP_CURRENT_VERSION;
	    return config;
	};

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Semantic Version Model
	 * https://semver.org/lang/zh-CN/
	 * @export
	 * @class SemVer
	 */
	var SemVer = /** @class */ (function () {
	    function SemVer(version) {
	        var _a, _b, _c, _d, _e;
	        this._versionStr = version;
	        this._semverObj = getSemVer(this._versionStr);
	        this.major = (_a = this._semverObj) === null || _a === void 0 ? void 0 : _a[1];
	        this.minor = (_b = this._semverObj) === null || _b === void 0 ? void 0 : _b[2];
	        this.patch = (_c = this._semverObj) === null || _c === void 0 ? void 0 : _c[3];
	        this.preRelease = (_d = this._semverObj) === null || _d === void 0 ? void 0 : _d[4];
	        this.buildMetaData = (_e = this._semverObj) === null || _e === void 0 ? void 0 : _e[5];
	    }
	    return SemVer;
	}());

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Migration Event
	 * @class MigrationTaskEvent
	 * @template TDomainModel
	 */
	var MigrationEvent = /** @class */ (function () {
	    function MigrationEvent(version, task) {
	        this.version = APP_VERSION_INIT;
	        this.version = version;
	        this.semver = new SemVer(this.version);
	        this.task = task;
	    }
	    MigrationEvent.prototype.run = function (model) {
	        if (!this.task) {
	            throw new Error('Please register migration task function first!');
	        }
	        try {
	            var result = this.task.call(Object.create(null), model);
	            if (result) {
	                // auto update version when on error occur
	                result.version = this.version;
	            }
	            return result;
	        }
	        catch (error) {
	            ////console.log('%c Datart Migration Error | Version: %s | Please Contract Administrator! ', 'background: red; color: #fafafa', this.version);
	            ////console.log('Migration Event Error | Stack Trace: %o', error);
	            throw error;
	        }
	    };
	    return MigrationEvent;
	}());

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Migration Event Dispatcher
	 * [Event Sourcing](https://martinfowler.com/eaaDev/EventSourcing.html)
	 * @class EventDispatcher
	 * @template TDomainModel
	 */
	var MigrationEventDispatcher = /** @class */ (function () {
	    function MigrationEventDispatcher() {
	        var events = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            events[_i] = arguments[_i];
	        }
	        this.domainEvents = [];
	        this.domainEvents = events;
	    }
	    MigrationEventDispatcher.prototype.process = function (model, drawback) {
	        var _this = this;
	        var drawbackModel = drawback || CloneValueDeep(model);
	        try {
	            return this.domainEvents.reduce(function (acc, event) {
	                if (_this.shouldDoEventSourcing(acc.version, event.version)) {
	                    return event.run(acc) || acc;
	                }
	                return acc;
	            }, model);
	        }
	        catch (_a) {
	            return drawbackModel;
	        }
	    };
	    MigrationEventDispatcher.prototype.shouldDoEventSourcing = function (modelVersion, eventVersion) {
	        var modelVerIndex = APP_SEMANTIC_VERSIONS.findIndex(function (v) { return v === modelVersion; });
	        var currentEventVerIndex = APP_SEMANTIC_VERSIONS.findIndex(function (v) { return v === eventVersion; });
	        if (currentEventVerIndex === 0) {
	            return modelVerIndex < currentEventVerIndex;
	        }
	        else if (currentEventVerIndex > 0) {
	            var domainEventIndex = this.domainEvents.findIndex(function (dEvent) { return dEvent.version === eventVersion; });
	            if (domainEventIndex <= 0) {
	                return modelVerIndex < currentEventVerIndex;
	            }
	            else {
	                var prevDomainEventIndex = domainEventIndex - 1;
	                var prevEventVersion_1 = this.domainEvents[prevDomainEventIndex].version;
	                var prevEventVerIndex = APP_SEMANTIC_VERSIONS.findIndex(function (v) { return v === prevEventVersion_1; });
	                return (prevEventVerIndex <= modelVerIndex &&
	                    modelVerIndex < currentEventVerIndex);
	            }
	        }
	        return false;
	    };
	    return MigrationEventDispatcher;
	}());

	var RC0$1 = function (config) {
	    if (!config) {
	        return config;
	    }
	    try {
	        if (config === null || config === void 0 ? void 0 : config.computedFields) {
	            config.computedFields = config.computedFields.map(function (v) {
	                if (!v.name) {
	                    return _assign(_assign({}, v), { name: v.id });
	                }
	                return v;
	            });
	        }
	        return config;
	    }
	    catch (error) {
	        console.error('Migration config Errors | RC.0 | ', error);
	        return config;
	    }
	};
	var RC2 = function (config) {
	    var _a, _b;
	    if (!config) {
	        return config;
	    }
	    try {
	        if (config === null || config === void 0 ? void 0 : config.chartConfig) {
	            (_a = config.chartConfig) === null || _a === void 0 ? void 0 : _a.datas.forEach(function (data) {
	                var _a;
	                (_a = data.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                    var _a, _b;
	                    if (row.category ===
	                        ChartDataViewFieldCategory.DateLevelComputedField &&
	                        !row.colName.includes(DATE_LEVEL_DELIMITER)) {
	                        var field = row.field || ((_b = (_a = row.id) === null || _a === void 0 ? void 0 : _a.split('（')) === null || _b === void 0 ? void 0 : _b[0]);
	                        row.colName =
	                            field + DATE_LEVEL_DELIMITER + row.expression.split('(')[0];
	                    }
	                });
	            });
	        }
	        if (config === null || config === void 0 ? void 0 : config.computedFields) {
	            var allRows_1 = (_b = config.chartConfig) === null || _b === void 0 ? void 0 : _b.datas.flatMap(function (v) { return v.rows || []; });
	            config.computedFields = config.computedFields.map(function (computedField) {
	                var _a, _b;
	                if (computedField.category ===
	                    ChartDataViewFieldCategory.DateLevelComputedField &&
	                    !computedField.name.includes(DATE_LEVEL_DELIMITER)) {
	                    var currenrRowFiledForComputed = allRows_1.find(function (row) { return row.expression === computedField.expression; });
	                    var field = (currenrRowFiledForComputed === null || currenrRowFiledForComputed === void 0 ? void 0 : currenrRowFiledForComputed.field) ||
	                        ((_b = (_a = currenrRowFiledForComputed === null || currenrRowFiledForComputed === void 0 ? void 0 : currenrRowFiledForComputed.id) === null || _a === void 0 ? void 0 : _a.split('（')) === null || _b === void 0 ? void 0 : _b[0]);
	                    return _assign(_assign({}, computedField), { name: field +
	                            DATE_LEVEL_DELIMITER +
	                            computedField.expression.split('(')[0] });
	                }
	                return computedField;
	            });
	        }
	        return config;
	    }
	    catch (error) {
	        console.error('Migration config Errors | RC.2 | ', error);
	        return config;
	    }
	};
	var migrationChartConfig = function (config) {
	    if (!config) {
	        return config;
	    }
	    var chartConfig = JSON.parse(config);
	    var event = new MigrationEvent(APP_VERSION_RC_0, RC0$1);
	    var event2 = new MigrationEvent(APP_VERSION_RC_2, RC2);
	    var dispatcher = new MigrationEventDispatcher(event, event2);
	    var result = dispatcher.process(chartConfig);
	    return JSON.stringify(result);
	};
	var migrateChartConfig = migrationChartConfig;

	var beta4$3 = function (view) {
	    if (!view) {
	        return view;
	    }
	    try {
	        if (!view.type) {
	            view.type = 'SQL';
	        }
	        return view;
	    }
	    catch (error) {
	        console.error('Migration view Errors | beta.4 | ', error);
	        return view;
	    }
	};
	var migrationViewConfig = function (view) {
	    if (!view) {
	        return view;
	    }
	    var event2 = new MigrationEvent(APP_VERSION_BETA_4, beta4$3);
	    var dispatcher = new MigrationEventDispatcher(event2);
	    var result = dispatcher.process(view);
	    return result;
	};
	var migrationViewConfig$1 = migrationViewConfig;

	var jsxRuntime = {exports: {}};

	var reactJsxRuntime_production_min = {};

	/**
	 * @license React
	 * react-jsx-runtime.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var f = reactExports,
	  k = Symbol["for"]("react.element"),
	  l = Symbol["for"]("react.fragment"),
	  m = Object.prototype.hasOwnProperty,
	  n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
	  p = {
	    key: !0,
	    ref: !0,
	    __self: !0,
	    __source: !0
	  };
	function q(c, a, g) {
	  var b,
	    d = {},
	    e = null,
	    h = null;
	  void 0 !== g && (e = "" + g);
	  void 0 !== a.key && (e = "" + a.key);
	  void 0 !== a.ref && (h = a.ref);
	  for (b in a) m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
	  if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
	  return {
	    $$typeof: k,
	    type: c,
	    key: e,
	    ref: h,
	    props: d,
	    _owner: n.current
	  };
	}
	reactJsxRuntime_production_min.Fragment = l;
	reactJsxRuntime_production_min.jsx = q;
	reactJsxRuntime_production_min.jsxs = q;

	{
	  jsxRuntime.exports = reactJsxRuntime_production_min;
	}
	var jsxRuntimeExports = jsxRuntime.exports;
	getDefaultExportFromCjs(jsxRuntimeExports);

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var ColumnCategories;
	(function (ColumnCategories) {
	    ColumnCategories["UnCategorized"] = "UNCATEGORIZED";
	    ColumnCategories["Country"] = "COUNTRY";
	    ColumnCategories["ProvinceOrState"] = "PROVINCEORSTATE";
	    ColumnCategories["City"] = "CITY";
	    ColumnCategories["County"] = "COUNTY";
	    ColumnCategories["Lng"] = "LNG";
	    ColumnCategories["Lat"] = "LAT";
	})(ColumnCategories || (ColumnCategories = {}));
	var ViewViewModelStages;
	(function (ViewViewModelStages) {
	    ViewViewModelStages[ViewViewModelStages["NotLoaded"] = -1] = "NotLoaded";
	    ViewViewModelStages[ViewViewModelStages["Loading"] = 0] = "Loading";
	    ViewViewModelStages[ViewViewModelStages["Fresh"] = 1] = "Fresh";
	    ViewViewModelStages[ViewViewModelStages["Initialized"] = 2] = "Initialized";
	    ViewViewModelStages[ViewViewModelStages["Running"] = 3] = "Running";
	    ViewViewModelStages[ViewViewModelStages["Saveable"] = 4] = "Saveable";
	    ViewViewModelStages[ViewViewModelStages["Saving"] = 5] = "Saving";
	    ViewViewModelStages[ViewViewModelStages["Saved"] = 6] = "Saved";
	})(ViewViewModelStages || (ViewViewModelStages = {}));
	var ViewStatus;
	(function (ViewStatus) {
	    ViewStatus[ViewStatus["Archived"] = 0] = "Archived";
	    ViewStatus[ViewStatus["Active"] = 1] = "Active";
	})(ViewStatus || (ViewStatus = {}));
	var ConcurrencyControlModes;
	(function (ConcurrencyControlModes) {
	    ConcurrencyControlModes["DirtyRead"] = "DIRTYREAD";
	    ConcurrencyControlModes["FastFailOver"] = "FASTFAILOVER";
	})(ConcurrencyControlModes || (ConcurrencyControlModes = {}));
	var StructViewJoinType;
	(function (StructViewJoinType) {
	    StructViewJoinType["RightJoin"] = "RIGHT";
	    StructViewJoinType["LeftJoin"] = "LEFT";
	    StructViewJoinType["InnerJoin"] = "INNER";
	})(StructViewJoinType || (StructViewJoinType = {}));

	function addPathToHierarchyStructureAndChangeName(hierarchy, viewType) {
	    if (!hierarchy) {
	        return hierarchy;
	    }
	    var _hierarchy = Object.keys(hierarchy).reduce(function (acc, name) {
	        acc[name] = hierarchy[name];
	        if (acc[name].children) {
	            acc[name].children.forEach(function (children, i) {
	                if (!children['path']) {
	                    acc[name].children[i]['path'] = Array.isArray(children.name)
	                        ? children.name
	                        : viewType === 'STRUCT'
	                            ? children.name && JSON.parse(children.name)
	                            : [children.name];
	                    acc[name].children[i]['name'] =
	                        viewType === 'STRUCT'
	                            ? children.name && JSON.parse(children.name).join('.')
	                            : children.name;
	                }
	            });
	        }
	        else if (!acc[name]['path']) {
	            acc[name]['path'] = Array.isArray(acc[name]['name'])
	                ? acc[name]['name']
	                : viewType === 'STRUCT'
	                    ? acc[name]['name'] && JSON.parse(acc[name]['name'])
	                    : [name];
	            acc[name]['name'] = name;
	        }
	        return acc;
	    }, {});
	    return _hierarchy;
	}

	/**
	 * Migrate @see View config in beta.2 version
	 * Changes:
	 * - migrate model to ...
	 * - ....
	 *
	 * @param {object} [model]
	 * @return {*}  {(object | undefined)}
	 */
	var beta2$2 = function (model) {
	    var clonedModel = CloneValueDeep(model) || {};
	    if (model) {
	        Object.keys(clonedModel).forEach(function (name) {
	            clonedModel[name] = _assign(_assign({}, clonedModel[name]), { name: name });
	        });
	        model = {
	            hierarchy: clonedModel,
	            columns: clonedModel,
	        };
	    }
	    return model;
	};
	var beta4$2 = function (view) {
	    var viewType = view.viewType, result = view.result;
	    try {
	        result.hierarchy = addPathToHierarchyStructureAndChangeName(result.hierarchy, viewType);
	        return result;
	    }
	    catch (error) {
	        console.error('Migration view Errors | beta.4 | ', error);
	        return result;
	    }
	};
	/**
	 * main entry point of migration
	 *
	 * @param {string} model
	 * @return {string}
	 */
	var beginViewModelMigration = function (model, viewType) {
	    if (!(model === null || model === void 0 ? void 0 : model.trim().length)) {
	        return model;
	    }
	    var modelObj = JSON.parse(model);
	    var event2 = new MigrationEvent(APP_VERSION_BETA_2, beta2$2);
	    var event4 = new MigrationEvent(APP_VERSION_BETA_4, beta4$2);
	    var dispatcher2 = new MigrationEventDispatcher(event2);
	    var result2 = dispatcher2.process(modelObj);
	    var dispatcher4 = new MigrationEventDispatcher(event4);
	    var result4 = dispatcher4.process({
	        result: result2,
	        viewType: viewType,
	    });
	    return JSON.stringify(result4);
	};
	var beginViewModelMigration$1 = beginViewModelMigration;

	function convertToChartDto(data) {
	    var _a, _b, _c;
	    if (data === null || data === void 0 ? void 0 : data.view) {
	        data.view = migrationViewConfig$1(data.view);
	    }
	    if ((_a = data === null || data === void 0 ? void 0 : data.view) === null || _a === void 0 ? void 0 : _a.model) {
	        data.view.model = beginViewModelMigration$1(data.view.model, data.view.type);
	    }
	    data.config = migrateChartConfig(data === null || data === void 0 ? void 0 : data.config);
	    var config = JSON.parse((data === null || data === void 0 ? void 0 : data.config) || '{}');
	    var meta = transformHierarchyMeta((_b = data === null || data === void 0 ? void 0 : data.view) === null || _b === void 0 ? void 0 : _b.model);
	    config.computedFields = createDateLevelComputedFieldForConfigComputedFields(meta, mergeChartAndViewComputedField(config.computedFields, JSON.parse(((_c = data === null || data === void 0 ? void 0 : data.view) === null || _c === void 0 ? void 0 : _c.model) || '{}').computedFields));
	    return Object.assign({}, data, {
	        config: config,
	        view: _assign(_assign({}, Omit(data === null || data === void 0 ? void 0 : data.view, ['model'])), { meta: meta }),
	    });
	}
	function convertToChartConfigDTO(source) {
	    var _a, _b, _c, _d;
	    return {
	        datas: (_a = source === null || source === void 0 ? void 0 : source.chartConfig) === null || _a === void 0 ? void 0 : _a.datas,
	        styles: (_b = source === null || source === void 0 ? void 0 : source.chartConfig) === null || _b === void 0 ? void 0 : _b.styles,
	        settings: (_c = source === null || source === void 0 ? void 0 : source.chartConfig) === null || _c === void 0 ? void 0 : _c.settings,
	        interactions: (_d = source === null || source === void 0 ? void 0 : source.chartConfig) === null || _d === void 0 ? void 0 : _d.interactions,
	    };
	}

	var BoardDrillManager = /** @class */ (function () {
	    function BoardDrillManager() {
	        this.boardMap = {};
	    }
	    BoardDrillManager.getInstance = function () {
	        if (!this._manager) {
	            this._manager = new BoardDrillManager();
	        }
	        return this._manager;
	    };
	    BoardDrillManager.prototype.getWidgetDrill = function (obj) {
	        var _a, _b;
	        var bid = obj.bid, wid = obj.wid;
	        var widgetDrill = (_b = (_a = this.boardMap) === null || _a === void 0 ? void 0 : _a[bid]) === null || _b === void 0 ? void 0 : _b[wid];
	        return widgetDrill;
	    };
	    BoardDrillManager.prototype.setWidgetDrill = function (obj) {
	        var _a;
	        var _b, _c, _d;
	        var bid = obj.bid, wid = obj.wid, drillOption = obj.drillOption;
	        var boardMap = (_b = this.boardMap) === null || _b === void 0 ? void 0 : _b[bid];
	        if (!boardMap) {
	            this.boardMap[bid] = (_a = {}, _a[wid] = undefined, _a);
	        }
	        if (!drillOption) {
	            (_d = (_c = this.boardMap) === null || _c === void 0 ? void 0 : _c[bid]) === null || _d === void 0 ? true : delete _d[wid];
	            return;
	        }
	        this.boardMap[bid][wid] = drillOption;
	    };
	    BoardDrillManager.prototype.clearMapByBoardId = function (bid) {
	        delete this.boardMap[bid];
	    };
	    return BoardDrillManager;
	}());
	var boardDrillManager = BoardDrillManager.getInstance();

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var DateControllerTypes = [
	    ControllerFacadeTypes.RangeTime,
	    ControllerFacadeTypes.Time,
	];

	function baseClamp$1(number, lower, upper) {
	  if (number === number) {
	    if (upper !== undefined) {
	      number = number <= upper ? number : upper;
	    }
	    if (lower !== undefined) {
	      number = number >= lower ? number : lower;
	    }
	  }
	  return number;
	}
	var _baseClamp = baseClamp$1;
	getDefaultExportFromCjs(_baseClamp);

	var reWhitespace = /\s/;
	function trimmedEndIndex$1(string) {
	  var index = string.length;
	  while (index-- && reWhitespace.test(string.charAt(index))) {}
	  return index;
	}
	var _trimmedEndIndex = trimmedEndIndex$1;
	getDefaultExportFromCjs(_trimmedEndIndex);

	var trimmedEndIndex = _trimmedEndIndex;
	var reTrimStart = /^\s+/;
	function baseTrim$1(string) {
	  return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
	}
	var _baseTrim = baseTrim$1;
	getDefaultExportFromCjs(_baseTrim);

	var baseTrim = _baseTrim,
	  isObject = isObject_1,
	  isSymbol = isSymbol_1;
	var NAN = 0 / 0;
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
	var reIsBinary = /^0b[01]+$/i;
	var reIsOctal = /^0o[0-7]+$/i;
	var freeParseInt = parseInt;
	function toNumber$1(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? other + '' : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = baseTrim(value);
	  var isBinary = reIsBinary.test(value);
	  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
	}
	var toNumber_1 = toNumber$1;
	getDefaultExportFromCjs(toNumber_1);

	var toNumber = toNumber_1;
	var INFINITY = 1 / 0,
	  MAX_INTEGER = 1.7976931348623157e+308;
	function toFinite$1(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = value < 0 ? -1 : 1;
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}
	var toFinite_1 = toFinite$1;
	getDefaultExportFromCjs(toFinite_1);

	var toFinite = toFinite_1;
	function toInteger$1(value) {
	  var result = toFinite(value),
	    remainder = result % 1;
	  return result === result ? remainder ? result - remainder : result : 0;
	}
	var toInteger_1 = toInteger$1;
	getDefaultExportFromCjs(toInteger_1);

	var baseClamp = _baseClamp,
	  baseToString = _baseToString,
	  toInteger = toInteger_1,
	  toString = toString_1;
	function startsWith(string, target, position) {
	  string = toString(string);
	  position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
	  target = baseToString(target);
	  return string.slice(position, position + target.length) == target;
	}
	var startsWith_1 = startsWith;
	var startsWith$1 = getDefaultExportFromCjs(startsWith_1);

	var dateFormatObj = {
	    week: 'YYYY-WW',
	    year: 'YYYY',
	    month: 'YYYY-MM',
	    dateTime: TIME_FORMATTER,
	    date: DATE_FORMATTER,
	    quarter: 'YYYY-Q',
	};
	/**
	 * @description '为了server 复制board 副本，原有board资源文件 和新副本资源文件 脱离关系 不受影响'
	 * 将当前前端渲染环境 id 替换掉原有的id ，原来的和当前的相等不受影响
	 */
	var adaptBoardImageUrl = function (url, curBoardId) {
	    if (url === void 0) { url = ''; }
	    var splitter = BOARD_FILE_IMG_PREFIX;
	    if (!startsWith$1(url, splitter))
	        return url;
	    if (!curBoardId)
	        return url;
	    var originalBoardId = url.split(splitter)[1].split('/')[0];
	    var nextUrl = url.replace(originalBoardId, curBoardId);
	    return nextUrl;
	};
	var getDataChartRequestParams = function (obj) {
	    var _a;
	    var dataChart = obj.dataChart, view = obj.view, option = obj.option, drillOption = obj.drillOption, tempFilters = obj.tempFilters;
	    var migratedChartConfig = migrateChartConfig$1(CloneValueDeep(dataChart === null || dataChart === void 0 ? void 0 : dataChart.config));
	    var _b = convertToChartConfigDTO(migratedChartConfig), datas = _b.datas, settings = _b.settings;
	    var builder = new ChartDataRequestBuilder(_assign(_assign({}, view), { computedFields: dataChart.config.computedFields || [] }), datas, settings, {}, false, (_a = dataChart === null || dataChart === void 0 ? void 0 : dataChart.config) === null || _a === void 0 ? void 0 : _a.aggregation);
	    var requestParams = builder
	        .addExtraSorters((option === null || option === void 0 ? void 0 : option.sorters) || [])
	        .addDrillOption(drillOption)
	        .addRuntimeFilters(tempFilters || [])
	        .build();
	    return requestParams;
	};
	function getTheWidgetFiltersAndParams(obj) {
	    // TODO chart 本身携带了变量，board没有相关配置的时候要拿到 chart本身的 变量值 Params
	    var chartWidget = obj.chartWidget, widgetMap = obj.widgetMap, view = obj.view;
	    var controllerWidgets = Object.values(widgetMap).filter(function (widget) { return widget.config.type === 'controller'; });
	    var filterParams = [];
	    var variableParams = {};
	    controllerWidgets.forEach(function (filterWidget) {
	        var _a, _b;
	        var hasRelation = filterWidget.relations.find(function (re) { return re.targetId === chartWidget.id; });
	        if (!hasRelation)
	            return;
	        var content = filterWidget.config.content;
	        var relatedViews = content.relatedViews, controllerConfig = content.config, type = content.type;
	        var relatedViewItem = relatedViews
	            .filter(function (view) { return view.fieldValue; })
	            .find(function (view) { var _a; return view.viewId === ((_a = chartWidget === null || chartWidget === void 0 ? void 0 : chartWidget.viewIds) === null || _a === void 0 ? void 0 : _a[0]); });
	        if (!relatedViewItem)
	            return;
	        var values = getWidgetControlValues({
	            type: type,
	            relatedViewItem: relatedViewItem,
	            config: controllerConfig,
	        });
	        if (!values) {
	            return;
	        }
	        // 关联变量逻辑
	        if (relatedViewItem.relatedCategory === ChartDataViewFieldCategory.Variable) {
	            var curValues = values.map(function (item) { return String(item.value); });
	            // range类型 控制器关联两个变量的情况 relatedViewItem.fieldValue [string,string]
	            if (Array.isArray(relatedViewItem.fieldValue)) {
	                var key1 = String((_a = relatedViewItem.fieldValue) === null || _a === void 0 ? void 0 : _a[0]);
	                var key2 = String((_b = relatedViewItem.fieldValue) === null || _b === void 0 ? void 0 : _b[1]);
	                //
	                variableParams[key1] = [curValues === null || curValues === void 0 ? void 0 : curValues[0]];
	                variableParams[key2] = [curValues === null || curValues === void 0 ? void 0 : curValues[1]];
	            }
	            else {
	                var key = String(relatedViewItem.fieldValue);
	                //单个变量的取值逻辑 不限制为1个
	                variableParams[key] = curValues;
	            }
	        }
	        // 关联字段 逻辑
	        if (relatedViewItem.relatedCategory === ChartDataViewFieldCategory.Field) {
	            var path = view ? [] : '';
	            if (view) {
	                var row = findPathByNameInMeta(view === null || view === void 0 ? void 0 : view.meta, relatedViewItem.fieldValue);
	                path = (row === null || row === void 0 ? void 0 : row.path) || [];
	            }
	            else {
	                path = relatedViewItem.fieldValue;
	            }
	            var filter = {
	                aggOperator: null,
	                column: path,
	                sqlOperator: controllerConfig.sqlOperator,
	                values: values,
	            };
	            filterParams.push(filter);
	        }
	    });
	    // filter 去重
	    filterParams = getDistinctFiltersByColumn(filterParams);
	    var res = {
	        filterParams: filterParams,
	        variableParams: variableParams,
	    };
	    return res;
	}
	var getWidgetControlValues = function (opt) {
	    var _a;
	    var type = opt.type, relatedViewItem = opt.relatedViewItem, config = opt.config;
	    var valueType = relatedViewItem.fieldValueType;
	    if (DateControllerTypes.includes(type)) {
	        if (!(config === null || config === void 0 ? void 0 : config.controllerDate)) {
	            return false;
	        }
	        var timeValues = getControllerDateValues({
	            controlType: type,
	            filterDate: config.controllerDate,
	            execute: true,
	        });
	        var values = timeValues
	            .filter(function (ele) { return !!ele; })
	            .map(function (ele) {
	            var item = {
	                value: ele,
	                valueType: valueType || 'DATE',
	            };
	            return item;
	        });
	        return values[0] ? values : false;
	    }
	    else {
	        if (!((_a = config === null || config === void 0 ? void 0 : config.controllerValues) === null || _a === void 0 ? void 0 : _a[0])) {
	            return false;
	        }
	        var values = config.controllerValues
	            .filter(function (ele) {
	            if (typeof ele === 'number') {
	                return true;
	            }
	            if (typeof ele === 'string' && ele.trim() !== '') {
	                return true;
	            }
	            return false;
	        })
	            .map(function (ele) {
	            var item = {
	                value: typeof ele === 'string' ? ele.trim() : ele,
	                valueType: valueType || 'STRING',
	            };
	            return item;
	        });
	        return values[0] ? values : false;
	    }
	};
	// execute=true 要触发查询 发起请求 计算相对时间的绝对时间
	var getControllerDateValues = function (obj) {
	    var _a = obj.filterDate, endTime = _a.endTime, startTime = _a.startTime, pickerType = _a.pickerType;
	    var timeValues = ['', ''];
	    if (startTime.relativeOrExact === TimeFilterValueCategory.Exact) {
	        timeValues[0] = startTime.exactValue;
	    }
	    else {
	        var _b = startTime.relativeValue, amount = _b.amount, unit = _b.unit, direction = _b.direction;
	        var time = getTime(+(direction + amount), unit)(unit, true);
	        timeValues[0] = time.format(TIME_FORMATTER);
	    }
	    if (endTime) {
	        //end 精确时间
	        if (endTime.relativeOrExact === TimeFilterValueCategory.Exact) {
	            timeValues[1] = endTime.exactValue;
	            if (obj.execute) {
	                timeValues[1] = adjustRangeDataEndValue(pickerType, endTime.exactValue);
	            }
	            else {
	                timeValues[1] = endTime.exactValue;
	            }
	        }
	        else {
	            // end 相对时间
	            var _c = endTime.relativeValue, amount = _c.amount, unit = _c.unit, direction = _c.direction;
	            var isStart = !obj.execute;
	            var time = getTime(+(direction + amount), unit)(unit, isStart);
	            timeValues[1] = time.format(TIME_FORMATTER);
	        }
	    }
	    if (obj.execute) {
	        timeValues.forEach(function (v, i) {
	            timeValues[i] = v ? hooks(v).format(dateFormatObj[pickerType]) : v;
	        });
	    }
	    return timeValues;
	};
	var adjustRangeDataEndValue = function (pickerType, timeValue) {
	    if (!timeValue) {
	        return timeValue;
	    }
	    var adjustTime = hooks(timeValue);
	    switch (pickerType) {
	        case 'dateTime':
	            // 比较特殊 不做增值处理
	            break;
	        case 'date':
	            adjustTime = adjustTime.add(1, 'days').startOf('days');
	            break;
	        case 'month':
	            adjustTime = adjustTime.add(1, 'months').startOf('months');
	            break;
	        case 'quarter':
	            adjustTime = adjustTime.add(1, 'quarters').startOf('quarters');
	            break;
	        case 'week':
	            adjustTime = adjustTime.add(1, 'weeks').startOf('week');
	            break;
	        case 'year':
	            adjustTime = adjustTime.add(1, 'years').startOf('years');
	            break;
	    }
	    var end = adjustTime.format(TIME_FORMATTER);
	    return end;
	};
	var getChartWidgetRequestParams = function (obj) {
	    var _a;
	    var widgetId = obj.widgetId, widgetMap = obj.widgetMap, viewMap = obj.viewMap, widgetInfo = obj.widgetInfo, dashboardDataChartMap = obj.dashboardDataChartMap, option = obj.option, boardLinkFilters = obj.boardLinkFilters, drillOption = obj.drillOption;
	    if (!widgetId)
	        return null;
	    var curWidget = widgetMap[widgetId];
	    if (!curWidget)
	        return null;
	    if (curWidget.config.type !== 'chart')
	        return null;
	    if (!curWidget.datachartId)
	        return null;
	    var dataChart = dashboardDataChartMap[curWidget.datachartId];
	    if (!dataChart) {
	        // errorHandle(`can\`t find Chart ${curWidget.datachartId}`);
	        return null;
	    }
	    // 有可能有的chart 没有viewId 例如富文本chart,有时候没有 viewId，不用取相关请求参数
	    if (!dataChart.viewId)
	        return null;
	    var chartDataView = viewMap[dataChart === null || dataChart === void 0 ? void 0 : dataChart.viewId];
	    var requestParams = getDataChartRequestParams({
	        dataChart: dataChart,
	        view: chartDataView,
	        option: option,
	        drillOption: drillOption,
	        tempFilters: (_a = widgetInfo === null || widgetInfo === void 0 ? void 0 : widgetInfo.linkInfo) === null || _a === void 0 ? void 0 : _a.tempFilters,
	    });
	    var _b = getTheWidgetFiltersAndParams({
	        chartWidget: curWidget,
	        widgetMap: widgetMap,
	        params: requestParams.params,
	        view: chartDataView,
	    }), filterParams = _b.filterParams, variableParams = _b.variableParams;
	    // 全局过滤 filter
	    // TODO
	    requestParams.filters = requestParams.filters.concat(filterParams);
	    // 联动 过滤
	    if (boardLinkFilters) {
	        var linkFilters_1 = [];
	        var links = boardLinkFilters.filter(function (link) { return link.linkerWidgetId === curWidget.id; });
	        links.forEach(function (link) {
	            var triggerValue = link.triggerValue, triggerWidgetId = link.triggerWidgetId;
	            var triggerWidget = widgetMap[triggerWidgetId];
	            var linkColumn = getLinkedColumn(link.linkerWidgetId, triggerWidget);
	            var filter = {
	                aggOperator: null,
	                column: JSON.parse(linkColumn),
	                sqlOperator: FilterSqlOperator.In,
	                values: [{ value: triggerValue, valueType: DataViewFieldType.STRING }],
	            };
	            linkFilters_1.push(filter);
	        });
	        requestParams.filters = requestParams.filters.concat(linkFilters_1);
	    }
	    // splitRangerDateFilters
	    requestParams.filters = splitRangerDateFilters(requestParams.filters);
	    // 变量
	    if (variableParams) {
	        requestParams.params = variableParams;
	    }
	    if (widgetInfo) {
	        var pageInfo = widgetInfo.pageInfo;
	        if (requestParams.pageInfo) {
	            requestParams.pageInfo.pageNo = pageInfo.pageNo;
	        }
	    }
	    if (option) {
	        var pageInfo = option.pageInfo;
	        if (requestParams.pageInfo && (pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.pageNo)) {
	            requestParams.pageInfo.pageNo = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.pageNo;
	        }
	    }
	    return requestParams;
	};
	var getBoardChartRequests = function (params) {
	    var widgetMap = params.widgetMap, viewMap = params.viewMap, dashboardDataChartMap = params.dashboardDataChartMap;
	    var chartWidgetIds = Object.values(widgetMap)
	        .filter(function (w) { return w.config.type === 'chart'; })
	        .map(function (w) { return w.id; });
	    var chartRequest = chartWidgetIds
	        .map(function (widgetId) {
	        var isWidget = widgetMap[widgetId].datachartId.indexOf('widget') !== -1;
	        var boardId = widgetMap[widgetId].dashboardId;
	        var drillOption = boardDrillManager.getWidgetDrill({
	            bid: boardId,
	            wid: widgetId,
	        });
	        return _assign(_assign({}, getChartWidgetRequestParams({
	            widgetId: widgetId,
	            widgetMap: widgetMap,
	            viewMap: viewMap,
	            option: undefined,
	            widgetInfo: undefined,
	            dashboardDataChartMap: dashboardDataChartMap,
	            drillOption: drillOption,
	        })), {
	            vizName: widgetMap[widgetId].config.name,
	            vizId: isWidget
	                ? widgetMap[widgetId].id
	                : widgetMap[widgetId].datachartId,
	            analytics: false,
	            vizType: isWidget ? 'widget' : 'dataChart',
	        });
	    })
	        .filter(function (res) {
	        if (res) {
	            return true;
	        }
	        return false;
	    });
	    return chartRequest;
	};
	//  filter 去重
	var getDistinctFiltersByColumn = function (filter) {
	    if (!filter) {
	        return [];
	    }
	    var filterMap = {};
	    filter.forEach(function (item) {
	        filterMap[item.column] = item;
	    });
	    return Object.values(filterMap);
	};
	var getJsonConfigs = getStyles;

	var VALUE_SPLITTER = '###';
	var getLinkedColumn = function (targetWidgetId, triggerWidget) {
	    var _a, _b, _c, _d;
	    var relations = triggerWidget.relations;
	    var relation = relations.find(function (item) { return item.targetId === targetWidgetId; });
	    return (((_b = (_a = relation === null || relation === void 0 ? void 0 : relation.config) === null || _a === void 0 ? void 0 : _a.widgetToWidget) === null || _b === void 0 ? void 0 : _b.linkerColumn) ||
	        ((_d = (_c = relation === null || relation === void 0 ? void 0 : relation.config) === null || _c === void 0 ? void 0 : _c.widgetToWidget) === null || _d === void 0 ? void 0 : _d.triggerColumn) ||
	        '');
	};
	// TODO chart widget
	var getWidgetMap = function (widgets, dataCharts, boardType, serverViews, filterSearchParamsMap) {
	    var filterSearchParams = filterSearchParamsMap === null || filterSearchParamsMap === void 0 ? void 0 : filterSearchParamsMap.params, isMatchByName = filterSearchParamsMap === null || filterSearchParamsMap === void 0 ? void 0 : filterSearchParamsMap.isMatchByName;
	    var dashboardDataChartMap = dataCharts.reduce(function (acc, cur) {
	        acc[cur.id] = cur;
	        return acc;
	    }, {});
	    var widgetMap = widgets.reduce(function (acc, cur) {
	        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
	        // issues #601
	        var chartViewId = (_a = dashboardDataChartMap[cur.datachartId]) === null || _a === void 0 ? void 0 : _a.viewId;
	        var viewIds = chartViewId ? [chartViewId] : cur.viewIds;
	        var viewComputerFields = ((_c = JSON.parse(((_b = serverViews.find(function (v) { return v.id === viewIds[0]; })) === null || _b === void 0 ? void 0 : _b.model) || '{}')) === null || _c === void 0 ? void 0 : _c.computedFields) || [];
	        if (cur.config.type === 'chart' &&
	            ((_f = (_e = (_d = cur.config) === null || _d === void 0 ? void 0 : _d.content) === null || _e === void 0 ? void 0 : _e.dataChart) === null || _f === void 0 ? void 0 : _f.config)) {
	            cur.config.content.dataChart.config.computedFields =
	                mergeChartAndViewComputedField(viewComputerFields, (_k = (_j = (_h = (_g = cur.config) === null || _g === void 0 ? void 0 : _g.content) === null || _h === void 0 ? void 0 : _h.dataChart) === null || _j === void 0 ? void 0 : _j.config) === null || _k === void 0 ? void 0 : _k.computedFields);
	        }
	        acc[cur.id] = _assign(_assign({}, cur), { viewIds: viewIds });
	        return acc;
	    }, {});
	    var wrappedDataCharts = [];
	    var controllerWidgets = []; // use for reset button
	    var widgetList = Object.values(widgetMap);
	    // 处理 controller config visibility依赖关系 id, url参数修改filter
	    widgetList
	        .filter(function (w) { return w.config.type === 'controller'; })
	        .forEach(function (widget) {
	        var _a, _b, _c;
	        var content = widget.config.content;
	        // 根据 url参数修改filter 默认值
	        if (filterSearchParams) {
	            var paramsKey = Object.keys(filterSearchParams);
	            var matchKey = isMatchByName ? widget.config.name : widget.id;
	            if (paramsKey.includes(matchKey)) {
	                var _value = isMatchByName
	                    ? filterSearchParams[widget.config.name]
	                    : filterSearchParams[widget.id];
	                switch (content === null || content === void 0 ? void 0 : content.type) {
	                    case ControllerFacadeTypes.RangeTime:
	                        if (content.config.controllerDate &&
	                            ((_a = content.config.controllerDate) === null || _a === void 0 ? void 0 : _a.startTime) &&
	                            ((_b = content.config.controllerDate) === null || _b === void 0 ? void 0 : _b.endTime)) {
	                            content.config.controllerDate.startTime.exactValue =
	                                _value === null || _value === void 0 ? void 0 : _value[0];
	                            content.config.controllerDate.endTime.exactValue = _value === null || _value === void 0 ? void 0 : _value[0];
	                        }
	                        break;
	                    case ControllerFacadeTypes.Time:
	                        content.config.controllerDate = _assign(_assign({}, content.config.controllerDate), { startTime: {
	                                relativeOrExact: TimeFilterValueCategory.Exact,
	                                exactValue: formatTime(_value, TIME_FORMATTER),
	                            } });
	                        break;
	                    default:
	                        content.config.controllerValues = _value || [];
	                        break;
	                }
	            }
	        }
	        // 通过widget.relation 那里面的 targetId确定 关联controllerWidget 的真实ID
	        var _d = content.config.visibility, visibility = _d.visibilityType, condition = _d.condition;
	        var relations = widget.relations;
	        if (visibility === 'condition' && condition) {
	            var dependentFilterId = (_c = relations
	                .filter(function (re) { return re.config.type === 'controlToControl'; })
	                .map(function (re) { return re.targetId; })) === null || _c === void 0 ? void 0 : _c[0];
	            if (dependentFilterId) {
	                condition.dependentControllerId = dependentFilterId;
	            }
	        }
	        controllerWidgets.push(widget);
	    });
	    // 处理 自有 chart widgetControl
	    widgetList
	        .filter(function (w) { return w.config.originalType === ORIGINAL_TYPE_MAP.ownedChart; })
	        .forEach(function (widget) {
	        var dataChart = widget.config.content.dataChart;
	        if (dataChart) {
	            wrappedDataCharts.push(dataChart);
	        }
	        widget.datachartId = dataChart === null || dataChart === void 0 ? void 0 : dataChart.id;
	    });
	    // 处理 widget包含关系 tab Widget 被包含的 widget.parentId 不为空
	    widgetList
	        .filter(function (w) { return w.parentId; })
	        .forEach(function (widget) {
	        var _a;
	        var parentWidgetId = widget.parentId;
	        var parentWidget = widgetMap[parentWidgetId];
	        if (!parentWidget) {
	            widget.parentId = '';
	            return;
	        }
	        if (parentWidget.config.originalType !== ORIGINAL_TYPE_MAP.tab) {
	            return;
	        }
	        var tabContent = parentWidget.config.content;
	        if (!tabContent.itemMap) {
	            widget.parentId = '';
	            return;
	        }
	        var targetTabItem = (_a = tabContent.itemMap) === null || _a === void 0 ? void 0 : _a[widget.config.clientId];
	        if (!targetTabItem) {
	            widget.parentId = '';
	            return;
	        }
	        targetTabItem.childWidgetId = widget.id;
	    });
	    // clear Group children
	    widgetList
	        .filter(function (w) { return w.config.originalType === ORIGINAL_TYPE_MAP.group; })
	        .forEach(function (widget) {
	        widget.config.children = [];
	    });
	    // set Group children
	    widgetList
	        .filter(function (w) { return w.parentId; })
	        .forEach(function (widget) {
	        var parentWidgetId = widget.parentId;
	        var parentWidget = widgetMap[parentWidgetId];
	        if (!parentWidget) {
	            widget.parentId = '';
	            return;
	        }
	        if (parentWidget.config.originalType !== ORIGINAL_TYPE_MAP.group) {
	            return;
	        }
	        if (!Array.isArray(parentWidget.config.children)) {
	            parentWidget.config.children = [];
	        }
	        parentWidget.config.children.push(widget.id);
	    });
	    // preprocess widget
	    widgetList.forEach(function (widget) {
	        var _a, _b;
	        widget.config.boardType = boardType;
	        (_b = (_a = widget.config.customConfig) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.forEach(function (item) {
	            var _a, _b;
	            if (item.key === 'backgroundGroup') {
	                var rowsValue = (_b = (_a = item === null || item === void 0 ? void 0 : item.rows) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.value;
	                if (rowsValue === null || rowsValue === void 0 ? void 0 : rowsValue.image) {
	                    rowsValue.image = adaptBoardImageUrl(rowsValue.image, widget.dashboardId);
	                }
	            }
	        });
	    });
	    return {
	        widgetMap: widgetMap,
	        wrappedDataCharts: wrappedDataCharts,
	        controllerWidgets: controllerWidgets,
	    };
	};

	var controlWidgetTpl = function (opt) {
	    var _a, _b;
	    var widget = widgetTpl();
	    widget.id = ((_b = (_a = opt.relations) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.sourceId) || widget.id;
	    widget.parentId = opt.parentId || '';
	    widget.datachartId = opt.datachartId || '';
	    widget.viewIds = opt.viewIds || [];
	    widget.relations = opt.relations || [];
	    widget.config.content = opt.content;
	    widget.config.name = opt.name || '';
	    widget.config.type = 'controller';
	    widget.config.content = opt.content; //controller
	    widget.config.customConfig.props = [_assign({}, initTitleTpl())];
	    widget.config.pRect.width = 4;
	    widget.config.pRect.height = 1;
	    return widget;
	};
	var getControlDropDownList = function (refresh) {
	    var list = [
	        {
	            key: 'refresh',
	            renderMode: ['edit'],
	            show: refresh,
	        },
	        {
	            key: 'edit',
	            renderMode: ['edit'],
	        },
	        {
	            key: 'delete',
	            renderMode: ['edit'],
	        },
	        {
	            key: 'lock',
	            renderMode: ['edit'],
	        },
	        {
	            key: 'group',
	            renderMode: ['edit'],
	        },
	    ];
	    return list;
	};
	var getControlQueryEnable = function (props) {
	    var _a = __read(getJsonConfigs(props, ['immediateQueryGroup'], ['enable']), 1), enableQuery = _a[0];
	    return enableQuery;
	};

	var NameI18N$m = {
	    zh: '多选框',
	    en: 'Checkbox',
	};
	var widgetMeta$m = {
	    icon: 'control-widget',
	    originalType: ORIGINAL_TYPE_MAP.checkboxGroup,
	    canWrapped: true,
	    controllable: true,
	    linkable: false,
	    canFullScreen: false,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: NameI18N$m.zh,
	                widgetName: NameI18N$m.zh,
	                action: {},
	                title: TitleI18N.zh,
	                immediateQuery: ImmediateQueryI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                loopFetch: LoopFetchI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: NameI18N$m.en,
	                widgetName: NameI18N$m.en,
	                action: {},
	                immediateQuery: ImmediateQueryI18N.en,
	                title: TitleI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                loopFetch: LoopFetchI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$l = {
	    create: function (opt) {
	        var _a, _b;
	        var widget = controlWidgetTpl(opt);
	        widget.id = widgetMeta$m.originalType + widget.id;
	        widget.config.originalType = widgetMeta$m.originalType;
	        var addProps = [
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	            _assign({}, initLoopFetchTpl()),
	        ];
	        widget.config.rect.height = 200;
	        widget.config.customConfig.props =
	            (_a = widget.config.customConfig.props) === null || _a === void 0 ? void 0 : _a.concat(addProps);
	        (_b = widget.config.customConfig.props) === null || _b === void 0 ? void 0 : _b.forEach(function (ele) {
	            var _a;
	            if (ele.key === 'titleGroup') {
	                (_a = ele.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                    if (row.key === 'showTitle') {
	                        row.value = true;
	                    }
	                });
	            }
	        });
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$m, key);
	    },
	    getDropDownList: function () {
	        return getControlDropDownList(true);
	    },
	    getQueryEnable: function (arg) {
	        return getControlQueryEnable(arg);
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var checkboxGroupProto = {
	    originalType: widgetMeta$m.originalType,
	    meta: widgetMeta$m,
	    toolkit: widgetToolkit$l,
	};

	var NameI18N$l = {
	    zh: '下拉列表',
	    en: 'DropdownList',
	};
	var widgetMeta$l = {
	    icon: 'control-widget',
	    originalType: ORIGINAL_TYPE_MAP.dropdownList,
	    canWrapped: true,
	    canFullScreen: false,
	    controllable: true,
	    linkable: false,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: NameI18N$l.zh,
	                widgetName: NameI18N$l.zh,
	                action: {},
	                title: TitleI18N.zh,
	                immediateQuery: ImmediateQueryI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                loopFetch: LoopFetchI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: 'dropdownList',
	                widgetName: NameI18N$l.en,
	                action: {},
	                title: TitleI18N.en,
	                immediateQuery: ImmediateQueryI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                loopFetch: LoopFetchI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$k = {
	    create: function (opt) {
	        var _a, _b;
	        var widget = controlWidgetTpl(opt);
	        widget.id = widgetMeta$l.originalType + widget.id;
	        widget.config.originalType = widgetMeta$l.originalType;
	        widget.config.rect.height = 40;
	        var addProps = [
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	            _assign({}, initLoopFetchTpl()),
	        ];
	        (_a = widget.config.customConfig.props) === null || _a === void 0 ? void 0 : _a.forEach(function (ele) {
	            var _a;
	            if (ele.key === 'titleGroup') {
	                (_a = ele.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                    if (row.key === 'showTitle') {
	                        row.value = true;
	                    }
	                });
	            }
	        });
	        widget.config.customConfig.props =
	            (_b = widget.config.customConfig.props) === null || _b === void 0 ? void 0 : _b.concat(addProps);
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$l, key);
	    },
	    getDropDownList: function () {
	        return getControlDropDownList(true);
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var dropdownListProto = {
	    originalType: widgetMeta$l.originalType,
	    meta: widgetMeta$l,
	    toolkit: widgetToolkit$k,
	};

	var NameI18N$k = {
	    zh: '下拉树',
	    en: 'Dropdown tree',
	};
	var widgetMeta$k = {
	    icon: 'control-widget',
	    originalType: ORIGINAL_TYPE_MAP.dropDownTree,
	    canWrapped: true,
	    controllable: true,
	    linkable: false,
	    canFullScreen: false,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$k.zh,
	                action: {},
	                title: TitleI18N.zh,
	                immediateQuery: ImmediateQueryI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                loopFetch: LoopFetchI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$k.en,
	                action: {},
	                title: TitleI18N.en,
	                immediateQuery: ImmediateQueryI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                loopFetch: LoopFetchI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$j = {
	    create: function (opt) {
	        var _a, _b;
	        var widget = controlWidgetTpl(opt);
	        widget.id = widgetMeta$k.originalType + widget.id;
	        widget.config.originalType = widgetMeta$k.originalType;
	        widget.config.rect.height = 40;
	        var addProps = [
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	            _assign({}, initLoopFetchTpl()),
	        ];
	        (_a = widget.config.customConfig.props) === null || _a === void 0 ? void 0 : _a.forEach(function (ele) {
	            var _a;
	            if (ele.key === 'titleGroup') {
	                (_a = ele.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                    if (row.key === 'showTitle') {
	                        row.value = true;
	                    }
	                });
	            }
	        });
	        widget.config.customConfig.props =
	            (_b = widget.config.customConfig.props) === null || _b === void 0 ? void 0 : _b.concat(addProps);
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$k, key);
	    },
	    getDropDownList: function () {
	        return getControlDropDownList(true);
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var dropDownTree = {
	    originalType: widgetMeta$k.originalType,
	    meta: widgetMeta$k,
	    toolkit: widgetToolkit$j,
	};

	var NameI18N$j = {
	    zh: '多选下拉列表',
	    en: 'MultiDropdownList',
	};
	var widgetMeta$j = {
	    icon: 'control-widget',
	    originalType: ORIGINAL_TYPE_MAP.multiDropdownList,
	    canWrapped: true,
	    controllable: true,
	    linkable: false,
	    canFullScreen: false,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$j.zh,
	                action: {},
	                title: TitleI18N.zh,
	                immediateQuery: ImmediateQueryI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                loopFetch: LoopFetchI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$j.en,
	                action: {},
	                title: TitleI18N.en,
	                immediateQuery: ImmediateQueryI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                loopFetch: LoopFetchI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$i = {
	    create: function (opt) {
	        var _a, _b;
	        var widget = controlWidgetTpl(opt);
	        widget.id = widgetMeta$j.originalType + widget.id;
	        widget.config.originalType = widgetMeta$j.originalType;
	        widget.config.rect.height = 40;
	        var addProps = [
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	            _assign({}, initLoopFetchTpl()),
	        ];
	        (_a = widget.config.customConfig.props) === null || _a === void 0 ? void 0 : _a.forEach(function (ele) {
	            var _a;
	            if (ele.key === 'titleGroup') {
	                (_a = ele.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                    if (row.key === 'showTitle') {
	                        row.value = true;
	                    }
	                });
	            }
	        });
	        widget.config.customConfig.props =
	            (_b = widget.config.customConfig.props) === null || _b === void 0 ? void 0 : _b.concat(addProps);
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$j, key);
	    },
	    getDropDownList: function () {
	        return getControlDropDownList(true);
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var multiDropdownListProto = {
	    originalType: widgetMeta$j.originalType,
	    meta: widgetMeta$j,
	    toolkit: widgetToolkit$i,
	};

	var NameI18N$i = {
	    zh: '单选按钮',
	    en: 'RadioGroup',
	};
	var widgetMeta$i = {
	    icon: 'control-widget',
	    originalType: ORIGINAL_TYPE_MAP.radioGroup,
	    canWrapped: true,
	    controllable: true,
	    linkable: false,
	    canFullScreen: false,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$i.zh,
	                action: {},
	                title: TitleI18N.zh,
	                immediateQuery: ImmediateQueryI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                loopFetch: LoopFetchI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$i.en,
	                action: {},
	                title: TitleI18N.en,
	                immediateQuery: ImmediateQueryI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                loopFetch: LoopFetchI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$h = {
	    create: function (opt) {
	        var _a, _b;
	        var widget = controlWidgetTpl(opt);
	        widget.id = widgetMeta$i.originalType + widget.id;
	        widget.config.originalType = widgetMeta$i.originalType;
	        widget.config.rect.height = 100;
	        var addProps = [
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	            _assign({}, initLoopFetchTpl()),
	        ];
	        (_a = widget.config.customConfig.props) === null || _a === void 0 ? void 0 : _a.forEach(function (ele) {
	            var _a;
	            if (ele.key === 'titleGroup') {
	                (_a = ele.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                    if (row.key === 'showTitle') {
	                        row.value = true;
	                    }
	                });
	            }
	        });
	        widget.config.customConfig.props =
	            (_b = widget.config.customConfig.props) === null || _b === void 0 ? void 0 : _b.concat(addProps);
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$i, key);
	    },
	    getDropDownList: function () {
	        return getControlDropDownList(true);
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var radioGroupProto = {
	    originalType: widgetMeta$i.originalType,
	    meta: widgetMeta$i,
	    toolkit: widgetToolkit$h,
	};

	var NameI18N$h = {
	    zh: '时间范围',
	    en: 'RangeTime',
	};
	var widgetMeta$h = {
	    icon: 'control-widget',
	    originalType: ORIGINAL_TYPE_MAP.rangeTime,
	    canWrapped: true,
	    controllable: true,
	    linkable: false,
	    canFullScreen: false,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$h.zh,
	                action: {},
	                title: TitleI18N.zh,
	                immediateQuery: ImmediateQueryI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$h.en,
	                action: {},
	                title: TitleI18N.en,
	                immediateQuery: ImmediateQueryI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$g = {
	    create: function (opt) {
	        var _a, _b;
	        var widget = controlWidgetTpl(opt);
	        widget.id = widgetMeta$h.originalType + widget.id;
	        widget.config.originalType = widgetMeta$h.originalType;
	        widget.config.name = opt.name || '';
	        widget.config.rect.height = 60;
	        var addProps = [
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	        ];
	        (_a = widget.config.customConfig.props) === null || _a === void 0 ? void 0 : _a.forEach(function (ele) {
	            var _a;
	            if (ele.key === 'titleGroup') {
	                (_a = ele.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                    if (row.key === 'showTitle') {
	                        row.value = true;
	                    }
	                });
	            }
	        });
	        widget.config.customConfig.props =
	            (_b = widget.config.customConfig.props) === null || _b === void 0 ? void 0 : _b.concat(addProps);
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$h, key);
	    },
	    getDropDownList: function () {
	        return getControlDropDownList(false);
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var rangeTimeProto = {
	    originalType: widgetMeta$h.originalType,
	    meta: widgetMeta$h,
	    toolkit: widgetToolkit$g,
	};

	var NameI18N$g = {
	    zh: '数值范围',
	    en: 'RangeValue',
	};
	var widgetMeta$g = {
	    icon: 'control-widget',
	    originalType: ORIGINAL_TYPE_MAP.rangeValue,
	    canWrapped: true,
	    controllable: true,
	    linkable: false,
	    canFullScreen: false,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$g.zh,
	                action: {},
	                title: TitleI18N.zh,
	                immediateQuery: ImmediateQueryI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$g.en,
	                action: {},
	                title: TitleI18N.en,
	                immediateQuery: ImmediateQueryI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$f = {
	    create: function (opt) {
	        var _a, _b;
	        var widget = controlWidgetTpl(opt);
	        widget.id = widgetMeta$g.originalType + widget.id;
	        widget.config.originalType = widgetMeta$g.originalType;
	        widget.config.rect.height = 60;
	        var addProps = [
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	        ];
	        (_a = widget.config.customConfig.props) === null || _a === void 0 ? void 0 : _a.forEach(function (ele) {
	            var _a;
	            if (ele.key === 'titleGroup') {
	                (_a = ele.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                    if (row.key === 'showTitle') {
	                        row.value = true;
	                    }
	                });
	            }
	        });
	        widget.config.customConfig.props =
	            (_b = widget.config.customConfig.props) === null || _b === void 0 ? void 0 : _b.concat(addProps);
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$g, key);
	    },
	    getDropDownList: function () {
	        return getControlDropDownList(false);
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var rangeValueProto = {
	    originalType: widgetMeta$g.originalType,
	    meta: widgetMeta$g,
	    toolkit: widgetToolkit$f,
	};

	var NameI18N$f = {
	    zh: '滑块',
	    en: 'Slider',
	};
	var widgetMeta$f = {
	    icon: 'control-widget',
	    originalType: ORIGINAL_TYPE_MAP.slider,
	    canWrapped: true,
	    controllable: true,
	    linkable: false,
	    canFullScreen: false,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$f.zh,
	                action: {},
	                title: TitleI18N.zh,
	                immediateQuery: ImmediateQueryI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$f.en,
	                action: {},
	                title: TitleI18N.en,
	                immediateQuery: ImmediateQueryI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$e = {
	    create: function (opt) {
	        var _a, _b;
	        var widget = controlWidgetTpl(opt);
	        widget.id = widgetMeta$f.originalType + widget.id;
	        widget.config.originalType = widgetMeta$f.originalType;
	        widget.config.rect.height = 60;
	        var addProps = [
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	        ];
	        (_a = widget.config.customConfig.props) === null || _a === void 0 ? void 0 : _a.forEach(function (ele) {
	            var _a;
	            if (ele.key === 'titleGroup') {
	                (_a = ele.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                    if (row.key === 'showTitle') {
	                        row.value = true;
	                    }
	                });
	            }
	        });
	        widget.config.customConfig.props =
	            (_b = widget.config.customConfig.props) === null || _b === void 0 ? void 0 : _b.concat(addProps);
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$f, key);
	    },
	    getDropDownList: function () {
	        return getControlDropDownList(false);
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var sliderProto = {
	    originalType: widgetMeta$f.originalType,
	    meta: widgetMeta$f,
	    toolkit: widgetToolkit$e,
	};

	var NameI18N$e = {
	    zh: '文本',
	    en: 'Text',
	};
	var widgetMeta$e = {
	    icon: 'control-widget',
	    originalType: ORIGINAL_TYPE_MAP.text,
	    canWrapped: true,
	    controllable: true,
	    linkable: false,
	    canFullScreen: false,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$e.zh,
	                action: {},
	                title: TitleI18N.zh,
	                immediateQuery: ImmediateQueryI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$e.en,
	                action: {},
	                title: TitleI18N.en,
	                immediateQuery: ImmediateQueryI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$d = {
	    create: function (opt) {
	        var _a, _b;
	        var widget = controlWidgetTpl(opt);
	        widget.id = widgetMeta$e.originalType + widget.id;
	        widget.config.originalType = widgetMeta$e.originalType;
	        widget.config.rect.height = 60;
	        var addProps = [
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	        ];
	        (_a = widget.config.customConfig.props) === null || _a === void 0 ? void 0 : _a.forEach(function (ele) {
	            var _a;
	            if (ele.key === 'titleGroup') {
	                (_a = ele.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                    if (row.key === 'showTitle') {
	                        row.value = true;
	                    }
	                });
	            }
	        });
	        widget.config.customConfig.props =
	            (_b = widget.config.customConfig.props) === null || _b === void 0 ? void 0 : _b.concat(addProps);
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$e, key);
	    },
	    getDropDownList: function () {
	        return getControlDropDownList(false);
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var textProto = {
	    originalType: widgetMeta$e.originalType,
	    meta: widgetMeta$e,
	    toolkit: widgetToolkit$d,
	};

	var NameI18N$d = {
	    zh: '时间',
	    en: 'Time',
	};
	var widgetMeta$d = {
	    icon: 'control-widget',
	    originalType: ORIGINAL_TYPE_MAP.time,
	    canWrapped: true,
	    controllable: true,
	    linkable: false,
	    canFullScreen: false,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$d.zh,
	                action: {},
	                title: TitleI18N.zh,
	                immediateQuery: ImmediateQueryI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$d.en,
	                action: {},
	                title: TitleI18N.en,
	                immediateQuery: ImmediateQueryI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$c = {
	    create: function (opt) {
	        var _a, _b;
	        var widget = controlWidgetTpl(opt);
	        widget.id = widgetMeta$d.originalType + widget.id;
	        widget.config.originalType = widgetMeta$d.originalType;
	        widget.config.rect.height = 60;
	        var addProps = [
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	        ];
	        (_a = widget.config.customConfig.props) === null || _a === void 0 ? void 0 : _a.forEach(function (ele) {
	            var _a;
	            if (ele.key === 'titleGroup') {
	                (_a = ele.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                    if (row.key === 'showTitle') {
	                        row.value = true;
	                    }
	                });
	            }
	        });
	        widget.config.customConfig.props =
	            (_b = widget.config.customConfig.props) === null || _b === void 0 ? void 0 : _b.concat(addProps);
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$d, key);
	    },
	    getDropDownList: function () {
	        return getControlDropDownList(false);
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var timeProto = {
	    originalType: widgetMeta$d.originalType,
	    meta: widgetMeta$d,
	    toolkit: widgetToolkit$c,
	};

	var NameI18N$c = {
	    zh: '数值',
	    en: 'Value',
	};
	var widgetMeta$c = {
	    icon: 'control-widget',
	    originalType: ORIGINAL_TYPE_MAP.value,
	    canWrapped: true,
	    controllable: true,
	    linkable: false,
	    canFullScreen: false,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$c.zh,
	                action: {},
	                title: TitleI18N.zh,
	                immediateQuery: ImmediateQueryI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: '',
	                widgetName: NameI18N$c.en,
	                action: {},
	                title: TitleI18N.en,
	                immediateQuery: ImmediateQueryI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$b = {
	    create: function (opt) {
	        var _a, _b;
	        var widget = controlWidgetTpl(opt);
	        widget.id = widgetMeta$c.originalType + widget.id;
	        widget.config.originalType = widgetMeta$c.originalType;
	        widget.config.rect.height = 60;
	        var addProps = [
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	        ];
	        (_a = widget.config.customConfig.props) === null || _a === void 0 ? void 0 : _a.forEach(function (ele) {
	            var _a;
	            if (ele.key === 'titleGroup') {
	                (_a = ele.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                    if (row.key === 'showTitle') {
	                        row.value = true;
	                    }
	                });
	            }
	        });
	        widget.config.customConfig.props =
	            (_b = widget.config.customConfig.props) === null || _b === void 0 ? void 0 : _b.concat(addProps);
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$c, key);
	    },
	    getDropDownList: function () {
	        return getControlDropDownList(false);
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var valueProto = {
	    originalType: widgetMeta$c.originalType,
	    meta: widgetMeta$c,
	    toolkit: widgetToolkit$b,
	};

	var getMeta = function (opt) {
	    var meta = {
	        icon: opt.icon,
	        originalType: opt.widgetTypeId,
	        canWrapped: true,
	        controllable: true,
	        linkable: true,
	        singleton: false,
	        canFullScreen: true,
	        i18ns: [
	            {
	                lang: 'zh-CN',
	                translation: _assign(_assign({}, InteractionI18N.zh), { desc: opt.zh.desc, widgetName: opt.zh.widgetName, action: {}, title: TitleI18N.zh, background: { backgroundGroup: '背景' }, padding: PaddingI18N.zh, loopFetch: LoopFetchI18N.zh, border: { borderGroup: '边框' } }),
	            },
	            {
	                lang: 'en-US',
	                translation: _assign(_assign({}, InteractionI18N.en), { desc: opt.en.desc, widgetName: opt.en.widgetName, action: {}, title: TitleI18N.en, background: { backgroundGroup: 'Background' }, padding: PaddingI18N.en, loopFetch: LoopFetchI18N.en, border: { borderGroup: 'Border' } }),
	            },
	        ],
	    };
	    return meta;
	};
	var dataChartCreator = function (opt) {
	    var _a;
	    var widget = widgetTpl();
	    widget.parentId = opt.parentId || '';
	    widget.datachartId = opt.datachartId || '';
	    widget.viewIds = opt.viewIds || [];
	    widget.relations = opt.relations || [];
	    widget.config.type = 'chart';
	    widget.config.content.dataChart = opt.content; // DataChart
	    widget.config.name = opt.name || ((_a = opt.content) === null || _a === void 0 ? void 0 : _a.name);
	    widget.config.customConfig.props = [
	        _assign({}, initTitleTpl()),
	        _assign({}, initLoopFetchTpl()),
	        _assign({}, initPaddingTpl()),
	        _assign({}, initBackgroundTpl(opt.boardType === 'auto' ? WHITE : '')),
	        _assign({}, initBorderTpl()),
	    ];
	    widget.config.customConfig.props.forEach(function (ele) {
	        var _a;
	        if (ele.key === 'titleGroup') {
	            (_a = ele.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                if (row.key === 'showTitle') {
	                    row.value = true;
	                }
	            });
	        }
	    });
	    widget.config.customConfig.interactions = __spreadArray([], __read(initInteractionTpl()), false);
	    return widget;
	};

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var NameI18N$b = {
	    zh: '引用图表',
	    en: 'LinkedChart',
	};
	var widgetMeta$b = getMeta({
	    icon: 'linkedChart-widget',
	    widgetTypeId: ORIGINAL_TYPE_MAP.linkedChart,
	    zh: {
	        desc: '引入图表部件的内部是一个引用的数据图表,原有数据图表有改动时,引入图表部件也会跟着改变',
	        widgetName: NameI18N$b.zh,
	    },
	    en: {
	        desc: 'linkedChart Widget core is a referenced dataChart,When the original dataChart is changed, the widget will also change',
	        widgetName: NameI18N$b.en,
	    },
	});
	var linkedChartToolkit = {
	    create: function (opt) {
	        var widget = dataChartCreator(opt);
	        widget.config.originalType = ORIGINAL_TYPE_MAP.linkedChart;
	        widget.id = widget.config.originalType + widget.id;
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$b, key);
	    },
	    getDropDownList: function (widgetConf) {
	        var list = [
	            {
	                key: 'refresh',
	                renderMode: ['edit', 'read', 'share', 'schedule'],
	            },
	            {
	                key: 'fullScreen',
	                renderMode: ['read', 'share', 'schedule'],
	            },
	            {
	                key: 'edit',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'delete',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'lock',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'unlock',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'group',
	                renderMode: ['edit'],
	            },
	        ];
	        return list;
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	    // setLinkage() {},
	    // closeLinkage() {},
	    // setJump() {},
	    // closeJump() {},
	};
	var linkedChartProto = {
	    originalType: widgetMeta$b.originalType,
	    meta: widgetMeta$b,
	    toolkit: linkedChartToolkit,
	};

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var NameI18N$a = {
	    zh: '自建数据图表',
	    en: 'OwnedChart',
	};
	var widgetMeta$a = getMeta({
	    icon: 'ownedChart-widget',
	    widgetTypeId: ORIGINAL_TYPE_MAP.ownedChart,
	    zh: {
	        desc: '自建数据图表的内部是一个独立的数据图表 ',
	        widgetName: NameI18N$a.zh,
	    },
	    en: {
	        desc: 'ownedChart Widget core is a independent dataChart',
	        widgetName: NameI18N$a.en,
	    },
	});
	var widgetToolkit$a = {
	    create: function (opt) {
	        var widget = dataChartCreator(opt);
	        widget.config.originalType = ORIGINAL_TYPE_MAP.ownedChart;
	        widget.id = widget.config.originalType + widget.id;
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$a, key);
	    },
	    getDropDownList: function (widgetConf) {
	        var list = [
	            {
	                key: 'refresh',
	                renderMode: ['edit', 'read', 'share', 'schedule'],
	            },
	            {
	                key: 'fullScreen',
	                renderMode: ['read', 'share', 'schedule'],
	            },
	            {
	                key: 'edit',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'delete',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'lock',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'unlock',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'group',
	                renderMode: ['edit'],
	            },
	        ];
	        return list;
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	    // setLinkage() {},
	    // closeLinkage() {},
	    // setJump() {},
	    // closeJump() {},
	};
	var ownedChartProto = {
	    originalType: widgetMeta$a.originalType,
	    meta: widgetMeta$a,
	    toolkit: widgetToolkit$a,
	};

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var NameI18N$9 = {
	    zh: '分组',
	    en: 'Group',
	};
	var widgetMeta$9 = {
	    icon: 'group-widget',
	    originalType: ORIGINAL_TYPE_MAP.group,
	    canWrapped: true,
	    controllable: false,
	    linkable: false,
	    singleton: false,
	    canFullScreen: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: 'group',
	                widgetName: NameI18N$9.zh,
	                action: {},
	                title: TitleI18N.zh,
	                background: { backgroundGroup: '背景图片' },
	                padding: PaddingI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: 'img',
	                widgetName: NameI18N$9.en,
	                action: {},
	                title: TitleI18N.en,
	                background: { backgroundGroup: 'Image Setting' },
	                padding: PaddingI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$9 = {
	    create: function (opt) {
	        var widget = widgetTpl();
	        widget.id = widgetMeta$9.originalType + widget.id;
	        widget.parentId = opt.parentId || '';
	        widget.viewIds = [];
	        widget.relations = opt.relations || [];
	        widget.config.originalType = widgetMeta$9.originalType;
	        widget.config.type = 'group';
	        widget.config.name = opt.name || '';
	        widget.config.children = opt.children;
	        widget.config.pRect.width = 8; // NOTE: group width in auto grid system is 8
	        widget.config.pRect.height = 8;
	        widget.config.customConfig.props = [];
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$9, key);
	    },
	    getDropDownList: function () {
	        var list = [
	            {
	                key: 'edit',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'delete',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'lock',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'group',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'unGroup',
	                renderMode: ['edit'],
	            },
	        ];
	        return list;
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var groupProto = {
	    originalType: widgetMeta$9.originalType,
	    meta: widgetMeta$9,
	    toolkit: widgetToolkit$9,
	};

	var initIframeTpl = function () {
	    return {
	        label: 'iframe.iframeGroup',
	        key: 'iframeGroup',
	        comType: 'group',
	        rows: [
	            {
	                label: 'iframe.src',
	                key: 'src',
	                value: '/login',
	                comType: 'input',
	            },
	        ],
	    };
	};
	var iframeI18N = {
	    zh: {
	        iframeGroup: '嵌入页配置',
	        src: '嵌入地址', //资源？
	    },
	    en: {
	        iframeGroup: 'Iframe Config',
	        src: 'URL', // Source?
	    },
	};
	var NameI18N$8 = {
	    zh: '嵌入页',
	    en: 'Embed',
	};
	var widgetMeta$8 = {
	    icon: 'embed-widget',
	    originalType: ORIGINAL_TYPE_MAP.iframe,
	    canWrapped: true,
	    controllable: false,
	    linkable: false,
	    canFullScreen: true,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: 'iframe',
	                widgetName: NameI18N$8.zh,
	                action: {},
	                title: TitleI18N.zh,
	                iframe: iframeI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: 'iframe',
	                widgetName: NameI18N$8.en,
	                action: {},
	                title: TitleI18N.en,
	                iframe: iframeI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$8 = {
	    create: function (opt) {
	        var widget = widgetTpl();
	        widget.id = widgetMeta$8.originalType + widget.id;
	        widget.parentId = opt.parentId || '';
	        widget.datachartId = opt.datachartId || '';
	        widget.viewIds = opt.viewIds || [];
	        widget.relations = opt.relations || [];
	        widget.config.originalType = widgetMeta$8.originalType;
	        widget.config.type = 'media';
	        widget.config.name = opt.name || '';
	        widget.config.customConfig.props = [
	            _assign({}, initIframeTpl()),
	            _assign({}, initTitleTpl()),
	            _assign({}, initBackgroundTpl()),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	        ];
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$8, key);
	    },
	    edit: function () { },
	    save: function () { },
	    getDropDownList: function () {
	        var list = [
	            {
	                key: 'edit',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'delete',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'lock',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'group',
	                renderMode: ['edit'],
	            },
	        ];
	        return list;
	    },
	    getIframe: function (props) {
	        var _a = __read(getJsonConfigs(props, ['iframeGroup'], ['src']), 1), src = _a[0];
	        return {
	            src: src,
	        };
	    },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	// export const getWidgetIframe = props => {
	//   const [src] = getJsonConfigs(props, ['iframeGroup'], ['src']);
	//   return {
	//     src,
	//   };
	// };
	var iframeProto = {
	    originalType: widgetMeta$8.originalType,
	    meta: widgetMeta$8,
	    toolkit: widgetToolkit$8,
	};

	var NameI18N$7 = {
	    zh: '图片',
	    en: 'Image',
	};
	var widgetMeta$7 = {
	    icon: 'image-widget',
	    originalType: ORIGINAL_TYPE_MAP.image,
	    canWrapped: true,
	    controllable: false,
	    linkable: false,
	    singleton: false,
	    canFullScreen: true,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: 'img',
	                widgetName: NameI18N$7.zh,
	                action: {},
	                title: TitleI18N.zh,
	                background: { backgroundGroup: '图片编辑' },
	                padding: PaddingI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: 'img',
	                widgetName: NameI18N$7.en,
	                action: {},
	                title: TitleI18N.en,
	                background: { backgroundGroup: 'Image Setting' },
	                padding: PaddingI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$7 = {
	    create: function (opt) {
	        var widget = widgetTpl();
	        widget.id = widgetMeta$7.originalType + widget.id;
	        widget.parentId = opt.parentId || '';
	        widget.datachartId = opt.datachartId || '';
	        widget.viewIds = opt.viewIds || [];
	        widget.relations = opt.relations || [];
	        widget.config.originalType = widgetMeta$7.originalType;
	        widget.config.type = 'media';
	        widget.config.name = opt.name || '';
	        widget.config.customConfig.props = [
	            _assign({}, initBackgroundTpl()),
	            _assign({}, initTitleTpl()),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	        ];
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$7, key);
	    },
	    getDropDownList: function () {
	        var list = [
	            {
	                key: 'edit',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'delete',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'lock',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'group',
	                renderMode: ['edit'],
	            },
	        ];
	        return list;
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var imageProto = {
	    originalType: widgetMeta$7.originalType,
	    meta: widgetMeta$7,
	    toolkit: widgetToolkit$7,
	};

	var NameI18N$6 = {
	    zh: '查询按钮',
	    en: 'queryBtn',
	};
	var widgetMeta$6 = {
	    icon: 'query-widget',
	    originalType: ORIGINAL_TYPE_MAP.queryBtn,
	    canWrapped: true,
	    controllable: false,
	    linkable: false,
	    canFullScreen: false,
	    singleton: true,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: '查询按钮',
	                widgetName: NameI18N$6.zh,
	                action: {},
	                title: TitleI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: 'queryBtn',
	                widgetName: NameI18N$6.en,
	                action: {},
	                title: TitleI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$6 = {
	    create: function (opt) {
	        var widget = widgetTpl();
	        widget.id = widgetMeta$6.originalType + widget.id;
	        widget.parentId = opt.parentId || '';
	        widget.datachartId = opt.datachartId || '';
	        widget.viewIds = opt.viewIds || [];
	        widget.relations = opt.relations || [];
	        widget.config.originalType = widgetMeta$6.originalType;
	        widget.config.name = opt.name || initWidgetName(NameI18N$6);
	        widget.config.type = 'button';
	        widget.config.rect.width = 100;
	        widget.config.rect.height = 60;
	        widget.config.pRect.width = 2;
	        widget.config.pRect.height = 1;
	        widget.config.customConfig.props = [
	            _assign({}, initTitleTpl()),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	            _assign({}, initBackgroundTpl(PRIMARY)),
	        ];
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$6, key);
	    },
	    getDropDownList: function () {
	        var list = [
	            {
	                key: 'edit',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'delete',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'lock',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'group',
	                renderMode: ['edit'],
	            },
	        ];
	        return list;
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var queryBtnProto = {
	    originalType: widgetMeta$6.originalType,
	    meta: widgetMeta$6,
	    toolkit: widgetToolkit$6,
	};

	var NameI18N$5 = {
	    zh: '重置按钮',
	    en: 'ResetBtn',
	};
	var widgetMeta$5 = {
	    icon: 'reset-widget',
	    originalType: ORIGINAL_TYPE_MAP.resetBtn,
	    canWrapped: true,
	    controllable: false,
	    linkable: false,
	    canFullScreen: false,
	    singleton: true,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: '重置按钮',
	                widgetName: '重置',
	                action: {},
	                title: TitleI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: 'resetBtn',
	                widgetName: 'reset',
	                action: {},
	                title: TitleI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$5 = {
	    create: function (opt) {
	        var widget = widgetTpl();
	        widget.id = widgetMeta$5.originalType + widget.id;
	        widget.parentId = opt.parentId || '';
	        widget.datachartId = opt.datachartId || '';
	        widget.viewIds = opt.viewIds || [];
	        widget.relations = opt.relations || [];
	        widget.config.originalType = widgetMeta$5.originalType;
	        widget.config.type = 'button';
	        widget.config.name = opt.name || initWidgetName(NameI18N$5);
	        widget.config.rect.width = 100;
	        widget.config.rect.height = 60;
	        widget.config.pRect.width = 2;
	        widget.config.pRect.height = 1;
	        widget.config.customConfig.props = [
	            _assign({}, initTitleTpl()),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	            _assign({}, initBackgroundTpl(WHITE)),
	        ];
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$5, key);
	    },
	    getDropDownList: function () {
	        var list = [
	            {
	                key: 'edit',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'delete',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'lock',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'group',
	                renderMode: ['edit'],
	            },
	        ];
	        return list;
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var resetBtnProto = {
	    originalType: widgetMeta$5.originalType,
	    meta: widgetMeta$5,
	    toolkit: widgetToolkit$5,
	};

	var NameI18N$4 = {
	    zh: '富文本',
	    en: 'RichText',
	};
	var widgetMeta$4 = {
	    icon: 'rich-text',
	    originalType: ORIGINAL_TYPE_MAP.richText,
	    canWrapped: true,
	    controllable: false,
	    linkable: false,
	    canFullScreen: true,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: 'richText',
	                widgetName: NameI18N$4.zh,
	                action: {},
	                title: TitleI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: NameI18N$4,
	                widgetName: NameI18N$4.en,
	                action: {},
	                title: TitleI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$4 = {
	    create: function (opt) {
	        var widget = widgetTpl();
	        widget.id = widgetMeta$4.originalType + widget.id;
	        widget.parentId = opt.parentId || '';
	        widget.datachartId = opt.datachartId || '';
	        widget.viewIds = opt.viewIds || [];
	        widget.relations = opt.relations || [];
	        widget.config.originalType = widgetMeta$4.originalType;
	        widget.config.type = 'media';
	        widget.config.name = opt.name || '';
	        widget.config.pRect.height = 3;
	        widget.config.customConfig.props = [
	            _assign({}, initTitleTpl()),
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	        ];
	        widget.config.content = {
	            richText: {
	                content: {
	                    ops: [
	                        {
	                            attributes: {
	                                size: '24px',
	                                color: '#448aff',
	                                italic: true,
	                            },
	                            insert: 'ABCDEFG...',
	                        },
	                        {
	                            insert: '\n',
	                        },
	                    ],
	                },
	            },
	        };
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$4, key);
	    },
	    getDropDownList: function () {
	        var list = [
	            {
	                key: 'edit',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'delete',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'lock',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'group',
	                renderMode: ['edit'],
	            },
	        ];
	        return list;
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var richTextProto = {
	    originalType: widgetMeta$4.originalType,
	    meta: widgetMeta$4,
	    toolkit: widgetToolkit$4,
	};

	var NameI18N$3 = {
	    zh: '标签卡',
	    en: 'Tab',
	};
	var tabsI18N = {
	    zh: {
	        tabGroup: '标签页配置',
	        alignTitle: '对齐方式',
	        position: '标签位置',
	    },
	    en: {
	        tabGroup: 'Tab Config',
	        alignTitle: 'Align',
	        position: 'Position',
	    },
	};
	var widgetMeta$3 = {
	    icon: 'tab-widget',
	    originalType: ORIGINAL_TYPE_MAP.tab,
	    canWrapped: false,
	    controllable: false,
	    linkable: false,
	    canFullScreen: true,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: '标签卡 容器组件可以切换',
	                widgetName: NameI18N$3.zh,
	                action: {},
	                title: TitleI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                loopFetch: LoopFetchI18N.zh,
	                border: { borderGroup: '边框' },
	                tab: tabsI18N.zh,
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: 'Tab container',
	                widgetName: NameI18N$3.en,
	                action: {},
	                title: TitleI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                loopFetch: LoopFetchI18N.en,
	                border: { borderGroup: 'Border' },
	                tab: tabsI18N.en,
	            },
	        },
	    ],
	};
	var initTabsTpl = function () {
	    return {
	        label: 'tab.tabGroup',
	        key: 'tabGroup',
	        comType: 'group',
	        rows: [
	            {
	                label: 'tab.alignTitle',
	                key: 'align',
	                default: 'start',
	                value: 'start',
	                comType: 'select',
	                options: {
	                    translateItemLabel: true,
	                    items: [
	                        { label: 'viz.common.enum.alignment.start', value: 'start' },
	                        { label: 'viz.common.enum.alignment.center', value: 'center' },
	                        { label: 'viz.common.enum.alignment.end', value: 'end' },
	                    ],
	                },
	            },
	            {
	                label: 'tab.position',
	                key: 'position',
	                default: 'top',
	                value: 'top',
	                comType: 'select',
	                options: {
	                    translateItemLabel: true,
	                    items: [
	                        { label: 'viz.common.enum.position.top', value: 'top' },
	                        { label: 'viz.common.enum.position.bottom', value: 'bottom' },
	                        { label: 'viz.common.enum.position.left', value: 'left' },
	                        { label: 'viz.common.enum.position.right', value: 'right' },
	                    ],
	                },
	            },
	        ],
	    };
	};
	var widgetToolkit$3 = {
	    create: function (opt) {
	        var _a;
	        var widget = widgetTpl();
	        widget.parentId = opt.parentId || '';
	        widget.datachartId = opt.datachartId || '';
	        widget.viewIds = opt.viewIds || [];
	        widget.relations = opt.relations || [];
	        widget.config.originalType = widgetMeta$3.originalType;
	        widget.config.type = 'container';
	        widget.config.name = opt.name || '';
	        widget.config.customConfig.props = [
	            _assign({}, initTabsTpl()),
	            _assign({}, initTitleTpl()),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initBorderTpl()),
	        ];
	        var newTabId = "tab_".concat(uuidv4());
	        var content = {
	            itemMap: (_a = {},
	                _a[newTabId] = {
	                    index: Date.now(),
	                    tabId: newTabId,
	                    name: 'tab',
	                    childWidgetId: '',
	                },
	                _a),
	        };
	        widget.config.content = content;
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$3, key);
	    },
	    getDropDownList: function () {
	        var list = [
	            {
	                key: 'edit',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'delete',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'lock',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'group',
	                renderMode: ['edit'],
	            },
	        ];
	        return list;
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	    getCustomConfig: function (props) {
	        var _a = __read(getJsonConfigs(props, ['tabGroup'], ['align', 'position']), 2), align = _a[0], position = _a[1];
	        return {
	            align: align,
	            position: position,
	        };
	    },
	};
	var tabProto = {
	    originalType: widgetMeta$3.originalType,
	    meta: widgetMeta$3,
	    toolkit: widgetToolkit$3,
	};

	var initTimerTpl = function () {
	    return {
	        label: 'timer.timerGroup',
	        key: 'timerGroup',
	        comType: 'group',
	        rows: [
	            {
	                label: 'timer.time',
	                key: 'time',
	                value: TimeDefault,
	                comType: 'timerFormat',
	            },
	            {
	                label: 'timer.font',
	                key: 'font',
	                value: _assign(_assign({}, FONT_DEFAULT), { fontSize: '20' }),
	                comType: 'font',
	            },
	        ],
	    };
	};
	var timerI18N = {
	    zh: {
	        timerGroup: '时间配置',
	        time: '时间',
	        font: '字体',
	    },
	    en: {
	        timerGroup: 'Timer Config',
	        time: 'Time',
	        font: 'Font',
	    },
	};
	var NameI18N$2 = {
	    zh: '时钟',
	    en: 'Timer',
	};
	var widgetMeta$2 = {
	    icon: 'time-widget',
	    originalType: ORIGINAL_TYPE_MAP.timer,
	    canWrapped: true,
	    controllable: false,
	    linkable: false,
	    canFullScreen: true,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: 'timer',
	                widgetName: NameI18N$2.zh,
	                action: {},
	                title: TitleI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                timer: timerI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: 'timer',
	                widgetName: NameI18N$2.en,
	                action: {},
	                title: TitleI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                timer: timerI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$2 = {
	    create: function (opt) {
	        var widget = widgetTpl();
	        widget.id = widgetMeta$2.originalType + widget.id;
	        widget.parentId = opt.parentId || '';
	        widget.viewIds = opt.viewIds || [];
	        widget.relations = opt.relations || [];
	        widget.config.originalType = widgetMeta$2.originalType;
	        widget.config.type = 'media';
	        widget.config.name = opt.name || '';
	        widget.config.rect.height = 100;
	        widget.config.pRect.height = 3;
	        widget.config.customConfig.props = [
	            _assign({}, initTimerTpl()),
	            _assign({}, initTitleTpl()),
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	        ];
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$2, key);
	    },
	    edit: function () { },
	    save: function () { },
	    getDropDownList: function () {
	        var list = [
	            {
	                key: 'edit',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'delete',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'lock',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'group',
	                renderMode: ['edit'],
	            },
	        ];
	        return list;
	    },
	    getTimer: function (props) {
	        var _a = __read(getJsonConfigs(props, ['timerGroup'], ['time', 'font']), 2), time = _a[0], font = _a[1];
	        return {
	            time: time,
	            font: font,
	        };
	    },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var timerProto = {
	    originalType: widgetMeta$2.originalType,
	    meta: widgetMeta$2,
	    toolkit: widgetToolkit$2,
	};

	var initVideoTpl = function () {
	    return {
	        label: 'video.videoGroup',
	        key: 'videoGroup',
	        comType: 'group',
	        rows: [
	            {
	                label: 'video.src',
	                key: 'src',
	                value: 'https://prod-streaming-video-msn-com.akamaized.net/a75a7d73-21ab-4ac9-8c30-890433965c24/e9f6bdcb-eba0-4eca-b9d2-60d3415bf65f.mp4',
	                comType: 'input',
	            },
	            {
	                label: 'video.width',
	                key: 'width',
	                value: '100%',
	                comType: 'input',
	            },
	            {
	                label: 'video.height',
	                key: 'height',
	                value: '100%',
	                comType: 'input',
	            },
	            {
	                label: 'video.autoPlay',
	                key: 'autoPlay',
	                value: true,
	                comType: 'checkbox',
	            },
	        ],
	    };
	};
	var videoI18N = {
	    zh: {
	        videoGroup: '视频配置',
	        src: '嵌入地址',
	        width: '宽度',
	        height: '高度',
	        autoPlay: '自动播放',
	    },
	    en: {
	        videoGroup: 'video Config',
	        src: 'URL',
	        width: 'Video Width',
	        height: 'Video Height',
	        autoPlay: 'Auto Play',
	    },
	};
	var NameI18N$1 = {
	    zh: '视频',
	    en: 'Video',
	};
	var widgetMeta$1 = {
	    icon: 'video-widget',
	    originalType: ORIGINAL_TYPE_MAP.video,
	    canWrapped: true,
	    controllable: false,
	    linkable: false,
	    canFullScreen: true,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: 'video',
	                widgetName: NameI18N$1.zh,
	                action: {},
	                title: TitleI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                video: videoI18N.zh,
	                border: { borderGroup: '边框' },
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: 'video',
	                widgetName: NameI18N$1.en,
	                action: {},
	                title: TitleI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                video: videoI18N.en,
	                border: { borderGroup: 'Border' },
	            },
	        },
	    ],
	};
	var widgetToolkit$1 = {
	    create: function (opt) {
	        var widget = widgetTpl();
	        widget.id = widgetMeta$1.originalType + widget.id;
	        widget.parentId = opt.parentId || '';
	        widget.viewIds = opt.viewIds || [];
	        widget.relations = opt.relations || [];
	        widget.config.originalType = widgetMeta$1.originalType;
	        widget.config.type = 'media';
	        widget.config.name = opt.name || '';
	        widget.config.customConfig.props = [
	            _assign({}, initVideoTpl()),
	            _assign({}, initTitleTpl()),
	            _assign({}, initBackgroundTpl()),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBorderTpl()),
	        ];
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N$1, key);
	    },
	    edit: function () { },
	    save: function () { },
	    getDropDownList: function () {
	        var list = [
	            {
	                key: 'edit',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'delete',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'lock',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'group',
	                renderMode: ['edit'],
	            },
	        ];
	        return list;
	    },
	    getVideo: function (props) {
	        var _a = __read(getJsonConfigs(props, ['videoGroup'], ['src', 'width', 'height', 'autoPlay']), 4), src = _a[0], width = _a[1], height = _a[2], autoPlay = _a[3];
	        return {
	            src: src,
	            width: width,
	            height: height,
	            autoPlay: autoPlay,
	        };
	    },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	};
	var videoProto = {
	    originalType: widgetMeta$1.originalType,
	    meta: widgetMeta$1,
	    toolkit: widgetToolkit$1,
	};

	var NameI18N = {
	    zh: '轮播卡',
	    en: 'Carousel',
	};
	var carouselsI18N = {
	    zh: {
	        carouselGroup: '轮播卡配置',
	        position: '位置',
	        autoplay: '自动播放'
	    },
	    en: {
	        tabGroup: 'Carousel Config',
	        position: 'Position',
	        autoplay: 'Auto Play',
	    },
	};
	var widgetMeta = {
	    icon: 'carousel-widget',
	    originalType: ORIGINAL_TYPE_MAP.carousel,
	    canWrapped: false,
	    controllable: false,
	    linkable: false,
	    canFullScreen: true,
	    singleton: false,
	    i18ns: [
	        {
	            lang: 'zh-CN',
	            translation: {
	                desc: '轮播卡 容器组件可以切换',
	                widgetName: NameI18N.zh,
	                action: {},
	                title: TitleI18N.zh,
	                background: { backgroundGroup: '背景' },
	                padding: PaddingI18N.zh,
	                loopFetch: LoopFetchI18N.zh,
	                border: { borderGroup: '边框' },
	                carousel: carouselsI18N.zh,
	            },
	        },
	        {
	            lang: 'en-US',
	            translation: {
	                desc: 'Carousel container',
	                widgetName: NameI18N.en,
	                action: {},
	                title: TitleI18N.en,
	                background: { backgroundGroup: 'Background' },
	                padding: PaddingI18N.en,
	                loopFetch: LoopFetchI18N.en,
	                border: { borderGroup: 'Border' },
	                carousel: carouselsI18N.en,
	            },
	        },
	    ],
	};
	var initCarouselsTpl = function () {
	    return {
	        label: 'carousel.carouselGroup',
	        key: 'carouselGroup',
	        comType: 'group',
	        rows: [
	            {
	                label: 'carousel.position',
	                key: 'position',
	                default: 'bottom',
	                value: 'bottom',
	                comType: 'select',
	                options: {
	                    translateItemLabel: true,
	                    items: [
	                        { label: 'viz.common.enum.position.top', value: 'top' },
	                        { label: 'viz.common.enum.position.bottom', value: 'bottom' },
	                        { label: 'viz.common.enum.position.left', value: 'left' },
	                        { label: 'viz.common.enum.position.right', value: 'right' },
	                    ],
	                },
	            },
	            {
	                label: 'carousel.autoplay',
	                key: 'autoplay',
	                default: false,
	                value: false,
	                comType: 'checkbox'
	            },
	        ],
	    };
	};
	var widgetToolkit = {
	    create: function (opt) {
	        var _a;
	        var widget = widgetTpl();
	        widget.parentId = opt.parentId || '';
	        widget.datachartId = opt.datachartId || '';
	        widget.viewIds = opt.viewIds || [];
	        widget.relations = opt.relations || [];
	        widget.config.originalType = widgetMeta.originalType;
	        widget.config.type = 'container';
	        widget.config.name = opt.name || '';
	        widget.config.customConfig.props = [
	            _assign({}, initCarouselsTpl()),
	            _assign({}, initTitleTpl()),
	            _assign({}, initPaddingTpl()),
	            _assign({}, initBackgroundTpl(WHITE)),
	            _assign({}, initBorderTpl()),
	        ];
	        var newTabId = "carousel_".concat(uuidv4());
	        var content = {
	            itemMap: (_a = {},
	                _a[newTabId] = {
	                    index: Date.now(),
	                    tabId: newTabId,
	                    name: 'carousel',
	                    childWidgetId: '',
	                },
	                _a),
	        };
	        widget.config.content = content;
	        return widget;
	    },
	    getName: function (key) {
	        return initWidgetName(NameI18N, key);
	    },
	    getDropDownList: function () {
	        var list = [
	            {
	                key: 'edit',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'delete',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'lock',
	                renderMode: ['edit'],
	            },
	            {
	                key: 'group',
	                renderMode: ['edit'],
	            },
	        ];
	        return list;
	    },
	    edit: function () { },
	    save: function () { },
	    // lock() {},
	    // unlock() {},
	    // copy() {},
	    // paste() {},
	    // delete() {},
	    // changeTitle() {},
	    // getMeta() {},
	    // getWidgetName() {},
	    // //
	    getCustomConfig: function (props) {
	        var _a = __read(getJsonConfigs(props, ['carouselGroup'], ['autoplay', 'position']), 2), autoplay = _a[0], position = _a[1];
	        return {
	            autoplay: autoplay,
	            position: position,
	        };
	    },
	};
	var carouselProto = {
	    originalType: widgetMeta.originalType,
	    meta: widgetMeta,
	    toolkit: widgetToolkit,
	};

	var WidgetManager = /** @class */ (function () {
	    function WidgetManager() {
	        this.widgetProtoMap = {};
	    }
	    WidgetManager.getInstance = function () {
	        if (!this._instance) {
	            this._instance = new WidgetManager();
	        }
	        return this._instance;
	    };
	    WidgetManager.prototype.register = function (obj) {
	        if (this.widgetProtoMap[obj.originalType]) {
	            console.warn("Widget ".concat(obj.originalType, " already registered"));
	        }
	        this.widgetProtoMap[obj.originalType] = {
	            originalType: obj.originalType,
	            meta: obj.meta,
	            toolkit: obj.toolkit,
	        };
	    };
	    WidgetManager.prototype.allWidgetProto = function () {
	        return this.widgetProtoMap;
	    };
	    WidgetManager.prototype.widgetProto = function (originalType) {
	        return this.widgetProtoMap[originalType];
	    };
	    WidgetManager.prototype.meta = function (originalType) {
	        var _a;
	        return (_a = this.widgetProtoMap[originalType]) === null || _a === void 0 ? void 0 : _a.meta;
	    };
	    WidgetManager.prototype.toolkit = function (originalType) {
	        var _a;
	        return (_a = this.widgetProtoMap[originalType]) === null || _a === void 0 ? void 0 : _a.toolkit;
	    };
	    return WidgetManager;
	}());
	var widgetManagerInstance = WidgetManager.getInstance();

	var protoList = [
	    linkedChartProto,
	    ownedChartProto,
	    tabProto,
	    carouselProto,
	    imageProto,
	    videoProto,
	    richTextProto,
	    iframeProto,
	    timerProto,
	    queryBtnProto,
	    resetBtnProto,
	    dropdownListProto,
	    multiDropdownListProto,
	    checkboxGroupProto,
	    radioGroupProto,
	    textProto,
	    timeProto,
	    dropDownTree,
	    rangeTimeProto,
	    rangeValueProto,
	    valueProto,
	    sliderProto,
	    groupProto, //   group
	];
	protoList.forEach(function (item) {
	    widgetManagerInstance.register(item);
	});

	var commonBeta4Convert = function (newWidget, oldW) {
	    var _a;
	    newWidget.id = oldW.id;
	    newWidget.config.index = oldW.config.index;
	    newWidget.config.lock = oldW.config.lock;
	    newWidget.config.rect = oldW.config.rect;
	    newWidget.config.version = oldW.config.version;
	    newWidget.dashboardId = oldW.dashboardId;
	    // @ts-ignore
	    newWidget.config.pRect = oldW.config.pRect;
	    newWidget.config.content = oldW.config.content; //Todo
	    newWidget.config.name = oldW.config.name;
	    var oldConf = oldW.config;
	    if (oldW.config.tabId) {
	        newWidget.config.clientId = oldW.config.tabId;
	    }
	    if (oldW.config.mobileRect) {
	        newWidget.config.mRect = oldW.config.mobileRect;
	    }
	    (_a = newWidget.config.customConfig.props) === null || _a === void 0 ? void 0 : _a.forEach(function (prop) {
	        var _a, _b, _c, _d, _e;
	        // titleGroup name nameConfig
	        if (prop.key === 'titleGroup') {
	            var oNameConf_1 = oldConf.nameConfig;
	            (_a = prop.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                if (row.key === 'showTitle') {
	                    row.value = oNameConf_1.show;
	                }
	                if (row.key === 'textAlign') {
	                    row.value = oNameConf_1.textAlign;
	                }
	                if (row.key === 'font') {
	                    row.value = {
	                        fontFamily: oNameConf_1.fontFamily,
	                        fontSize: oNameConf_1.fontSize,
	                        fontWeight: oNameConf_1.fontWeight,
	                        fontStyle: oNameConf_1.fontStyle,
	                        color: oNameConf_1.color,
	                    };
	                }
	            });
	        }
	        // paddingGroup
	        if (prop.key === 'paddingGroup') {
	            var oPad_1 = oldConf.padding;
	            (_b = prop.rows) === null || _b === void 0 ? void 0 : _b.forEach(function (row) {
	                if (row.key === 'top') {
	                    row.value = oPad_1.top;
	                }
	                if (row.key === 'right') {
	                    row.value = oPad_1.right;
	                }
	                if (row.key === 'bottom') {
	                    row.value = oPad_1.bottom;
	                }
	                if (row.key === 'left') {
	                    row.value = oPad_1.left;
	                }
	            });
	        }
	        // loopFetchGroup
	        if (prop.key === 'loopFetchGroup') {
	            (_c = prop.rows) === null || _c === void 0 ? void 0 : _c.forEach(function (row) {
	                if (row.key === 'enable') {
	                    row.value = oldConf.autoUpdate;
	                }
	                if (row.key === 'interval') {
	                    row.value = oldConf.frequency;
	                }
	            });
	        }
	        // backgroundGroup
	        if (prop.key === 'backgroundGroup') {
	            (_d = prop.rows) === null || _d === void 0 ? void 0 : _d.forEach(function (row) {
	                if (row.key === 'background') {
	                    row.value = oldConf.background;
	                }
	            });
	        }
	        // borderGroup
	        if (prop.key === 'borderGroup') {
	            (_e = prop.rows) === null || _e === void 0 ? void 0 : _e.forEach(function (row) {
	                if (row.key === 'border') {
	                    row.value = oldConf.border;
	                }
	            });
	        }
	    });
	    return newWidget;
	};
	var convertChartWidgetToBeta4 = function (widget) {
	    var subType = widget.config.content.type;
	    var newWidget = {};
	    if (subType === 'dataChart') {
	        newWidget = widgetManagerInstance
	            .toolkit(ORIGINAL_TYPE_MAP.linkedChart)
	            .create(_assign({}, widget));
	    }
	    else {
	        newWidget = widgetManagerInstance
	            .toolkit(ORIGINAL_TYPE_MAP.ownedChart)
	            .create(_assign({}, widget));
	    }
	    newWidget = commonBeta4Convert(newWidget, widget);
	    newWidget.config.jumpConfig = widget.config.jumpConfig;
	    newWidget.config.linkageConfig = widget.config.linkageConfig;
	    return newWidget;
	};
	var convertContainerWidgetToBeta4 = function (widget) {
	    var _a;
	    var subType = widget.config.content.type;
	    if (subType === 'tab') {
	        /**
	           old data
	           {
	             "itemMap": {
	                   "de693d55-04ef-497c-b465-a2420abe1e05": {
	                       "tabId": "de693d55-04ef-497c-b465-a2420abe1e05",
	                       "name": "私有图表_7",
	                       "childWidgetId": "newWidget_0e970200-bc0e-4fc8-9de0-caea67e350f2",
	                       "config": {}
	                   },
	                   "8f44ec1e-4602-4db1-9ec9-ab1ac8543251": {
	                       "tabId": "8f44ec1e-4602-4db1-9ec9-ab1ac8543251",
	                       "name": "图片_5",
	                       "childWidgetId": "75e272ae570749468f94913cb9857203",
	                       "config": {}
	                   }
	               }
	           }
	    
	           */
	        /**
	           new data
	           {
	             "itemMap": {
	                "client_b17323f7-8670-4c71-a43f-86a02359b2f5": {
	                       "index": 1651831223742,
	                        "name": "Image",
	                        "tabId": "client_b17323f7-8670-4c71-a43f-86a02359b2f5",
	                        "childWidgetId": "226c8f69c42b41109fdcfd84d7b8a2da"
	              },
	               "client_6cf95a9a-4052-4809-88f2-bad52aff1d24": {
	                       "index": 1651833022936,
	                       "name": "tab*",
	                       "tabId": "client_6cf95a9a-4052-4809-88f2-bad52aff1d24",
	                      "childWidgetId": "a4134a55-b79d-4518-92dc-0631678b98c6"
	              }
	          }
	    }
	    
	           */
	        var newWidget = widgetManagerInstance.toolkit('tab').create(_assign({}, widget));
	        newWidget = commonBeta4Convert(newWidget, widget);
	        var itemMap = (_a = newWidget.config.content) === null || _a === void 0 ? void 0 : _a.itemMap;
	        if (!itemMap)
	            return newWidget;
	        var tabItems = Object.values(itemMap);
	        var newIndex_1 = Number(Date.now());
	        tabItems.forEach(function (item) {
	            item.index = newIndex_1;
	            delete item.config;
	            newIndex_1++;
	        });
	        return newWidget;
	    }
	};
	/**
	 *
	 *
	 * @param {WidgetBeta3} widget
	 * @return {*}
	 */
	var convertMediaWidgetToBeta4 = function (widget) {
	    var _a, _b;
	    var subType = widget.config.content.type;
	    if (subType === 'image') {
	        var newWidget = widgetManagerInstance.toolkit('image').create(_assign({}, widget));
	        newWidget = commonBeta4Convert(newWidget, widget);
	        newWidget.config.content = {};
	        return newWidget;
	    }
	    if (subType === 'richText') {
	        /**
	         * old data
	        {
	        "content": {
	            "type": "richText",
	            "richTextConfig": {
	                "content": {
	                    "ops": [
	                        {
	                            "insert": "\n"
	                        }
	                    ]
	                }
	            }
	        }
	        }
	         */
	        var newWidget = widgetManagerInstance.toolkit('richText').create(_assign({}, widget));
	        newWidget = commonBeta4Convert(newWidget, widget);
	        // getWidgetIframe;
	        newWidget.config.content = {
	            richText: newWidget.config.content.richTextConfig,
	        };
	        return newWidget;
	    }
	    if (subType === 'iframe') {
	        /**
	         * old data
	        {
	        "content": {
	            "type": "iframe",
	            "iframeConfig": {
	                "src": "https://ant.design/components/overview-cn/"
	            }
	        }
	    }
	        */
	        var newWidget = widgetManagerInstance.toolkit('iframe').create(_assign({}, widget));
	        newWidget = commonBeta4Convert(newWidget, widget);
	        var oldConf_1 = widget.config.content.iframeConfig;
	        (_a = newWidget.config.customConfig.props) === null || _a === void 0 ? void 0 : _a.forEach(function (prop) {
	            var _a;
	            // iframeGroup
	            if (prop.key === 'iframeGroup') {
	                (_a = prop.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                    if (row.key === 'src') {
	                        row.value = oldConf_1.src;
	                    }
	                });
	            }
	        });
	        newWidget.config.content = {};
	        return newWidget;
	    }
	    if (subType === 'video') {
	        var newWidget = widgetManagerInstance.toolkit('video').create(_assign({}, widget));
	        newWidget = commonBeta4Convert(newWidget, widget);
	        newWidget.config.content = {};
	        return newWidget;
	    }
	    if (subType === 'timer') {
	        // return {
	        //   label: 'timer.timerGroup',
	        //   key: 'timerGroup',
	        //   comType: 'group',
	        //   rows: [
	        //     {
	        //       label: 'timer.time',
	        //       key: 'time',
	        //       value: TimeDefault,
	        //       comType: 'timerFormat',
	        //     },
	        //     {
	        //       label: 'timer.font',
	        //       key: 'font',
	        //       value: { ...FontDefault, fontSize: '20' },
	        //       comType: 'font',
	        //     },
	        //   ],
	        // };
	        /**
	        * old data
	        "content": {
	            "type": "timer",
	            "timerConfig": {
	                "time": {
	                    "timeFormat": "YYYY-MM-DD HH:mm:ss",
	                    "timeDuration": 1000
	                },
	                "font": {
	                    "fontFamily": "PingFang SC",
	                    "fontSize": "18",
	                    "fontWeight": "bolder",
	                    "fontStyle": "normal",
	                    "color": ""
	                }
	            }
	        }
	      */
	        var newWidget = widgetManagerInstance.toolkit('timer').create(_assign({}, widget));
	        newWidget = commonBeta4Convert(newWidget, widget);
	        var oldConf_2 = widget.config.content.timerConfig;
	        (_b = newWidget.config.customConfig.props) === null || _b === void 0 ? void 0 : _b.forEach(function (prop) {
	            var _a;
	            // timerGroup
	            if (!oldConf_2)
	                return;
	            if (prop.key === 'timerGroup') {
	                (_a = prop.rows) === null || _a === void 0 ? void 0 : _a.forEach(function (row) {
	                    if (row.key === 'time') {
	                        var newVal = {
	                            format: oldConf_2.time.timeFormat,
	                            duration: oldConf_2.time.timeDuration,
	                        };
	                        row.value = newVal;
	                    }
	                    if (row.key === 'font') {
	                        var newVal = oldConf_2.font;
	                        row.value = newVal;
	                    }
	                });
	            }
	        });
	        newWidget.config.content = {};
	        return newWidget;
	    }
	};
	var convertBtnWidgetToBeta4 = function (widget) {
	    var subType = widget.config.content.type;
	    var newWidget = {};
	    if (subType === 'query') {
	        newWidget = widgetManagerInstance.toolkit('queryBtn').create(_assign({}, widget));
	    }
	    else {
	        newWidget = widgetManagerInstance.toolkit('resetBtn').create(_assign({}, widget));
	    }
	    newWidget = commonBeta4Convert(newWidget, widget);
	    return newWidget;
	};
	var convertControllerToBeta4 = function (widget) {
	    var subType = widget.config.content.type;
	    var newWidget = {};
	    newWidget = widgetManagerInstance.toolkit(subType).create(_assign({}, widget));
	    newWidget = commonBeta4Convert(newWidget, widget);
	    return newWidget;
	};
	var convertToBeta4AutoWidget = function (boardType, widget) {
	    if (!widget)
	        return undefined;
	    if (boardType === 'free')
	        return widget;
	    if (!widget.config.pRect) {
	        widget.config.pRect = widget.config.rect;
	        var newRect = {
	            x: Math.ceil(Math.random() * 200),
	            y: Math.ceil(Math.random() * 200),
	            width: 400,
	            height: 300,
	        };
	        widget.config.rect = newRect;
	    }
	    return widget;
	};
	/**
	 *
	 *
	 * @param {WidgetBeta3} widget
	 * @return {*}
	 */
	var convertWidgetToBeta4 = function (widget) {
	    var widgetType = widget.config.type;
	    // chart
	    if (widgetType === 'chart') {
	        return convertChartWidgetToBeta4(widget);
	    }
	    // media
	    if (widgetType === 'media') {
	        return convertMediaWidgetToBeta4(widget);
	    }
	    // container
	    if (widgetType === 'container') {
	        return convertContainerWidgetToBeta4(widget);
	    }
	    // query
	    if (widgetType === 'query' || widgetType === 'reset') {
	        return convertBtnWidgetToBeta4(widget);
	    }
	    // reset
	    if (widgetType === 'controller') {
	        return convertControllerToBeta4(widget);
	    }
	};

	/**
	 *
	 * JSON.parse(relation.config)
	 * @param {ServerRelation[]} [relations=[]]
	 * @return {*}  {Relation[]}
	 */
	var convertWidgetRelationsToObj = function (relations) {
	    if (relations === void 0) { relations = []; }
	    if (!Array.isArray(relations)) {
	        return [];
	    }
	    return relations
	        .map(function (relation) {
	        try {
	            return _assign(_assign({}, relation), { config: JSON.parse(relation.config) });
	        }
	        catch (error) {
	            return _assign({}, relation);
	        }
	    })
	        .filter(function (re) { return !!re; });
	};
	/**
	 *
	 * migrate beta0
	 * @param {WidgetBeta3} [widget]
	 * @return {*}
	 */
	var beta0$1 = function (widget) {
	    var _a;
	    if (!widget)
	        return undefined;
	    if (!versionCanDo(APP_VERSION_BETA_0, widget === null || widget === void 0 ? void 0 : widget.config.version))
	        return widget;
	    // 1.放弃了 filter type 新的是 controller
	    if (widget.config.type === 'filter') {
	        return undefined;
	    }
	    // 2.migration about font 5 旧数据没有 widget.config.nameConfig。统一把旧数据填充上fontDefault
	    widget.config.nameConfig = _assign(_assign({}, FONT_DEFAULT), widget.config.nameConfig);
	    // 3.处理 assistViewFields 旧数据 assistViewFields 是 string beta0 使用数组存储的
	    if (widget.config.type === 'controller') {
	        var content = widget.config.content;
	        if (typeof ((_a = content === null || content === void 0 ? void 0 : content.config) === null || _a === void 0 ? void 0 : _a.assistViewFields) === 'string') {
	            content.config.assistViewFields = content.config.assistViewFields.split(VALUE_SPLITTER);
	        }
	    }
	    widget.config.version = APP_VERSION_BETA_0;
	    return widget;
	};
	var beta2$1 = function (widget) {
	    if (!widget)
	        return undefined;
	    if (!versionCanDo(APP_VERSION_BETA_2, widget === null || widget === void 0 ? void 0 : widget.config.version))
	        return widget;
	    // widget.lock
	    if (!widget.config.lock) {
	        widget.config.lock = false;
	    }
	    widget.config.version = APP_VERSION_BETA_2;
	    return widget;
	};
	// beta3 没有变动
	// beta4 widget 重构 支持group
	var beta4$1 = function (boardType, widget) {
	    if (!widget)
	        return undefined;
	    if (!versionCanDo(APP_VERSION_BETA_4, widget === null || widget === void 0 ? void 0 : widget.config.version))
	        return widget;
	    var beta4Widget = widget;
	    beta4Widget = convertToBeta4AutoWidget(boardType, beta4Widget);
	    if (widget.config.version !== APP_VERSION_BETA_4) {
	        beta4Widget = convertWidgetToBeta4(beta4Widget);
	    }
	    return beta4Widget;
	};
	var beta4_2 = function (boardType, widget) {
	    var _a, _b, _c, _d;
	    if (!widget) {
	        return undefined;
	    }
	    if (!versionCanDo(APP_VERSION_BETA_4_2, widget === null || widget === void 0 ? void 0 : widget.config.version)) {
	        return widget;
	    }
	    var beta4Widget = widget;
	    var allowedOriginalTypes = [
	        ORIGINAL_TYPE_MAP.ownedChart,
	        ORIGINAL_TYPE_MAP.linkedChart,
	    ];
	    if (!allowedOriginalTypes.includes((_a = beta4Widget === null || beta4Widget === void 0 ? void 0 : beta4Widget.config) === null || _a === void 0 ? void 0 : _a.originalType)) {
	        return beta4Widget;
	    }
	    if (!((_c = (_b = beta4Widget === null || beta4Widget === void 0 ? void 0 : beta4Widget.config) === null || _b === void 0 ? void 0 : _b.customConfig) === null || _c === void 0 ? void 0 : _c.interactions)) {
	        if ((_d = beta4Widget === null || beta4Widget === void 0 ? void 0 : beta4Widget.config) === null || _d === void 0 ? void 0 : _d.customConfig) {
	            beta4Widget.config.customConfig.interactions = __spreadArray([], __read(initInteractionTpl()), false);
	            beta4Widget.config.version = APP_VERSION_BETA_4_2;
	        }
	    }
	    return beta4Widget;
	};
	var RC0 = function (widget) {
	    var _a, _b, _c, _d, _e, _f, _g;
	    if (!widget) {
	        return undefined;
	    }
	    if (!versionCanDo(APP_VERSION_RC_0, (_c = (_b = (_a = widget === null || widget === void 0 ? void 0 : widget.config) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.dataChart) === null || _c === void 0 ? void 0 : _c.config)) {
	        return widget;
	    }
	    var RC0Widget = widget;
	    if ((_g = (_f = (_e = (_d = RC0Widget === null || RC0Widget === void 0 ? void 0 : RC0Widget.config) === null || _d === void 0 ? void 0 : _d.content) === null || _e === void 0 ? void 0 : _e.dataChart) === null || _f === void 0 ? void 0 : _f.config) === null || _g === void 0 ? void 0 : _g.computedFields) {
	        RC0Widget.config.content.dataChart.config.computedFields =
	            RC0Widget.config.content.dataChart.config.computedFields.map(function (v) {
	                if (!v.name) {
	                    return _assign(_assign({}, v), { name: v.id });
	                }
	                return v;
	            });
	        RC0Widget.config.content.dataChart.config.version = APP_VERSION_RC_0;
	    }
	    return RC0Widget;
	};
	var finaleWidget = function (widget) {
	    if (!widget)
	        return undefined;
	    widget.config = setLatestVersion(widget.config);
	    return widget;
	};
	var parseServerWidget = function (sWidget) {
	    try {
	        sWidget.config = JSON.parse(sWidget.config);
	    }
	    catch (error) {
	        return undefined;
	    }
	    sWidget.relations = convertWidgetRelationsToObj(sWidget.relations);
	    return sWidget;
	};
	/**
	 *
	 * migrateWidgets
	 * @param {ServerWidget[]} widgets
	 * @return {*}
	 */
	var migrateWidgets = function (widgets, boardType) {
	    if (!Array.isArray(widgets)) {
	        return [];
	    }
	    var targetWidgets = widgets
	        .map(function (sWidget) {
	        return parseServerWidget(sWidget);
	    })
	        .filter(function (widget) { return !!widget; })
	        .map(function (widget) {
	        var resWidget = beta0$1(widget);
	        resWidget = beta2$1(resWidget);
	        var beta4Widget = beta4$1(boardType, resWidget);
	        beta4_2(boardType, resWidget);
	        RC0(beta4Widget);
	        return finaleWidget(beta4Widget);
	    })
	        .filter(function (widget) { return !!widget; });
	    return targetWidgets;
	};

	var BoardTypes = ['auto', 'free'];
	var DeviceType;
	(function (DeviceType) {
	    DeviceType["Desktop"] = "Desktop";
	    DeviceType["Mobile"] = "Mobile";
	})(DeviceType || (DeviceType = {}));

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var parseBoardConfig = function (boardConfig) {
	    try {
	        var nextConfig = JSON.parse(boardConfig);
	        if (!BoardTypes.includes(nextConfig === null || nextConfig === void 0 ? void 0 : nextConfig.type)) {
	            return getInitBoardConfigBeta3('auto');
	        }
	        return nextConfig;
	    }
	    catch (error) {
	        var nextConfig = getInitBoardConfigBeta3('auto');
	        return nextConfig;
	    }
	};
	var beta0 = function (config) {
	    if (!versionCanDo(APP_VERSION_BETA_0, config.version))
	        return config;
	    // 1. initialQuery 新增属性 检测没有这个属性就设置为 true,如果已经设置为false，则保持false
	    if (!config.hasOwnProperty('initialQuery')) {
	        config.initialQuery = true;
	    }
	    // 2.1 新增移动端属性 mobileMargin
	    if (!(config === null || config === void 0 ? void 0 : config.mobileMargin)) {
	        config.mobileMargin = [MIN_MARGIN, MIN_MARGIN];
	    }
	    // 2.2 新增移动端属性 mobileContainerPadding
	    if (!(config === null || config === void 0 ? void 0 : config.mobileContainerPadding)) {
	        config.mobileContainerPadding = [MIN_PADDING, MIN_PADDING];
	    }
	    // 3 QueryButton and ResetButton
	    config.hasQueryControl = Boolean(config.hasQueryControl);
	    config.hasResetControl = Boolean(config.hasQueryControl);
	    // reset config.version
	    config.version = APP_VERSION_BETA_0;
	    return config;
	};
	var beta2 = function (config) {
	    if (!versionCanDo(APP_VERSION_BETA_2, config.version))
	        return config;
	    if (!config.allowOverlap) {
	        config.allowOverlap = false;
	    }
	    config.version = APP_VERSION_BETA_2;
	    return config;
	};
	var beta4 = function (config) {
	    if (!versionCanDo(APP_VERSION_BETA_4, config.version))
	        return config;
	    if (config.type === 'auto') {
	        var newConfig = config.jsonConfig
	            ? config
	            : getInitBoardConfig('auto');
	        if (config.background || config.initialQuery) {
	            newConfig.jsonConfig.props.forEach(function (item) {
	                var _a, _b;
	                if (item.key === 'basic') {
	                    item.rows.forEach(function (row) {
	                        if (row.key === 'initialQuery') {
	                            row.value = config.initialQuery;
	                        }
	                        if (row.key === 'allowOverlap') {
	                            row.value = config.allowOverlap;
	                        }
	                    });
	                }
	                if (item.key === 'background') {
	                    if ((_b = (_a = item === null || item === void 0 ? void 0 : item.rows) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.default) {
	                        item.rows[0].value = config.background;
	                    }
	                }
	                if (item.key === 'space') {
	                    item.rows.forEach(function (row) {
	                        if (row.key === 'paddingTB') {
	                            row.value = config.containerPadding[1];
	                        }
	                        if (row.key === 'paddingLR') {
	                            row.value = config.containerPadding[0];
	                        }
	                        if (row.key === 'marginTB') {
	                            row.value = config.margin[1];
	                        }
	                        if (row.key === 'marginLR') {
	                            row.value = config.margin[0];
	                        }
	                    });
	                }
	                if (item.key === 'mSpace') {
	                    item.rows.forEach(function (row) {
	                        if (row.key === 'paddingTB') {
	                            row.value = config.mobileContainerPadding[0];
	                        }
	                        if (row.key === 'paddingLR') {
	                            row.value = config.mobileContainerPadding[1];
	                        }
	                        if (row.key === 'marginTB') {
	                            row.value = config.mobileMargin[0];
	                        }
	                        if (row.key === 'marginLR') {
	                            row.value = config.mobileMargin[1];
	                        }
	                    });
	                }
	            });
	        }
	        return newConfig;
	    }
	    else {
	        var newConfig = config.jsonConfig
	            ? config
	            : getInitBoardConfig('free');
	        if (config.background || config.initialQuery) {
	            newConfig.jsonConfig.props.forEach(function (item) {
	                var _a, _b;
	                if (item.key === 'basic') {
	                    item.rows.forEach(function (row) {
	                        if (row.key === 'initialQuery') {
	                            row.value = config.initialQuery;
	                        }
	                        if (row.key === 'scaleMode') {
	                            row.value = config.scaleMode;
	                        }
	                    });
	                }
	                if (item.key === 'size') {
	                    item.rows.forEach(function (row) {
	                        if (row.key === 'width') {
	                            row.value = config.width;
	                        }
	                        if (row.key === 'height') {
	                            row.value = config.height;
	                        }
	                    });
	                }
	                if (item.key === 'background') {
	                    if ((_b = (_a = item === null || item === void 0 ? void 0 : item.rows) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.default) {
	                        item.rows[0].value = config.background;
	                    }
	                }
	            });
	        }
	        return newConfig;
	    }
	};
	var migrateBoardConfig = function (boardConfig) {
	    var config = parseBoardConfig(boardConfig);
	    config = beta0(config);
	    config = beta2(config);
	    config = beta4(config);
	    config = setLatestVersion(config);
	    return config;
	};

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var initAutoBoardConfig = function () {
	    var config = {
	        type: 'auto',
	        version: APP_CURRENT_VERSION,
	        jsonConfig: {
	            props: [
	                {
	                    label: 'basic.basic',
	                    key: 'basic',
	                    comType: 'group',
	                    rows: [
	                        {
	                            label: 'basic.initialQuery',
	                            key: 'initialQuery',
	                            value: true,
	                            comType: 'switch',
	                        },
	                        {
	                            label: 'basic.allowOverlap',
	                            key: 'allowOverlap',
	                            value: false,
	                            comType: 'switch',
	                        },
	                    ],
	                },
	                {
	                    label: 'space.space',
	                    key: 'space',
	                    comType: 'group',
	                    rows: [
	                        {
	                            label: 'space.paddingTB',
	                            key: 'paddingTB',
	                            default: 8,
	                            value: 8,
	                            comType: 'inputNumber',
	                        },
	                        {
	                            label: 'space.paddingLR',
	                            key: 'paddingLR',
	                            default: 8,
	                            value: 8,
	                            comType: 'inputNumber',
	                        },
	                        {
	                            label: 'space.marginTB',
	                            key: 'marginTB',
	                            default: 8,
	                            value: 8,
	                            comType: 'inputNumber',
	                        },
	                        {
	                            label: 'space.marginLR',
	                            key: 'marginLR',
	                            default: 8,
	                            value: 8,
	                            comType: 'inputNumber',
	                        },
	                    ],
	                },
	                {
	                    label: 'mSpace.mSpace',
	                    key: 'mSpace',
	                    comType: 'group',
	                    rows: [
	                        {
	                            label: 'mSpace.paddingTB',
	                            key: 'paddingTB',
	                            default: 8,
	                            value: 8,
	                            comType: 'inputNumber',
	                        },
	                        {
	                            label: 'mSpace.paddingLR',
	                            key: 'paddingLR',
	                            default: 8,
	                            value: 8,
	                            comType: 'inputNumber',
	                        },
	                        {
	                            label: 'mSpace.marginTB',
	                            key: 'marginTB',
	                            default: 8,
	                            value: 8,
	                            comType: 'inputNumber',
	                        },
	                        {
	                            label: 'mSpace.marginLR',
	                            key: 'marginLR',
	                            default: 8,
	                            value: 8,
	                            comType: 'inputNumber',
	                        },
	                    ],
	                },
	                {
	                    label: 'background.background',
	                    key: 'background',
	                    comType: 'group',
	                    rows: [
	                        {
	                            label: 'background.background',
	                            key: 'background',
	                            default: {
	                                color: 'transparent',
	                                image: '',
	                                size: '100% 100%',
	                                repeat: 'no-repeat',
	                            },
	                            value: {
	                                color: 'transparent',
	                                image: '',
	                                size: '100% 100%',
	                                repeat: 'no-repeat',
	                            },
	                            comType: 'background',
	                        },
	                    ],
	                },
	            ],
	            i18ns: [
	                {
	                    lang: 'zh-CN',
	                    translation: {
	                        basic: {
	                            basic: '基本属性',
	                            initialQuery: '开启初始化查询',
	                            allowOverlap: '允许组件重叠',
	                        },
	                        space: {
	                            space: '间距',
	                            paddingTB: '画布上下间距',
	                            paddingLR: '画布左右间距',
	                            marginTB: '组件上下间距',
	                            marginLR: '组件左右间距',
	                        },
	                        mSpace: {
	                            mSpace: '移动端间距',
	                            paddingTB: '画布上下间距',
	                            paddingLR: '画布左右间距',
	                            marginTB: '组件上下间距',
	                            marginLR: '组件左右间距',
	                        },
	                        background: {
	                            background: '背景',
	                        },
	                    },
	                },
	                {
	                    lang: 'en-US',
	                    translation: {
	                        basic: {
	                            basic: 'Basic',
	                            initialQuery: 'Open Init Query',
	                            allowOverlap: 'Allow Overlap',
	                        },
	                        space: {
	                            space: 'Space',
	                            paddingTB: 'Board Padding TB',
	                            paddingLR: 'Board Padding LR',
	                            marginTB: 'Widget Margin TB',
	                            marginLR: 'Widget Margin LR',
	                        },
	                        mSpace: {
	                            mSpace: 'Mobile Space',
	                            paddingTB: 'Board Padding TB',
	                            paddingLR: 'Board Padding LR',
	                            marginTB: 'Widget Margin TB',
	                            marginLR: 'Widget Margin LR',
	                        },
	                        background: {
	                            background: 'Background',
	                        },
	                    },
	                },
	            ],
	        },
	    };
	    return config;
	};

	/**
	 * Datart Vite
	 *
	 * Copyright 2021
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var initFreeBoardConfig = function () {
	    var config = {
	        type: 'free',
	        version: APP_CURRENT_VERSION,
	        jsonConfig: {
	            props: [
	                {
	                    label: 'basic.basic',
	                    key: 'basic',
	                    comType: 'group',
	                    rows: [
	                        {
	                            label: 'basic.initialQuery',
	                            key: 'initialQuery',
	                            default: true,
	                            value: true,
	                            comType: 'switch',
	                        },
	                        // TODO Step 步长
	                        // {
	                        //   label: 'basic.Step',
	                        //   key: 'Step',
	                        //   default: 1,
	                        //   value: 5,
	                        //   comType: 'inputNumber',
	                        // },
	                        {
	                            label: 'basic.scaleMode.scaleMode',
	                            key: 'scaleMode',
	                            default: 'scaleWidth',
	                            value: 'scaleWidth',
	                            comType: 'select',
	                            options: {
	                                translateItemLabel: true,
	                                items: [
	                                    {
	                                        label: '@global@.basic.scaleMode.scaleWidth',
	                                        key: 'scaleWidth',
	                                        value: 'scaleWidth',
	                                    },
	                                    {
	                                        label: '@global@.basic.scaleMode.scaleHeight',
	                                        key: 'scaleHeight',
	                                        value: 'scaleHeight',
	                                    },
	                                    {
	                                        label: '@global@.basic.scaleMode.scaleFull',
	                                        key: 'scaleFull',
	                                        value: 'scaleFull',
	                                    },
	                                    {
	                                        label: '@global@.basic.scaleMode.noScale',
	                                        key: 'noScale',
	                                        value: 'noScale',
	                                    },
	                                ],
	                            },
	                        },
	                    ],
	                },
	                {
	                    label: 'size.size',
	                    key: 'size',
	                    comType: 'group',
	                    rows: [
	                        {
	                            label: 'size.width',
	                            key: 'width',
	                            default: 1920,
	                            value: 1920,
	                            comType: 'inputNumber',
	                        },
	                        {
	                            label: 'size.height',
	                            key: 'height',
	                            default: 1080,
	                            value: 1080,
	                            comType: 'inputNumber',
	                        },
	                    ],
	                },
	                {
	                    label: 'background.background',
	                    key: 'background',
	                    comType: 'group',
	                    rows: [
	                        {
	                            label: 'background.background',
	                            key: 'background',
	                            default: {
	                                color: 'transparent',
	                                image: '',
	                                size: '100% 100%',
	                                repeat: 'no-repeat',
	                            },
	                            value: {
	                                color: 'transparent',
	                                image: '',
	                                size: '100% 100%',
	                                repeat: 'no-repeat',
	                            },
	                            comType: 'background',
	                        },
	                    ],
	                },
	            ],
	            i18ns: [
	                {
	                    lang: 'zh-CN',
	                    translation: {
	                        basic: {
	                            basic: '基础',
	                            initialQuery: '开启初始化查询',
	                            scaleMode: {
	                                scaleMode: '缩放模式',
	                                scaleWidth: '等比宽度缩放',
	                                scaleHeight: '等比高度缩放',
	                                scaleFull: '全屏缩放',
	                                noScale: '不缩放',
	                            },
	                        },
	                        size: {
	                            size: '尺寸',
	                            width: '宽度',
	                            height: '高度',
	                        },
	                        background: {
	                            background: '背景',
	                        },
	                    },
	                },
	                {
	                    lang: 'en-US',
	                    translation: {
	                        basic: {
	                            basic: 'Basic',
	                            initialQuery: 'Open Init Query',
	                            scaleMode: {
	                                scaleMode: 'Scale Mode',
	                                scaleWidth: 'Scale Width',
	                                scaleHeight: 'Scale Height',
	                                scaleFull: 'Scale Full',
	                                noScale: 'No Scale',
	                            },
	                        },
	                        size: {
	                            size: 'Size',
	                            width: 'Width',
	                            height: 'Height',
	                        },
	                        space: {
	                            space: 'Space',
	                            paddingTB: 'Padding TB',
	                            paddingLR: 'Padding LR',
	                            marginTB: 'Margin TB',
	                            marginLR: 'Margin LR',
	                        },
	                        background: {
	                            background: 'Background',
	                        },
	                    },
	                },
	            ],
	        },
	    };
	    return config;
	};

	var getDashBoardByResBoard = function (data) {
	    return {
	        id: data.id,
	        queryVariables: data.queryVariables,
	        name: data.name,
	        orgId: data.orgId,
	        parentId: data.parentId,
	        status: data.status,
	        thumbnail: data.thumbnail,
	        index: data.index,
	        config: preprocessBoardConfig(migrateBoardConfig(data.config), data.id),
	        permissions: data.permissions,
	    };
	};
	var preprocessBoardConfig = function (config, boardId) {
	    config.jsonConfig.props.forEach(function (item) {
	        var _a, _b;
	        if (item.key === 'background') {
	            var rowsValue = (_b = (_a = item === null || item === void 0 ? void 0 : item.rows) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.value;
	            if (rowsValue === null || rowsValue === void 0 ? void 0 : rowsValue.image) {
	                rowsValue.image = adaptBoardImageUrl(rowsValue.image, boardId);
	            }
	        }
	    });
	    return config;
	};
	var getInitBoardConfigBeta3 = function (boardType) {
	    var dashboardConfig = {
	        type: boardType || 'auto',
	        version: '',
	        background: BackgroundDefault,
	        widgetDefaultSettings: {
	            background: AutoBoardWidgetBackgroundDefault,
	            boxShadow: false,
	        },
	        maxWidgetIndex: 0,
	        initialQuery: true,
	        hasQueryControl: false,
	        hasResetControl: false,
	        // auto
	        allowOverlap: false,
	        margin: [16, 16],
	        containerPadding: [16, 16],
	        cols: LAYOUT_COLS_MAP,
	        mobileMargin: [MIN_MARGIN, MIN_MARGIN],
	        mobileContainerPadding: [MIN_PADDING, MIN_PADDING],
	        // free
	        width: 1920,
	        height: 1080,
	        gridStep: [10, 10],
	        scaleMode: 'scaleWidth',
	    };
	    return dashboardConfig;
	};
	var getInitBoardConfig = function (boardType) {
	    if (boardType === 'auto') {
	        return initAutoBoardConfig();
	    }
	    else {
	        return initFreeBoardConfig();
	    }
	};
	// dataCharts
	var getDataChartsByServer = function (serverDataCharts, view) {
	    var dataCharts = serverDataCharts.map(function (item) {
	        var _a, _b;
	        item.config = migrateChartConfig(item.config);
	        var config = JSON.parse(item.config || '{}');
	        var viewComputerFields = ((_b = JSON.parse(((_a = view.find(function (v) { return v.id === item.viewId; })) === null || _a === void 0 ? void 0 : _a.model) || '{}')) === null || _b === void 0 ? void 0 : _b.computedFields) || [];
	        config.computedFields = mergeChartAndViewComputedField(viewComputerFields, config.computedFields);
	        return _assign(_assign({}, item), { config: config });
	    });
	    return dataCharts;
	};
	var getChartDataView = function (views, dataCharts) {
	    var viewViews = [];
	    views.forEach(function (view) {
	        var dataChart = dataCharts.find(function (dc) { return dc.viewId === view.id; });
	        if (view) {
	            view = migrationViewConfig$1(view);
	        }
	        if (view === null || view === void 0 ? void 0 : view.model) {
	            view.model = beginViewModelMigration$1(view.model, view.type);
	        }
	        var meta = transformMeta(view.model);
	        var viewComputedFields = JSON.parse(view.model || '{}').computedFields || [];
	        var computedFields = createDateLevelComputedFieldForConfigComputedFields(meta, mergeChartAndViewComputedField(viewComputedFields, dataChart === null || dataChart === void 0 ? void 0 : dataChart.config.computedFields));
	        var viewView = _assign(_assign({}, view), { meta: meta, model: '', computedFields: computedFields });
	        viewViews.push(viewView);
	    });
	    return viewViews;
	};

	// import 'core-js/stable/map';
	// need polyfill [Object.values,Array.prototype.find,new Map]
	/**
	 * @param ''
	 * @description 'server task 定时任务 调用'
	 */
	var getBoardQueryData = function (dataStr) {
	    var data = JSON.parse(dataStr || '{}');
	    // const renderMode: VizRenderMode = 'schedule';
	    var dashboard = getDashBoardByResBoard(data);
	    var datacharts = data.datacharts, serverViews = data.views, serverWidgets = data.widgets;
	    var dataCharts = getDataChartsByServer(datacharts, serverViews);
	    var migratedWidgets = migrateWidgets(serverWidgets, dashboard.config.type);
	    var _a = getWidgetMap(migratedWidgets, // TODO
	    dataCharts, dashboard.config.type, serverViews), widgetMap = _a.widgetMap, wrappedDataCharts = _a.wrappedDataCharts;
	    var allDataCharts = dataCharts.concat(wrappedDataCharts);
	    var viewViews = getChartDataView(serverViews, allDataCharts);
	    var viewMap = viewViews.reduce(function (obj, view) {
	        obj[view.id] = view;
	        return obj;
	    }, {});
	    var dashboardDataChartMap = allDataCharts.reduce(function (obj, dataChart) {
	        obj[dataChart.id] = dataChart;
	        return obj;
	    }, {});
	    var downloadParams = getBoardChartRequests({
	        widgetMap: widgetMap,
	        viewMap: viewMap,
	        dashboardDataChartMap: dashboardDataChartMap,
	    });
	    var fileName = dashboard.name;
	    return JSON.stringify({ downloadParams: downloadParams, fileName: fileName });
	};
	var getChartQueryData = function (dataStr) {
	    // see  handleCreateDownloadDataTask
	    var data = JSON.parse(dataStr || '{}');
	    var chartData = convertToChartDto(data);
	    var dataConfig = chartData.config;
	    var chartConfig = dataConfig.chartConfig;
	    var builder = new ChartDataRequestBuilder(_assign(_assign({}, chartData.view), { computedFields: chartData.config.computedFields }), chartConfig === null || chartConfig === void 0 ? void 0 : chartConfig.datas, chartConfig === null || chartConfig === void 0 ? void 0 : chartConfig.settings, {}, false, dataConfig === null || dataConfig === void 0 ? void 0 : dataConfig.aggregation);
	    var downloadParams = [builder.build()];
	    var fileName = (data === null || data === void 0 ? void 0 : data.name) || 'chart';
	    return JSON.stringify({ downloadParams: downloadParams, fileName: fileName });
	};
	var getQueryData = function (type, dataStr) {
	    if (type === 'board') {
	        return getBoardQueryData(dataStr);
	    }
	    else {
	        return getChartQueryData(dataStr);
	    }
	};

	return getQueryData;

}));
